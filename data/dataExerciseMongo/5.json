[{
  "_id": {
    "$oid": "634dbc42e9b9821851ef9498"
  },
  "memoryLimit": 2,
  "source": 2,
  "timeLimit": 2,
  "scores": 50,
  "slug": "aba12c-mua-tao",
  "tags": [],
  "level": "EXPERT",
  "title": "Mua táo",
  "content": "<h2 id=\"problem-name\" class=\"text-center\">B&agrave;i to&aacute;n mua t&aacute;o</h2>\n<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<div id=\"problem-body\">\n<p>Harish đ&atilde; đến một si&ecirc;u thị để mua đ&uacute;ng 'k' kg t&aacute;o cho 'n' người bạn của m&igrave;nh.&nbsp;Si&ecirc;u thị thực sự kỳ lạ.&nbsp;Gi&aacute; của c&aacute;c mặt h&agrave;ng rất kh&aacute;c nhau.&nbsp;Anh v&agrave;o mục T&aacute;o v&agrave; hỏi về gi&aacute; cả.&nbsp;Người b&aacute;n h&agrave;ng đưa cho anh một tấm thẻ ghi gi&aacute; t&aacute;o kh&ocirc;ng t&iacute;nh theo kg.&nbsp;T&aacute;o được đ&oacute;ng th&agrave;nh từng b&igrave;a, mỗi b&igrave;a chứa 'x' kg t&aacute;o, x&gt; 0 v&agrave; 'x' l&agrave; một số nguy&ecirc;n.&nbsp;Một g&oacute;i 'x' kg sẽ được định gi&aacute; bằng rupee 'y'.&nbsp;V&igrave; vậy, tấm bảng chứa một bảng c&oacute; mục nhập 'y' biểu thị gi&aacute; của một g&oacute;i 'x' kg.&nbsp;Nếu 'y' l&agrave; -1 c&oacute; nghĩa l&agrave; g&oacute;i tương ứng kh&ocirc;ng c&oacute; sẵn.&nbsp;B&acirc;y giờ v&igrave; t&aacute;o chỉ c&oacute; sẵn trong c&aacute;c g&oacute;i, anh ấy quyết định mua &iacute;t nhất 'n' g&oacute;i cho 'n' bạn của m&igrave;nh, tức l&agrave; anh ấy sẽ kh&ocirc;ng mua nhiều hơn n g&oacute;i t&aacute;o.</p>\n<p>Harish rất th&iacute;ch bạn b&egrave; của m&igrave;nh v&agrave; v&igrave; vậy anh ấy kh&ocirc;ng muốn l&agrave;m bạn b&egrave; thất vọng.&nbsp;V&igrave; vậy, b&acirc;y giờ, anh ấy sẽ cho bạn biết anh ấy c&oacute; bao nhi&ecirc;u người bạn v&agrave; bạn phải cho anh ấy biết số tiền tối thiểu anh ấy phải chi cho bạn b&egrave; của m&igrave;nh.</p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<ul>\n<li>D&ograve;ng đầu ti&ecirc;n của dữ liệu đầu v&agrave;o sẽ chứa số lượng trường hợp thử nghiệm, C.</li>\n<li>Mỗi trường hợp thử nghiệm sẽ chứa hai d&ograve;ng.</li>\n<li>D&ograve;ng đầu ti&ecirc;n ghi N v&agrave; K, số bạn b&egrave; m&agrave; anh ta c&oacute; v&agrave; số lượng t&aacute;o t&iacute;nh theo ki-l&ocirc;-gam m&agrave; anh ta n&ecirc;n mua.</li>\n<li>D&ograve;ng thứ hai chứa K số nguy&ecirc;n được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch, trong đ&oacute; số nguy&ecirc;n thứ i chỉ định gi&aacute; của g&oacute;i t&aacute;o 'i'kg.&nbsp;Gi&aacute; trị -1 biểu thị rằng g&oacute;i tương ứng kh&ocirc;ng khả dụng.</li>\n</ul>\n<p><strong>Điều kiện</strong></p>\n<ul>\n<li>Số nguy&ecirc;n N sao cho $0 &lt; N \\leq 100$</li>\n<li>Số nguy&ecirc;n K sao cho $0 &lt; K \\leq 100$</li>\n<li>Gi&aacute; cả M sao cho $0 &lt; M \\leq 1000$</li>\n</ul>\n<p><strong>Đầu ra</strong></p>\n<p>Đầu ra cho mỗi trường hợp thử nghiệm phải l&agrave; một d&ograve;ng duy nhất chứa số tiền tối thiểu m&agrave; anh ta phải chi cho bạn b&egrave; của m&igrave;nh.&nbsp;In -1 nếu anh ta kh&ocirc;ng thể thỏa m&atilde;n bạn b&egrave; của m&igrave;nh.</p>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n3 5\n-1 -1 4 5 -1\n5 5\n1 2 3 4 5</code></pre>\n<p><strong>Đầu ra:</strong></p>\n<pre class=\"language-markup\"><code>-1 5</code></pre>\n<p><strong>Giải th&iacute;ch c&aacute;c trường hợp kiểm thử:</strong></p>\n<ol>\n<li>V&igrave; cửa h&agrave;ng chỉ c&oacute; g&oacute;i 3 v&agrave; 4kg n&ecirc;n anh ta sẽ kh&ocirc;ng thể l&agrave;m h&agrave;i l&ograve;ng bạn b&egrave; v&igrave; anh ta sẽ kh&ocirc;ng thể mua đ&uacute;ng 5kg t&aacute;o.</li>\n<li>Anh ta c&oacute; thể mua năm g&oacute;i 1kg v&igrave; anh ta phải mua 5 kg. V&igrave; vậy, số tiền tối thiểu anh ta n&ecirc;n chi l&agrave; 5.</li>\n</ol>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7e278b83-5562-4a82-938a-b7ecfd4847ad",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ABA12C _input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef9499"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 20,
  "slug": "abcpath-abc-path",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Đường dẫn ABC",
  "content": "<p>Bạn sẽ được cung cấp một ma trận 2 chiều gồm c&aacute;c chữ c&aacute;i. T&igrave;m độ d&agrave;i của con đường d&agrave;i nhất của c&aacute;c chữ c&aacute;i li&ecirc;n tiếp, bắt đầu từ 'A'. C&aacute;c đường dẫn c&oacute; thể chuyển từ một chữ c&aacute;i trong ma trận sang bất kỳ chữ c&aacute;i n&agrave;o liền kề (theo chiều ngang, chiều dọc hoặc đường ch&eacute;o). V&iacute; dụ: Trong ma trận sau, c&oacute; một số đường dẫn từ 'A' đến 'D', nhưng kh&ocirc;ng c&oacute; đường n&agrave;o từ 'A' đến 'E':</p>\n<div id=\"problem-body\">\n<div><img style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"ABC\" src=\"https://www.spoj.com/content/simes:ABCPATH-1.png\" alt=\"ABC\" width=\"162\" height=\"108\" /></div>\n<p>Một đường thỏa m&atilde;n b&agrave;i to&aacute;n tr&ecirc;n l&agrave;:</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"ABC path\" src=\"https://www.spoj.com/content/simes:ABCPATH-2.png\" alt=\"path\" width=\"163\" height=\"108\" /></p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Each test case will start with a line contains two integers H, W the height and width of the grid respectively 1 &lt;= H, W &lt;= 50. Then H lines follow each of W uppercase letters only. Input terminates with H = 0 and W = 0.</p>\n<p>Mỗi trường hợp thử nghiệm sẽ bắt đầu bằng một d&ograve;ng chứa hai gi&aacute; trị số nguy&ecirc;n H, W, chiều cao v&agrave; chiều rộng của ma trận theo thứ tự lần lượt. Tiếp theo l&agrave; H d&ograve;ng nối theo sau mỗi W chữ c&aacute;i viết hoa. Đầu v&agrave;o kết th&uacute;c với H = 0 v&agrave; W = 0.</p>\n<h3><strong> Điều kiện</strong></h3>\n<ul>\n<li>$1 \\leq H$</li>\n<li>$W \\leq 50$</li>\n</ul>\n<h3>Định dạng đầu ra</h3>\n<p>Chỉ in ra 1 d&ograve;ng đối với mỗi trường hợp thử nghiệm</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>4 3\nABE\nCFG\nBDH\nABC\n0 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>4</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a421efb1-0784-4681-8b30-eae6117b6058",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ABCPATHinput.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949a"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "coins-bytelandian-gold-coins",
  "tags": [],
  "level": "EXPERT",
  "title": "Đổi đồng tiền xu Bytelandian",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Ở Byteland, họ c&oacute; một hệ thống tiền tệ rất lạ. Mỗi đồng xu v&agrave;ng Bytelandian c&oacute; một số nguy&ecirc;n được viết tr&ecirc;n đ&oacute;. Một đồng n c&oacute; thể được đổi trong ng&acirc;n h&agrave;ng th&agrave;nh ba đồng: n/2, n/3 v&agrave; n/4. Nhưng những con số n&agrave;y đều được l&agrave;m tr&ograve;n xuống (c&aacute;c ng&acirc;n h&agrave;ng phải c&oacute; l&atilde;i).</p>\n<div id=\"problem-body\">\n<p>Bạn cũng c&oacute; thể b&aacute;n tiền xu Bytelandian để đổi đ&ocirc; la Mỹ. Tỷ gi&aacute; hối đo&aacute;i l&agrave; 1:1. Nhưng bạn kh&ocirc;ng thể mua tiền xu Bytelandian. Bạn c&oacute; một đồng tiền v&agrave;ng. Số lượng đ&ocirc; la Mỹ tối đa bạn c&oacute; thể nhận được cho n&oacute; l&agrave; bao nhi&ecirc;u?</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đầu v&agrave;o sẽ chứa một số trường hợp thử nghiệm (kh&ocirc;ng qu&aacute; 10). Mỗi trường hợp l&agrave; một d&ograve;ng duy nhất với số n, $0 \\leq n \\leq 1,000,000,000$. Đ&oacute; l&agrave; số được viết tr&ecirc;n đồng xu của bạn.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm, h&atilde;y in ra một d&ograve;ng duy nhất, chứa số đ&ocirc; la Mỹ tối đa m&agrave; bạn c&oacute; thể kiếm được.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>12\n2</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>13\n2</code></pre>\n<p>Bạn c&oacute; thể thay đổi 12 th&agrave;nh 6, 4 v&agrave; 3, sau đ&oacute; đổi ch&uacute;ng th&agrave;nh \\$6 + \\$4 + \\$3 = \\$13. Nếu bạn thử đổi đồng xu 2 th&agrave;nh 3 đồng xu nhỏ hơn, bạn sẽ nhận được 1, 0 v&agrave; 0, v&agrave; sau đ&oacute; bạn c&oacute; thể nhận được kh&ocirc;ng qu&aacute; 1 đ&ocirc; la từ ch&uacute;ng. Tốt hơn l&agrave; chỉ cần đổi trực tiếp đồng xu 2 th&agrave;nh 2 đ&ocirc; la.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1b4007f4-9099-4742-a469-884e25f11f37",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "COINS_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949b"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "codfury-megatron-va-con-thinh-no-cua-anh-ta",
  "tags": [],
  "level": "EXPERT",
  "title": "Megatron và cơn thịnh nộ",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Tức giận với thất bại của Decepticons sau một trận chiến d&agrave;i hơi với c&aacute;c Autobots, Megatron, trong cơn thịnh nộ của m&igrave;nh, đ&atilde; quyết định ti&ecirc;u diệt tất cả c&aacute;c h&agrave;nh tinh tr&ecirc;n đường trở về Cybertron từ Tr&aacute;i đất. C&oacute; nhiều h&agrave;nh tinh giữa Tr&aacute;i đất v&agrave; Cybertron, v&agrave; mỗi h&agrave;nh tinh c&oacute; một số Autobots để bảo vệ n&oacute; khỏi anh ta. V&igrave; Megatron c&ograve;n &iacute;t đạn, anh ta muốn chiến đấu với &iacute;t robot nhất c&oacute; thể (tr&ecirc;n thực tế, kh&ocirc;ng nhiều hơn \"M\" trong số ch&uacute;ng) tr&ecirc;n đường trở về.</p>\n<p>Bạn cần t&igrave;m số lượng h&agrave;nh tinh tối đa m&agrave; anh ta c&oacute; thể ph&aacute; hủy trong cuộc h&agrave;nh tr&igrave;nh của m&igrave;nh.</p>\n<div id=\"problem-body\">\n<div>LƯU &Yacute;: Megatron c&oacute; thể bắt đầu \"cuộc chiến hủy diệt\" của m&igrave;nh từ bất kỳ h&agrave;nh tinh n&agrave;o v&agrave; chỉ c&oacute; thể di chuyển đến h&agrave;nh tinh tiếp theo từ h&agrave;nh tinh m&agrave; anh ta hiện đang ở.</div>\n<p>Tức giận với thất bại của Decepticons sau một trận chiến d&agrave;i hơi với c&aacute;c Autobots, Megatron, trong cơn thịnh nộ của m&igrave;nh, đ&atilde; quyết định ti&ecirc;u diệt tất cả c&aacute;c h&agrave;nh tinh tr&ecirc;n đường trở về Cybertron từ Tr&aacute;i đất.&nbsp;C&oacute; nhiều h&agrave;nh tinh giữa Tr&aacute;i đất v&agrave; Cybertron, v&agrave; mỗi h&agrave;nh tinh c&oacute; một số Autobots để bảo vệ n&oacute; khỏi anh ta.&nbsp;V&igrave; Megatron c&ograve;n &iacute;t đạn, anh ta muốn chiến đấu với &iacute;t autobot nhất c&oacute; thể tr&ecirc;n đường trở về.</p>\n<p>Bạn cần t&igrave;m số lượng h&agrave;nh tinh tối đa m&agrave; anh ta c&oacute; thể ph&aacute; hủy trong cuộc h&agrave;nh tr&igrave;nh của m&igrave;nh.</p>\n<p>LƯU &Yacute;: Megatron c&oacute; thể bắt đầu \"cuộc chiến hủy diệt\" của m&igrave;nh từ bất kỳ h&agrave;nh tinh n&agrave;o v&agrave; chỉ c&oacute; thể di chuyển đến h&agrave;nh tinh tiếp theo từ h&agrave;nh tinh m&agrave; anh ta hiện đang ở.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Bạn sẽ nhận được một số nguy&ecirc;n \"T\" biểu thị số lượng trường hợp thử nghiệm.&nbsp;(T &lt;= 20)</p>\n<p>Sau đ&oacute;, d&ograve;ng tiếp theo sẽ chứa hai số nguy&ecirc;n được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch kh&ocirc;ng &acirc;m \"P\" v&agrave; \"M\", trong đ&oacute; P l&agrave; số h&agrave;nh tinh tr&ecirc;n đường trở về của anh ta (P &lt;= 50000) v&agrave; M l&agrave; số Autobot tối đa m&agrave; Megatron c&oacute; thể thấy (M &lt;= 1000.000).</p>\n<p>Sau đ&oacute;, một d&ograve;ng chứa P số nguy&ecirc;n c&aacute;ch nhau bởi một khoảng trắng sẽ biểu thị số lượng Autobots c&oacute; mặt tr&ecirc;n mỗi h&agrave;nh tinh.&nbsp;(Đối với mỗi h&agrave;nh tinh sẽ c&oacute; kh&ocirc;ng qu&aacute; 1000 autobots).</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đầu ra của bạn phải bao gồm \"T\" c&aacute;c cặp số nguy&ecirc;n được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch, một cặp tr&ecirc;n mỗi d&ograve;ng, biểu thị số lượng Autobots Megatron sẽ chiến đấu v&agrave; số lượng h&agrave;nh tinh m&agrave; anh ta sẽ ph&aacute; hủy tương ứng.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n4 50\n20 5 23 45</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>48 3</code></pre>\n<p><strong>Giải th&iacute;ch</strong></p>\n<p>Megatron bắt đầu ở h&agrave;nh tinh 1 (với 20 Autobots) v&agrave; đi đến h&agrave;nh tinh 2, sau đ&oacute; l&agrave; h&agrave;nh tinh thứ 3,&nbsp; tại thời điểm n&agrave;y, anh ấy đ&atilde; nh&igrave;n thấy 48 Autobots, nếu anh ấy quyết định đến h&agrave;nh tinh 4, anh ấy sẽ thấy 93 Autobots&hellip; v&igrave; vậy anh ta dừng cuộc h&agrave;nh tr&igrave;nh của m&igrave;nh tại h&agrave;nh tinh thứ 3.</p>\n<p>Megatron, tuy nhi&ecirc;n, c&oacute; thể đ&atilde; bắt đầu ở h&agrave;nh tinh 2 với 5 Autobots, sau đ&oacute; tiếp tục đến h&agrave;nh tinh thứ 4, sau đ&oacute;, anh ấy sẽ thấy 73 Autobots, nhưng, v&igrave; anh ấy muốn thấy những Autobots tối thiểu nhất c&oacute; thể v&agrave; số lượng Autobots n&agrave;y vượt qu&aacute; những g&igrave; anh ta muốn thấy, anh ta quyết định chọn con đường từ h&agrave;nh tinh thứ 1 đến h&agrave;nh tinh thứ 3.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/55d4221a-1faf-441a-b670-76b695dc4d2e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "CODFURY_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949c"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "canton-count-on-cantor",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Phép đếm của Cantor",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Một trong những chứng minh nổi tiếng của to&aacute;n học hiện đại l&agrave; chứng minh của Georg Cantor rằng tập hợp c&aacute;c số hữu tỉ l&agrave; c&oacute; thể đếm được. Chứng minh được thực hiện bằng c&aacute;ch sử dụng một ph&eacute;p liệt k&ecirc; r&otilde; r&agrave;ng c&aacute;c số hữu tỉ như thể hiện trong sơ đồ b&ecirc;n dưới.</p>\n<pre class=\"language-markup\"><code>1/1 1/2 1/3 1/4 1/5 ...\n2/1 2/2 2/3 2/4\n3/1 3/2 3/3\n4/1 4/2\n5/1</code></pre>\n<div id=\"problem-body\">\n<p>Trong sơ đồ tr&ecirc;n, số hạng đầu ti&ecirc;n l&agrave; 1/1, số hạng thứ hai l&agrave; 1/2, số hạng thứ ba l&agrave; 2/1, số hạng thứ tư l&agrave; 3/1, số hạng thứ năm l&agrave; 2/2,...</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o bắt đầu bằng một d&ograve;ng chứa một số nguy&ecirc;n $t \\leq 20$, số lượng trường hợp thử nghiệm. Tiếp theo l&agrave; t trường hợp thử nghiệm. Sau đ&oacute;, n&oacute; chứa một số duy nhất tr&ecirc;n mỗi d&ograve;ng.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Bạn h&atilde;y viết một chương tr&igrave;nh đọc v&agrave;o một danh s&aacute;ch c&aacute;c số trong phạm vi từ 1 đến $10^{7}$ v&agrave; in ra cho mỗi số một số hạng tương ứng trong ph&eacute;p liệt k&ecirc; của Cantor như được cho b&ecirc;n dưới.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3\n3\n14\n7</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>TERM 3 IS 2/1\nTERM 14 IS 2/4\nTERM 7 IS 1/4</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/76f60528-e8f7-47c4-8ac3-d370a3b7cee0",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "CANTON_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949d"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "buglife-a-bugs-life",
  "tags": [],
  "level": "EXPERT",
  "title": "Thử nghiệm cuộc đời của con bọ",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Gi&aacute;o sư Hopper đang nghi&ecirc;n cứu về h&agrave;nh vi t&igrave;nh dục của một lo&agrave;i bọ hiếm. Gi&aacute;o sư giả định rằng ch&uacute;ng c&oacute; hai giới t&iacute;nh kh&aacute;c nhau v&agrave; ch&uacute;ng chỉ giao tiếp với những con bọ kh&aacute;c giới. Trong thử nghiệm của &ocirc;ng, mỗi con bọ v&agrave; c&aacute;ch giao tiếp của ch&uacute;ng rất dễ x&aacute;c định, bởi v&igrave; c&aacute;c con số được in tr&ecirc;n sau lưng của ch&uacute;ng.</p>\n<div id=\"problem-body\">\n<p>Cho trước một danh s&aacute;ch số lượng giao tiếp của con bọ, h&atilde;y x&aacute;c định xem thử nghiệm c&oacute; chứng minh đ&uacute;ng về giả định của gi&aacute;o sư về 2 con bọ c&oacute; c&ugrave;ng giới t&iacute;nh nhưng kh&ocirc;ng quan hệ hay nếu n&oacute; c&oacute; chứa một số giao tiếp của con bọ m&agrave; l&agrave;m thay đổi điều đ&oacute;.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chứa số lượng trường hợp. Mỗi trường hợp bắt đầu bằng một d&ograve;ng cho biết số lượng con bọ (&iacute;t nhất l&agrave; một v&agrave; tối đa l&agrave; 2000) v&agrave; số lượng giao tiếp (l&ecirc;n đến 1,000,000) được ph&acirc;n t&aacute;ch bằng một khoảng trắng. Trong c&aacute;c d&ograve;ng tiếp theo, mỗi lần giao tiếp được cho dưới dạng hai gi&aacute; trị số của con bọ ri&ecirc;ng biệt, được ph&acirc;n t&aacute;ch nhau bởi một khoảng trắng. C&aacute;c con bọ được đ&aacute;nh số li&ecirc;n tục bắt đầu từ một.</p>\n<h3>Định dạng đầu ra</h3>\n<p>The output for every scenario is a line containing &ldquo;<tt>Scenario #i:</tt>&rdquo;, where i is the number of the scenario starting at 1, followed by one line saying either &ldquo;<tt>No suspicious bugs found!</tt>&rdquo; if the experiment is consistent with his assumption about the bugs&rsquo; sexual behavior, or &ldquo;<tt>Suspicious bugs found!</tt>&rdquo; if Professor Hopper&rsquo;s assumption is definitely wrong.</p>\n<p>Đầu ra cho mỗi trường hợp l&agrave; một d&ograve;ng c&oacute; chứa &ldquo;Scenario #i:&rdquo;, trong đ&oacute; i l&agrave; số của trường hợp bắt đầu từ 1, theo sau l&agrave; một d&ograve;ng cho biết \"No suspicious bugs found!\" nếu thử nghiệm tr&ugrave;ng khớp với giả định của gi&aacute;o sư về h&agrave;nh vi t&igrave;nh dục của con bọ hoặc \"Suspicious bugs found!\" nếu giả định của gi&aacute;o sư Hopper chắc chắn l&agrave; sai.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n3 3\n1 2\n2 3\n1 3\n4 2\n1 2\n3 4</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>Scenario #1:\nSuspicious bugs found!\nScenario #2:\nNo suspicious bugs found!</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/03018e4e-189b-40ac-91ab-ddb448802d8a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "BUGLIFE_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949e"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "books1-copying-books",
  "tags": [],
  "level": "EXPERT",
  "title": "Sao chép sách",
  "content": "<p>Trước khi ph&aacute;t minh ra in s&aacute;ch, rất kh&oacute; để tạo ra một bản sao của một cuốn s&aacute;ch. Tất cả c&aacute;c nội dung phải được viết lại bằng tay bởi những người được gọi l&agrave; người ghi ch&eacute;p. Người ghi ch&eacute;p đ&atilde; được tặng một cuốn s&aacute;ch v&agrave; sau v&agrave;i th&aacute;ng anh ta đ&atilde; ho&agrave;n th&agrave;nh bản sao của n&oacute;. Một trong những người ghi ch&eacute;p nổi tiếng nhất sống ở thế kỷ 15 v&agrave; t&ecirc;n của &ocirc;ng l&agrave; Xaverius Endricus Remius Ontius Xendrianus (Xerox). D&ugrave; sao th&igrave; c&ocirc;ng việc cũng rất kh&oacute; chịu v&agrave; nh&agrave;m ch&aacute;n. V&agrave; c&aacute;ch duy nhất để tăng tốc l&agrave; thu&ecirc; th&ecirc;m người ghi ch&eacute;p.</p>\n<div id=\"problem-body\">\n<p>Ng&agrave;y xửa ng&agrave;y xưa, c&oacute; một đo&agrave;n kịch muốn đ&oacute;ng những vở Antique Tragedies nổi tiếng. Kịch bản của những vở kịch n&agrave;y đ&atilde; được chia th&agrave;nh nhiều cuốn s&aacute;ch v&agrave; tất nhi&ecirc;n c&aacute;c diễn vi&ecirc;n cần th&ecirc;m nhiều bản sao của ch&uacute;ng. V&igrave; vậy, họ đ&atilde; thu&ecirc; nhiều người ghi ch&eacute;p để sao ch&eacute;p những cuốn s&aacute;ch n&agrave;y. H&atilde;y tưởng tượng bạn c&oacute; m cuốn s&aacute;ch (đ&aacute;nh số 1, 2 ... m) c&oacute; thể c&oacute; số trang kh&aacute;c nhau ($p_{1}, p_{2} ... p_{m}$) v&agrave; bạn muốn tạo một bản sao của mỗi cuốn s&aacute;ch đ&oacute;. Nhiệm vụ của bạn l&agrave; chia những cuốn s&aacute;ch n&agrave;y cho k người ghi ch&eacute;p, $k \\leq m$. Mỗi cuốn s&aacute;ch chỉ c&oacute; thể được giao cho một người ghi ch&eacute;p duy nhất v&agrave; mỗi người ghi ch&eacute;p phải nhận được một chuỗi c&aacute;c cuốn s&aacute;ch li&ecirc;n tục. Điều đ&oacute; c&oacute; nghĩa l&agrave;, tồn tại một d&atilde;y số li&ecirc;n tiếp tăng dần $0 = b_{0} &lt;b_{1} &lt;b_{2}, ... &lt;b_{k-1} \\leq b_{k} = m$ sao cho người ghi ch&eacute;p thứ i nhận được một chuỗi c&aacute;c cuốn s&aacute;ch c&oacute; c&aacute;c số từ $b_{i-1}+1 đến b_{i}$. Thời gian cần thiết để sao ch&eacute;p tất cả c&aacute;c cuốn s&aacute;ch được x&aacute;c định bởi người ghi ch&eacute;p được giao nhiều việc nhất. Do đ&oacute;, mục ti&ecirc;u của ch&uacute;ng ta l&agrave; giảm thiểu số trang tối đa được chỉ định cho một người ghi ch&eacute;p. Nhiệm vụ của bạn l&agrave; t&igrave;m ra phương &aacute;n giao việc tối ưu nhất.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o bao gồm N trường hợp (khoảng 200). D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chỉ chứa số nguy&ecirc;n dương N. Sau đ&oacute; l&agrave; c&aacute;c trường hợp. Mỗi trường hợp bao gồm đ&uacute;ng hai d&ograve;ng. Ở d&ograve;ng thứ nhất c&oacute; hai số nguy&ecirc;n m v&agrave; k, $1 \\leq k \\leq m \\leq 500$. Ở d&ograve;ng thứ hai gồm c&aacute;c số nguy&ecirc;n $p_{1}, p_{2},...p_{m}$ c&aacute;ch nhau bởi dấu c&aacute;ch. Tất cả c&aacute;c gi&aacute; trị n&agrave;y đều l&agrave; c&aacute;c số dương v&agrave; nhỏ hơn 10000000.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp, in ra ch&iacute;nh x&aacute;c một d&ograve;ng. D&ograve;ng đ&oacute; phải chứa đầu v&agrave;o li&ecirc;n tiếp p1, p2, ... pm được chia th&agrave;nh đ&uacute;ng k phần sao cho tổng lớn nhất của một phần phải nhỏ nhất c&oacute; thể. H&atilde;y sử dụng k&yacute; tự gạch ch&eacute;o ('/') để t&aacute;ch c&aacute;c phần. Phải c&oacute; ch&iacute;nh x&aacute;c một k&yacute; tự khoảng trắng giữa hai số li&ecirc;n tiếp bất kỳ v&agrave; giữa số với dấu gạch ch&eacute;o.</p>\n<p>Nếu c&oacute; nhiều hơn một giải ph&aacute;p, h&atilde;y in ra một giải ph&aacute;p giảm thiểu c&ocirc;ng việc được giao cho người ghi ch&eacute;p đầu ti&ecirc;n, sau đ&oacute; cho người ghi ch&eacute;p thứ hai,... Nhưng mỗi người ghi ch&eacute;p phải được giao &iacute;t nhất một cuốn s&aacute;ch.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n9 3\n100 200 300 400 500 600 700 800 900\n5 4\n100 100 100 100 100</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>100 200 300 400 500 / 600 700 / 800 900\n100 / 100 / 100 / 100 100</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5790e4a3-67f3-4fb3-94d2-a668b6cb6b7e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "BOOKS1_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef949f"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "elevtrbl-elevator-trouble",
  "tags": [],
  "level": "EXPERT",
  "title": "Bài toán thang máy",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Bạn đang tr&ecirc;n đường đến cuộc phỏng vấn xin việc đầu ti&ecirc;n với tư c&aacute;ch l&agrave; người kiểm tra chương tr&igrave;nh, v&agrave; bạn đ&atilde; đến muộn. Cuộc phỏng vấn diễn ra trong một t&ograve;a nh&agrave; chọc trời v&agrave; bạn hiện đang ở tầng s, v&agrave; bạn nh&igrave;n thấy thang m&aacute;y. Khi bước v&agrave;o thang m&aacute;y, bạn biết rằng n&oacute; chỉ c&oacute; hai n&uacute;t, được đ&aacute;nh dấu \"UP u\" v&agrave; \"DOWN d\". Bạn kết luận rằng n&uacute;t UP sẽ đưa l&ecirc;n tầng u (nếu kh&ocirc;ng c&oacute; đủ tầng, nhấn n&uacute;t UP sẽ kh&ocirc;ng l&agrave;m g&igrave; cả), trong khi n&uacute;t DOWN sẽ đưa bạn xuống tầng (hoặc kh&ocirc;ng nếu kh&ocirc;ng đủ tầng). Biết rằng cuộc phỏng vấn ở tầng g v&agrave; chỉ c&oacute; tầng f trong t&ograve;a nh&agrave;, bạn nhanh ch&oacute;ng quyết định viết một chương tr&igrave;nh cung cấp cho bạn số lần nhấn n&uacute;t m&agrave; bạn cần thực hiện. Nếu bạn kh&ocirc;ng thể đến đ&uacute;ng tầng, chương tr&igrave;nh của bạn sẽ tạm dừng với th&ocirc;ng b&aacute;o \"use stair\".</p>\n<p>Với đầu v&agrave;o f, s, g, u v&agrave; d (tầng, điểm xuất ph&aacute;t, tầng cần l&ecirc;n, đi l&ecirc;n, đi xuống), t&igrave;m chuỗi c&aacute;c lần nhấn n&uacute;t ngắn nhất m&agrave; bạn phải nhấn để đi từ s đến g, với một t&ograve;a nh&agrave; gồm c&aacute;c tầng, hoặc in ra \"use stairs\" nếu bạn kh&ocirc;ng thể đi từ s đến g bằng thang m&aacute;y.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o sẽ bao gồm một d&ograve;ng, cụ thể l&agrave; f s g u d, trong đ&oacute; $1 \\leq s, g \\leq f \\leq 1,000,000$ v&agrave; $0 \\leq u, d \\leq 1,000,000$. C&aacute;c tầng được lập chỉ số, nếu c&oacute; 10 tầng, s v&agrave; g sẽ nằm trong khoảng [1:10].</p>\n<h3>Định dạng đầu ra</h3>\n<p>Bạn phải trả lời bằng số lần nhấn tối thiểu m&agrave; bạn phải thực hiện để đi từ s đến g, hoặc in ra \"use stair\" nếu kh&ocirc;ng thể.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>10 1 10 2 1</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>6</code></pre>\n<p><strong>V&iacute; dụ 2</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>100 2 1 1 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>use the stairs</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/16d26274-ff75-4ee6-9a84-3c8aba875acc",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ELEVTRBL_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a0"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 100,
  "slug": "gcpc11j-time-to-live",
  "tags": [],
  "level": "EXPERT",
  "title": "Thời gian tồn tại của gói tin",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Như bạn c&oacute; thể biết, hầu hết c&aacute;c mạng m&aacute;y t&iacute;nh được tổ chức theo cấu tr&uacute;c c&acirc;y, mỗi m&aacute;y t&iacute;nh đều c&oacute; thể truy cập được bởi c&aacute;c m&aacute;y t&iacute;nh kh&aacute;c nhưng chỉ qua một đường dẫn duy nhất. Thời gian tồn tại (TTL) chỉ định sau bao nhi&ecirc;u bước nhảy m&agrave; một g&oacute;i mạng bị rớt nếu n&oacute; chưa đến đ&iacute;ch. Mục đ&iacute;ch của TTL l&agrave; để tr&aacute;nh c&aacute;c t&igrave;nh huống trong đ&oacute; một g&oacute;i di chuyển lặp lại qua mạng do lỗi trong bảng định tuyến.</p>\n<div id=\"problem-body\">\n<p>Việc bố tr&iacute; một bộ định tuyến kết nối mạng n&agrave;y với mạng kh&aacute;c l&agrave; tối ưu khi TTL cần thiết tối đa cho c&aacute;c g&oacute;i được gửi từ bộ định tuyến n&agrave;y đến bất kỳ m&aacute;y t&iacute;nh n&agrave;o kh&aacute;c trong c&ugrave;ng một mạng l&agrave; tối thiểu. Với một mạng được chỉ định ở tr&ecirc;n, bạn h&atilde;y t&iacute;nh to&aacute;n TTL cần thiết tối đa trong mạng n&agrave;y nếu bạn c&oacute; thể chọn m&aacute;y t&iacute;nh sẽ được sử dụng l&agrave;m bộ định tuyến.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>The first line of the input consists of the number of test cases&nbsp;<em>c</em>&nbsp;that follow (<em>1 &le; c &le; 100</em>). Each test case starts with a line specifying&nbsp;<em>N</em>, the number of computers in this network (<em>1 &lt; N &le; 10<sup>5</sup></em>). Computers are numbered from&nbsp;<em>0</em>&nbsp;to&nbsp;<em>N-1</em>. Then follow&nbsp;<em>N-1</em>&nbsp;lines, each specifying a network connection by two numbers&nbsp;<em>a</em>&nbsp;and&nbsp;<em>b</em>&nbsp;which means that computer&nbsp;<em>a</em>&nbsp;is connected to computer&nbsp;<em>b</em>&nbsp;and vice versa, of course (<em>0 &le; a,b &lt; N</em>).</p>\n<p>D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o bao gồm số lượng trường hợp thử nghiệm c&nbsp; sao cho 1 &le; c &le; 100. Mỗi trường hợp thử nghiệm bắt đầu bằng một d&ograve;ng chỉ định N, số lượng m&aacute;y t&iacute;nh trong mạng (1 &lt;N &le; 105). M&aacute;y t&iacute;nh được đ&aacute;nh số từ 0 đến N-1. Sau N-1 d&ograve;ng, mỗi d&ograve;ng chỉ định một kết nối mạng bằng hai số a v&agrave; b, c&oacute; nghĩa l&agrave; m&aacute;y t&iacute;nh a được kết nối với m&aacute;y t&iacute;nh b v&agrave; ngược lại (0 &le; a, b &lt;N).</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm trong đầu v&agrave;o, in ra một d&ograve;ng chứa TTL tối ưu như đ&atilde; chỉ định ở tr&ecirc;n.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3\n2\n1 0\n5\n3 2\n2 1\n0 2\n2 4\n9\n3 1\n6 5\n3 4\n0 3\n8 1\n1 7\n1 6\n2 3</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>1\n1\n2</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e3cc317e-6fda-419b-9082-7c990f6ddd74",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "GCPC11J_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a1"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "gcpc11f-diary",
  "tags": [],
  "level": "EXPERT",
  "title": "Nhật ký mã hóa",
  "content": "<p>Ng&agrave;y nay, những người muốn giao tiếp một c&aacute;ch an to&agrave;n sẽ phải sử dụng c&aacute;c thuật to&aacute;n m&atilde; h&oacute;a bất đối xứng như RSA. Tuy nhi&ecirc;n, anh trai t&ocirc;i sử dụng một phương ph&aacute;p m&atilde; h&oacute;a kh&aacute;c, đơn giản hơn cho c&aacute;c mục nhật k&yacute; của anh ấy. Anh ta sử dụng một hệ mật m&atilde; thay thế, trong đ&oacute; mỗi chữ c&aacute;i trong bản r&otilde; được thay thế bằng một chữ c&aacute;i kh&aacute;c trong bảng chữ c&aacute;i. Khoảng c&aacute;ch giữa k&yacute; tự bản r&otilde; v&agrave; k&yacute; tự m&atilde; h&oacute;a được cố định. Nếu ch&uacute;ng ta x&aacute;c định khoảng c&aacute;ch cố định d l&agrave; 5, A sẽ được thay thế bởi F, B l&agrave; G, C l&agrave; H, ..., Y l&agrave; D, Z l&agrave; E.</p>\n<div id=\"problem-body\">\n<p>Với khoảng c&aacute;ch d cố định v&agrave; đ&atilde; biết, việc giải m&atilde; sẽ đơn giản. Nhưng anh trai t&ocirc;i sử dụng khoảng c&aacute;ch ngẫu nhi&ecirc;n cho mỗi mục nhật k&yacute; của m&igrave;nh. Để giải m&atilde; nhật k&yacute; của anh ấy, t&ocirc;i phải đo&aacute;n khoảng c&aacute;ch d cho mỗi mục. V&igrave; vậy, t&ocirc;i sử dụng một hiện tượng nổi tiếng l&agrave; chữ E được sử dụng thường xuy&ecirc;n hơn trong c&aacute;c từ tiếng Anh hơn c&aacute;c chữ c&aacute;i kh&aacute;c. Bạn h&atilde;y viết một chương tr&igrave;nh t&iacute;nh to&aacute;n khoảng c&aacute;ch d dựa tr&ecirc;n thực tế l&agrave; k&yacute; tự được sử dụng nhiều nhất trong văn bản được m&atilde; h&oacute;a tương ứng với k&yacute; tự E trong bản r&otilde; kh&ocirc;ng?</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o bao gồm một số trường hợp c sao cho 1 &le; c &le; 100. Mỗi trường hợp được đưa ra trong đ&uacute;ng một d&ograve;ng chứa một mục nhật k&yacute;. Mục nhật k&yacute; chỉ sử dụng chữ in hoa (A-Z) v&agrave; dấu c&aacute;ch. Mỗi mục nhật k&yacute; bao gồm nhiều nhất 1000 chữ c&aacute;i được m&atilde; h&oacute;a (bao gồm cả dấu c&aacute;ch).</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp, h&atilde;y in ra một d&ograve;ng chứa khoảng c&aacute;ch nhỏ nhất c&oacute; thể d (0 &le; d &le; 25) v&agrave; văn bản được giải m&atilde;. Nếu kh&ocirc;ng thể giải m&atilde; v&igrave; c&oacute; nhiều khoảng c&aacute;ch tu&acirc;n theo c&aacute;c quy tắc ở tr&ecirc;n, h&atilde;y in ra NOT POSSIBLE. Dấu c&aacute;ch kh&ocirc;ng được m&atilde; h&oacute;a.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>4\nRD TQIJW GWTYMJWX INFWD JSYWNJX ZXJ F XNRUQJ JSHWDUYNTS YJHMSNVZJ\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\nXVIDRE TFCCVXZRKV GIFXIRDDZEX TFEKVJK UVTIPGKZFE\nXVIDRE TFCCVXZRKV GIFXIRDDZEX TFEKVJK</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>5 MY OLDER BROTHERS DIARY ENTRIES USE A SIMPLE ENCRYPTION TECHNIQUE\n10 JXU GKYSA RHEMD VEN ZKCFI ELUH JXU BQPO TEW\n17 GERMAN COLLEGIATE PROGRAMMING CONTEST DECRYPTION\nNOT POSSIBLE</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ed56011a-6e69-457f-949c-7e7fd738c866",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "GCPC11F_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a2"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "fctrl2-small-factorials",
  "tags": [],
  "level": "EXPERT",
  "title": "Tính giai thừa",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Bạn được y&ecirc;u cầu t&iacute;nh giai thừa của một số số nguy&ecirc;n dương nhỏ.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p align=\"justify\">Một số nguy&ecirc;n t, 1 &lt;= t &lt;= 100, biểu thị số lượng trường hợp thử nghiệm, theo sau l&agrave; t d&ograve;ng, mỗi d&ograve;ng chứa một số nguy&ecirc;n n, 1 &lt;= n &lt;= 100.</p>\n<h3>Định dạng đầu ra</h3>\n<p align=\"justify\">Với mỗi số nguy&ecirc;n n đ&atilde; cho ở đầu v&agrave;o, hiển thị một d&ograve;ng c&oacute; gi&aacute; trị l&agrave; n!</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>4\n1\n2\n5\n3</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>1\n2\n120\n6</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/91d57920-1606-4075-9cbb-923dc09b9d50",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "FCTRL2_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a3"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "fctrl-factorial",
  "tags": [],
  "level": "EXPERT",
  "title": "Hàm Factorial",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Phần quan trọng nhất của mạng GSM được gọi l&agrave; <em>Base Transceiver Station</em>&nbsp;(<em>BTS</em>). C&aacute;c bộ thu ph&aacute;t n&agrave;y tạo th&agrave;nh c&aacute;c khu vực được gọi l&agrave; cells v&agrave; mỗi điện thoại kết nối với BTS với t&iacute;n hiệu mạnh nhất. C&aacute;c trạm BTS cần một số ch&uacute; &yacute; v&agrave; c&aacute;c kỹ thuật vi&ecirc;n kiểm tra chức năng của ch&uacute;ng theo định kỳ.</p>\n<div id=\"problem-body\">\n<p>C&aacute;c kỹ thuật vi&ecirc;n ACM đ&atilde; phải đối mặt với một vấn đề dạo gần đ&acirc;y. Với một tập hợp c&aacute;c trạm BTS, họ cần t&igrave;m con đường ngắn nhất để kiểm tra tất cả c&aacute;c điểm đ&atilde; cho v&agrave; quay trở lại t&ograve;a nh&agrave; trung t&acirc;m của c&ocirc;ng ty. C&aacute;c lập tr&igrave;nh vi&ecirc;n đ&atilde; d&agrave;nh v&agrave;i th&aacute;ng để nghi&ecirc;n cứu vấn đề n&agrave;y nhưng kh&ocirc;ng c&oacute; kết quả. Họ kh&ocirc;ng thể t&igrave;m ra giải ph&aacute;p đủ nhanh. Sau một thời gian d&agrave;i, một trong những lập tr&igrave;nh vi&ecirc;n đ&atilde; t&igrave;m ra vấn đề n&agrave;y trong một b&agrave;i b&aacute;o hội nghị. Thật kh&ocirc;ng may, anh ấy ph&aacute;t hiện ra rằng vấn đề \"Vấn đề người b&aacute;n h&agrave;ng đi du lịch\" v&agrave; n&oacute; rất kh&oacute; giải quyết. Nếu ch&uacute;ng ta c&oacute; N BTS cần kiểm tra, ch&uacute;ng ta c&oacute; thể kiểm tra ch&uacute;ng theo thứ tự bất kỳ, cho ch&uacute;ng ta N! c&aacute;c khả năng. H&agrave;m thể hiện số đ&oacute; được gọi l&agrave; factorial v&agrave; c&oacute; thể được t&iacute;nh l&agrave; t&iacute;ch của 1.2.3.4 .... N.</p>\n<p>C&aacute;c lập tr&igrave;nh vi&ecirc;n hiểu rằng họ kh&ocirc;ng c&oacute; cơ hội để giải quyết vấn đề. Nhưng v&igrave; họ đ&atilde; nhận được t&agrave;i trợ nghi&ecirc;n cứu từ ch&iacute;nh phủ, họ cần tiếp tục nghi&ecirc;n cứu v&agrave; tạo ra &iacute;t nhất một số kết quả. V&igrave; vậy, họ bắt đầu nghi&ecirc;n cứu h&agrave;nh vi của h&agrave;m factorial.</p>\n<p>V&iacute; dụ, họ định nghĩa h&agrave;m Z. Đối với bất kỳ số nguy&ecirc;n dương N n&agrave;o, Z(N) l&agrave; số lượng c&aacute;c số 0 ở cuối của số N! ở dạng thập ph&acirc;n. Họ nhận thấy rằng h&agrave;m n&agrave;y kh&ocirc;ng bao giờ giảm. Nếu ch&uacute;ng ta c&oacute; hai số $N_{1} &lt;N2$, th&igrave; $Z(N_{1})&nbsp; \\leq Z(N_{2})$. Đ&oacute; l&agrave; bởi v&igrave; ch&uacute;ng ta kh&ocirc;ng bao giờ c&oacute; thể bỏ qua bất kỳ số 0 ở cuối n&agrave;o bằng c&aacute;ch nh&acirc;n với bất kỳ số dương n&agrave;o. Ch&uacute;ng ta chỉ c&oacute; thể nhận được c&aacute;c số 0 mới. H&agrave;m Z rất th&uacute; vị, v&igrave; vậy ch&uacute;ng ta cần một chương tr&igrave;nh m&aacute;y t&iacute;nh c&oacute; thể x&aacute;c định gi&aacute; trị của n&oacute; một c&aacute;ch hiệu quả.</p>\n<h3>Định đạng đầu v&agrave;o</h3>\n<p>C&oacute; một số nguy&ecirc;n dương T tr&ecirc;n d&ograve;ng đầu ti&ecirc;n của dữ liệu đầu v&agrave;o (khoảng 100,000). N&oacute; viết tắt cho số lượng c&aacute;c con số đằng sau. Sau đ&oacute; c&oacute; T d&ograve;ng, mỗi d&ograve;ng chứa đ&uacute;ng một số nguy&ecirc;n dương N, $1 \\leq N \\leq 1000000000$.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Với mỗi số N, h&atilde;y in ra một d&ograve;ng duy nhất chứa số nguy&ecirc;n kh&ocirc;ng &acirc;m Z(N).</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>6\n3\n60\n100\n1024\n23456\n8735373</code></pre>\n<p><strong>Đầu ra</strong><tt></tt></p>\n<pre class=\"language-markup\"><code>0\n14\n24\n253\n5861\n2183837</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/70bd9194-a8c2-40eb-bab6-2c5296362a1e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "FCTRL_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a4"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "herding-herding",
  "tags": [],
  "level": "EXPERT",
  "title": "Bắt mèo",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Một số con m&egrave;o hoang đ&atilde; được thả r&ocirc;ng trong th&agrave;nh phố, v&agrave; với tư c&aacute;ch l&agrave; người bắt m&egrave;o, bạn đ&atilde; được giao nhiệm vụ quan trọng l&agrave; phải bắt lại tất cả những con m&egrave;o n&agrave;y. Đ&acirc;y l&agrave; cơ hội l&yacute; tưởng để kiểm tra ph&aacute;t minh mới nhất của bạn, một c&aacute;i bẫy m&egrave;o đảm bảo sẽ bắt được mọi con m&egrave;o đi v&agrave;o một v&ugrave;ng nhỏ h&igrave;nh vu&ocirc;ng của th&agrave;nh phố.</p>\n<div id=\"problem-body\">\n<p>May mắn thay, bạn c&oacute; sự hỗ trợ của một trong những nh&agrave; t&acirc;m l&yacute; học về m&egrave;o h&agrave;ng đầu thế giới, người c&oacute; khả năng ti&ecirc;n đo&aacute;n tuyệt vời, cho trước một v&ugrave;ng nhỏ h&igrave;nh vu&ocirc;ng của th&agrave;nh phố. V&agrave; bạn vẫn kh&ocirc;ng biết tất cả những con m&egrave;o hiện đang ở đ&acirc;u.</p>\n<p>Để chứng minh hiệu quả chi ph&iacute; của phương ph&aacute;p của bạn cho th&agrave;nh phố, điều quan trọng l&agrave; phải giảm thiểu số lượng bẫy được sử dụng.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o sẽ bắt đầu bằng một d&ograve;ng gồm hai số n v&agrave; m, c&aacute;ch nhau bởi dấu c&aacute;ch (1 &le; n, m &le; 1000). Th&agrave;nh phố sẽ l&agrave; một mạng lưới n x m gồm c&aacute;c v&ugrave;ng h&igrave;nh vu&ocirc;ng. N d&ograve;ng tiếp theo, mỗi d&ograve;ng sẽ bao gồm một chuỗi k&yacute; tự c&oacute; độ d&agrave;i m, bao gồm c&aacute;c chữ c&aacute;i 'N', 'E', 'S' hoặc 'W', đại diện cho ph&iacute;a bắc, đ&ocirc;ng, nam v&agrave; t&acirc;y, tương ứng. (K&yacute; tự đầu ti&ecirc;n của d&ograve;ng đầu ti&ecirc;n sẽ l&agrave; điểm cực T&acirc;y Bắc.). Hướng trong v&ugrave;ng h&igrave;nh vu&ocirc;ng l&agrave; hướng con m&egrave;o sẽ đi tới nếu ch&uacute;ng ở trong h&igrave;nh vu&ocirc;ng đ&oacute;. Nh&agrave; t&acirc;m l&yacute; học m&egrave;o đảm bảo với bạn rằng m&egrave;o sẽ kh&ocirc;ng muốn rời khỏi th&agrave;nh phố.</p>\n<h3>Định dạng đầu ra</h3>\n<p>In ra số lượng bẫy tối thiểu cần thiết.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3 4\nSWWW\nSEWN\nEEEN</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>2</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/eb7b8242-afb1-4e74-a645-94b22c387fcd",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "HERDING_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a5"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "girlsnbs-girls-and-boys",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Sắp xếp học sinh nam và học sinh nữ",
  "content": "<p>C&oacute; G số học sinh nữ v&agrave; B số học sinh nam trong một lớp sắp tốt nghiệp. Bạn cần phải sắp xếp số học sinh n&agrave;y v&agrave;o trong một h&agrave;ng duy nhất cho lễ tốt nghiệp. Để tạo ấn tượng tốt hơn về sự đa dạng, bạn n&ecirc;n tr&aacute;nh việc c&oacute; qu&aacute; nhiều b&eacute; g&aacute;i hoặc qu&aacute; nhiều b&eacute; trai ngồi liền nhau. Bạn đ&atilde; quyết định sắp xếp c&aacute;c học sinh để giảm thiểu việc sắp xếp giới t&iacute;nh. Sắp xếp giới t&iacute;nh l&agrave; số lượng tối đa học sinh c&ugrave;ng giới (tất cả c&aacute;c em g&aacute;i hoặc tất cả c&aacute;c em trai) xuất hiện li&ecirc;n tiếp. Cho G v&agrave; B, h&atilde;y t&iacute;nh c&aacute;ch sắp xếp giới t&iacute;nh tối thiểu trong số tất cả c&aacute;c c&aacute;ch sắp xếp c&oacute; thể.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Mỗi trường hợp thử nghiệm được m&ocirc; tả bằng c&aacute;ch sử dụng một d&ograve;ng duy nhất. D&ograve;ng n&agrave;y chứa hai số nguy&ecirc;n G v&agrave; B lần lượt thể hiện số học sinh nam v&agrave; nữ trong lớp (0 &le; G, B &le; 1000). Phần cuối của đầu v&agrave;o được biểu thị bằng một d&ograve;ng chứa số &minus;1 hai lần.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm, h&atilde;y in ra một d&ograve;ng với một số nguy&ecirc;n duy nhất đại diện cho việc sắp xếp giới t&iacute;nh tối thiểu m&agrave; sự sắp xếp G học sinh nữ v&agrave; B học sinh nam c&oacute; thể c&oacute;.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>10 10\n5 1\n0 1000\n-1 -1</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>1\n3\n1000</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/227db052-bf27-4673-94c1-48bcccb0ba5f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "GIRLSNBS_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a6"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 100,
  "slug": "trafficn-traffic-network",
  "tags": [],
  "level": "EXPERT",
  "title": "Bài toán mạng lưới giao thông",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Mạng lưới giao th&ocirc;ng th&agrave;nh phố bao gồm n n&uacute;t được đ&aacute;nh số từ 1 đến n v&agrave; m đường một chiều nối c&aacute;c cặp n&uacute;t. Để giảm độ d&agrave;i của đường đi ngắn nhất giữa hai n&uacute;t quan trọng kh&aacute;c nhau s v&agrave; t, một danh s&aacute;ch k đường hai chiều được đề xuất để x&acirc;y dựng. Nhiệm vụ của bạn l&agrave; viết một chương tr&igrave;nh để chọn ra một đường hai chiều từ danh s&aacute;ch đề xuất để giảm thiểu đường đi ngắn nhất giữa s v&agrave; t.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Tệp đầu v&agrave;o bao gồm một số tập dữ liệu. D&ograve;ng đầu ti&ecirc;n của tệp đầu v&agrave;o chứa số lượng bộ dữ liệu l&agrave; một số nguy&ecirc;n dương v&agrave; kh&ocirc;ng lớn hơn 20. C&aacute;c d&ograve;ng sau m&ocirc; tả c&aacute;c bộ dữ liệu.</p>\n<p>Đối với mỗi tập dữ liệu, d&ograve;ng đầu ti&ecirc;n chứa năm số nguy&ecirc;n dương n (n &le; 10 000), m (m &le; 100 000), k (k &lt;300), s (1 &le; s &le; n), t (1 &le; t &le; n) ngăn c&aacute;ch nhau bởi dấu c&aacute;ch. D&ograve;ng thứ i trong số m d&ograve;ng tiếp theo chứa ba số nguy&ecirc;n di, ci, li c&aacute;ch nhau bởi dấu c&aacute;ch, thể hiện độ d&agrave;i li (0 &lt;li &le; 1000) của đường một chiều thứ i nối từ n&uacute;t di đến ci. D&ograve;ng thứ j trong số k d&ograve;ng tiếp theo chứa ba số nguy&ecirc;n dương uj, vj v&agrave; qj (qj &le; 1000) được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch, đại diện cho đường hai chiều được đề xuất thứ j c&oacute; độ d&agrave;i qj nối n&uacute;t uj với vj.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi tập dữ liệu, h&atilde;y viết ra tr&ecirc;n một d&ograve;ng độ d&agrave;i nhỏ nhất c&oacute; thể của con đường ngắn nhất sau khi x&acirc;y dựng một con đường hai chiều đ&atilde; chọn từ danh s&aacute;ch đề xuất. Trong trường hợp kh&ocirc;ng tồn tại đường đi từ s đến t, ghi l&agrave; -1.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n4 5 3 1 4\n1 2 13\n2 3 19\n3 1 25\n3 4 17\n4 1 18\n1 3 23\n2 3 5\n2 4 25</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>35</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1c4673d5-622b-4e26-8878-7bde620389e6",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "TRAFFICN_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a7"
  },
  "memoryLimit": 2,
  "source": 10,
  "timeLimit": 2,
  "scores": 100,
  "slug": "tdprimes-printing-some-primes",
  "tags": [],
  "level": "EXPERT",
  "title": "In ra các số nguyên tố",
  "content": "<p>Bạn phải viết tất cả c&aacute;c số nguy&ecirc;n tố nhỏ hơn $10^{8}.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Kh&ocirc;ng c&oacute;</p>\n<h3>Định dạng đầu ra</h3>\n<p>Chỉ viết ra 1st, 101st, 201st, ... 1st mode 100.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>2\n547\n1229\n...\n99995257\n99996931\n99998953</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b17fad90-19fa-428d-bc60-2dc10f51fa85",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "TDPRIMES.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a8"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "que1-queue-rookie",
  "tags": [],
  "level": "EXPERT",
  "title": "Hàng đợi",
  "content": "<p class=\"text-center\">C&oacute; N người đang đứng trong một h&agrave;ng đợi. Bạn được cho biết chiều cao của từng người v&agrave; số lượng người cao hơn v&agrave; đứng trước người đ&oacute;. Bạn phải t&igrave;m ra vị tr&iacute; của từng người.</p>\n<div id=\"problem-body\">\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>D&ograve;ng đầu ti&ecirc;n chứa một số nguy&ecirc;n T duy nhất, số trường hợp thử nghiệm. Mỗi trường hợp bao gồm 3 d&ograve;ng. D&ograve;ng đầu ti&ecirc;n chứa một số nguy&ecirc;n N. D&ograve;ng thứ hai chứa N số nguy&ecirc;n đại diện cho chiều cao của N người. D&ograve;ng thứ ba chứa N số nguy&ecirc;n biểu thị số người cao hơn đứng trước anh ta.</p>\n<h3>Định dạng đầu ra</h3>\n<p>In ra một d&ograve;ng cho mỗi trường hợp thử nghiệm chứa chiều cao của N người theo thứ tự họ đang đứng.</p>\n<h3>Điều kiện</h3>\n<ol>\n<li>$0 &lt; T \\leq 100$</li>\n<li>$0 &lt; N \\leq 1000$</li>\n<li>Độ phức tạp về thời gian kỳ vọng l&agrave; $O(N^{2})$</li>\n</ol>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n5\n33 11 22 44 55\n0 2 1 1 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>33 22 11 55 44</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/322302fc-b89f-4493-9b51-c03e40f3e0dd",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "QUE1_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94a9"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "rent-rent-your-airplane-and-make-money",
  "tags": [],
  "level": "EXPERT",
  "title": "Thuê máy bay",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>\"ABEAS Corp.\" l&agrave; một c&ocirc;ng ty rất nhỏ sở hữu một chiếc m&aacute;y bay duy nhất. Kh&aacute;ch h&agrave;ng của ABEAS l&agrave; c&aacute;c c&ocirc;ng ty h&agrave;ng kh&ocirc;ng lớn thu&ecirc; m&aacute;y bay để đ&aacute;p ứng t&igrave;nh trạng vượt qu&aacute; c&ocirc;ng suất thường xuy&ecirc;n. Kh&aacute;ch h&agrave;ng gửi đơn đặt h&agrave;ng thu&ecirc; bao gồm khoảng thời gian v&agrave; gi&aacute; cả m&agrave; kh&aacute;ch h&agrave;ng sẵn s&agrave;ng trả để thu&ecirc; m&aacute;y bay trong khoảng thời gian nhất định. Đơn đặt h&agrave;ng của tất cả c&aacute;c kh&aacute;ch h&agrave;ng đ&atilde; được biết trước. Tất nhi&ecirc;n, kh&ocirc;ng phải tất cả c&aacute;c đơn đặt h&agrave;ng đều c&oacute; thể được đ&aacute;p ứng v&agrave; một số đơn đặt h&agrave;ng phải bị từ chối. Eugene LAWLER, Gi&aacute;m đốc Khoa học của ABEAS Corp mong muốn tối đa h&oacute;a lợi nhuận của c&ocirc;ng ty. Bạn l&agrave; nh&acirc;n vi&ecirc;n của c&ocirc;ng ty n&agrave;y v&agrave; được y&ecirc;u cầu t&iacute;nh to&aacute;n một giải ph&aacute;p tối ưu.</p>\n<div id=\"problem-body\">\n<h4>V&iacute; dụ</h4>\n<p>H&atilde;y xem x&eacute;t v&iacute; dụ trường hợp c&ocirc;ng ty c&oacute; 4 đơn đặt h&agrave;ng:</p>\n<ul>\n<li>Đơn đặt 1 (thời gian bắt đầu 0, khoảng thời gian 5, gi&aacute; cả 10)</li>\n<li>Đơn đặt 2 (thời gian bắt đầu 3, khoảng thời gian 7, gi&aacute; cả 8)</li>\n<li>Đơn đặt 3 (thời gian bắt đầu 5, khoảng thời gian 9, gi&aacute; cả 7)</li>\n<li>Đơn đặt 4 (thời gian bắt đầu 6, khoảng thời gian 9, gi&aacute; cả 8)</li>\n</ul>\n<p>Giải ph&aacute;p tối ưu bao gồm giảm đơn đặt 2 v&agrave; 3 v&agrave; thu được l&agrave; 10 + 8 = 18. Lưu &yacute; rằng giải ph&aacute;p bao gồm đơn đặt h&agrave;ng 1 v&agrave; 3 l&agrave; khả thi (m&aacute;y bay được thu&ecirc; kh&ocirc;ng bị gi&aacute;n đoạn từ thời điểm 0 đến thời điểm 14) nhưng kh&ocirc;ng tối ưu.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chứa một số T &le; 30 cho biết số lượng trường hợp thử nghiệm. D&ograve;ng đầu ti&ecirc;n của mỗi trường hợp kiểm thử chứa số lượng đơn đặt h&agrave;ng n (n &le; 10000). Trong n d&ograve;ng sau, c&aacute;c đơn đặt h&agrave;ng được đưa ra. Mỗi đơn h&agrave;ng được m&ocirc; tả bởi 3 gi&aacute; trị số nguy&ecirc;n: Thời gian bắt đầu của đơn h&agrave;ng st (0 &le; st &lt;1000000), khoảng thời gian d của đơn h&agrave;ng (0 &lt;d &lt;1000000) v&agrave; gi&aacute; cả p (0 &lt; p &lt;100000) m&agrave; kh&aacute;ch h&agrave;ng sẵn s&agrave;ng thanh to&aacute;n cho đơn đặt h&agrave;ng n&agrave;y.</p>\n<h3>Định dạng đầu ra</h3>\n<p align=\"justify\">Bạn được y&ecirc;u cầu t&iacute;nh to&aacute;n một giải ph&aacute;p tối ưu. Đối với mỗi trường hợp thử nghiệm, chương tr&igrave;nh của bạn phải ghi ra tổng gi&aacute; trị m&agrave; c&aacute;c h&atilde;ng h&agrave;ng kh&ocirc;ng đ&atilde; trả.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n4\n0 5 10\n3 7 14\n5 9 7\n6 9 8</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>18</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/92871da2-ee94-4c77-bafb-41c4604e5112",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "RENT_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94aa"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "samer08f-feynman",
  "tags": [],
  "level": "EXPERT",
  "title": "Bài toán câu đố của Feynman",
  "content": "<p>Richard Phillips Feynman l&agrave; một nh&agrave; vật l&yacute; người Mỹ nổi tiếng v&agrave; từng nhận giải Nobel về Vật l&yacute;. &Ocirc;ng l&agrave;m việc trong lĩnh vực vật l&yacute; l&yacute; thuyết v&agrave; cũng l&agrave; người đi ti&ecirc;n phong trong lĩnh vực m&aacute;y t&iacute;nh lượng tử. &Ocirc;ng đ&atilde; đến thăm Nam Mỹ trong mười th&aacute;ng, thuyết tr&igrave;nh v&agrave; tận hưởng cuộc sống ở v&ugrave;ng nhiệt đới. &Ocirc;ng cũng được biết đến với cuốn s&aacute;ch \"Surely You're Joking, Mr. Feynman!\", bao gồm một số cuộc phi&ecirc;u lưu b&ecirc;n dưới đường x&iacute;ch đạo.</p>\n<div id=\"problem-body\">\n<p>Đam m&ecirc; cả đời của &ocirc;ng l&agrave; giải v&agrave; l&agrave;m c&aacute;c c&acirc;u đố, kh&oacute;a v&agrave; mật m&atilde;. Gần đ&acirc;y, một l&atilde;o n&ocirc;ng ở Nam Mỹ, người đ&atilde; tiếp đ&oacute;n nh&agrave; vật l&yacute; trẻ n&agrave;y v&agrave;o năm 1949, đ&atilde; t&igrave;m thấy một số giấy tờ v&agrave; ghi ch&uacute; được cho l&agrave; của Feynman. Trong số c&aacute;c ghi ch&uacute; về điện từ học, c&oacute; một tờ giấy ăn nơi &ocirc;ng viết một c&acirc;u đố đơn giản: \"C&oacute; bao nhi&ecirc;u &ocirc; vu&ocirc;ng kh&aacute;c nhau trong một ma trận &ocirc; vu&ocirc;ng N&times;N?\".</p>\n<p>Trong c&ugrave;ng một chiếc khăn ăn, c&oacute; một h&igrave;nh vẽ được m&ocirc; phỏng lại b&ecirc;n dưới, cho thấy rằng, với N = 2, c&acirc;u trả lời l&agrave; 5.</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://www.spoj.com/content/disatoba:feynman.gif\" alt=\"subir imagenes\" border=\"0\" /></p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<ul>\n<li>Đầu v&agrave;o chứa một số trường hợp thử nghiệm. Mỗi trường hợp thử nghiệm bao gồm một d&ograve;ng, chỉ chứa một số nguy&ecirc;n N, đại diện cho số &ocirc; vu&ocirc;ng trong mỗi cạnh của ma trận (1 &le; N &le; 100).</li>\n<li>Phần cuối của đầu v&agrave;o được biểu thị bằng một d&ograve;ng chỉ chứa một số 0.</li>\n</ul>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp trong đầu v&agrave;o, chương tr&igrave;nh của bạn phải in ra một d&ograve;ng duy nhất, chứa số lượng &ocirc; vu&ocirc;ng kh&aacute;c nhau cho đầu v&agrave;o tương ứng.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n1\n8\n0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>5\n1\n204 </code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/8a76e36d-ae88-41b6-a001-d9643b368d6d",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "SAMER08F_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ab"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "sbank-sorting-bank-accounts",
  "tags": [],
  "level": "EXPERT",
  "title": "Sắp xếp các tài khoản ngân hàng",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>In one of the internet banks thousands of operations are being performed every day. Since certain customers do business more actively than others, some of the bank accounts occur many times in the list of operations. Your task is to sort the bank account numbers in ascending order. If an account appears twice or more in the list, write the number of repetitions just after the account number. The format of accounts is as follows: <strong>2</strong>&nbsp;control digits, an&nbsp;<strong>8</strong>-digit code of the bank,&nbsp;<strong>16</strong>&nbsp;digits identifying the owner (written in groups of four digits), for example (at the end of each line there is exactly one space):</p>\n<p>Tại một trong những ng&acirc;n h&agrave;ng internet, h&agrave;ng ng&agrave;n hoạt động đang được thực hiện mỗi ng&agrave;y. V&igrave; một số kh&aacute;ch h&agrave;ng kinh doanh t&iacute;ch cực hơn những kh&aacute;ch h&agrave;ng kh&aacute;c, một số t&agrave;i khoản ng&acirc;n h&agrave;ng xuất hiện nhiều lần trong danh s&aacute;ch hoạt động. Nhiệm vụ của bạn l&agrave; sắp xếp c&aacute;c số t&agrave;i khoản ng&acirc;n h&agrave;ng theo thứ tự tăng dần. Nếu một t&agrave;i khoản xuất hiện hai lần hoặc nhiều hơn trong danh s&aacute;ch, h&atilde;y ghi số lần lặp lại ngay sau số t&agrave;i khoản. Định dạng của c&aacute;c t&agrave;i khoản như sau: 2 chữ số kiểm so&aacute;t, một m&atilde; gồm 8 chữ số của ng&acirc;n h&agrave;ng, 16 chữ số x&aacute;c định chủ sở hữu (viết theo nh&oacute;m bốn chữ số), v&iacute; dụ (ở cuối mỗi d&ograve;ng c&oacute; đ&uacute;ng một khoảng trắng) :</p>\n<div id=\"problem-body\">\n<table align=\"center\">\n<tbody>\n<tr>\n<td bgcolor=\"navy\"><span style=\"color: yellow;\"><strong>30 10103538 2222 1233 6160 0142&nbsp;</strong></span></td>\n</tr>\n</tbody>\n</table>\n<p>C&aacute;c ng&acirc;n h&agrave;ng l&agrave; c&aacute;c tổ chức thời gian thực v&agrave; họ cần c&aacute;c giải ph&aacute;p NHANH CH&Oacute;NG. Nếu bạn cảm thấy m&igrave;nh c&oacute; thể đ&aacute;p ứng được thử th&aacute;ch trong một thời hạn rất nghi&ecirc;m ngặt, h&atilde;y tiếp tục! Một thuật to&aacute;n sắp xếp được thiết kế tốt c&oacute; khả năng th&agrave;nh c&ocirc;ng.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<ul>\n<li><em>Số lượng trường hợp thử nghiệm t</em> &lt;= <strong>5</strong></li>\n<li><em>Số lượng t&agrave;i khoản n</em> &lt;= <strong>100 000</strong></li>\n<li>Danh s&aacute;ch c&aacute;c t&agrave;i khoản</li>\n<li>D&ograve;ng trống rỗng</li>\n<li>C&aacute;c trường hợp thử nghiệm tiếp theo</li>\n</ul>\n<h3>Định dạng đầu ra</h3>\n<ul>\n<li>Danh s&aacute;ch t&agrave;i khoản được sắp xếp với số lượng t&agrave;i khoản lặp lại</li>\n<li>D&ograve;ng trống rỗng</li>\n<li>C&aacute;c kết quả kh&aacute;c</li>\n</ul>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n6\n03 10103538 2222 1233 6160 0142 \n03 10103538 2222 1233 6160 0141 \n30 10103538 2222 1233 6160 0141 \n30 10103538 2222 1233 6160 0142 \n30 10103538 2222 1233 6160 0141 \n30 10103538 2222 1233 6160 0142 \n\n5\n30 10103538 2222 1233 6160 0144 \n30 10103538 2222 1233 6160 0142 \n30 10103538 2222 1233 6160 0145 \n30 10103538 2222 1233 6160 0146 \n30 10103538 2222 1233 6160 0143  </code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>03 10103538 2222 1233 6160 0141 1\n03 10103538 2222 1233 6160 0142 1\n30 10103538 2222 1233 6160 0141 2\n30 10103538 2222 1233 6160 0142 2\n\n30 10103538 2222 1233 6160 0142 1\n30 10103538 2222 1233 6160 0143 1\n30 10103538 2222 1233 6160 0144 1\n30 10103538 2222 1233 6160 0145 1\n30 10103538 2222 1233 6160 0146 1</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/aec842ac-801a-4619-8c8e-db33880f8e93",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "SBANK_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ac"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 1,
  "slug": "test-4",
  "tags": [],
  "level": "BEGINNER",
  "title": "test",
  "content": "<p>abc</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a0ad6dc0-3e77-4309-a923-b1504e7f169a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ezyzip.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ad"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 1,
  "slug": "test2",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "test2",
  "content": "<p>abc</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3677dc6c-b236-44a1-b3e6-a9515e352e11",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ezyzip.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ae"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "arrays-ds",
  "tags": [],
  "level": "BEGINNER",
  "title": "Arrays - DS",
  "content": "<p>An array is a type of data structure that stores elements of the same type in a contiguous block of memory. In an array, $A$, of size $N$, each memory location has some unique index, $i$ (where $0 \\leq i&lt;N$ ), that can be referenced as $A[i]$ or $A_{i}$<br />Reverse an array of integers.<br /><strong>Note:</strong> If you've already solved our C++ domain's Arrays Introduction challenge, you may want to skip this.<br /><strong>Example</strong><br />$$<br />A=[1,2,3]<br />$$<br />Return $[3,2,1]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>reverseArray</em>&nbsp;in the editor below.</p>\n<p><em>reverseArray</em>&nbsp;has the following parameter(s):</p>\n<ul>\n<li><em>int A[n]</em>: the array to reverse</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[n]</em>: the reversed array</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $N$, the number of integers in $A$. The second line contains $N$ space-separated integers that make up $A$. Constraints<br />- $1 \\leq N \\leq 10^{3}$<br />- $1 \\leq A[i] \\leq 10^{4}$, where $A[i]$ is the $i^{\\text {th }}$ integer in $A$</p>\n<p><strong>Sample Input&nbsp;1</strong></p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/83410567-e367-483a-ac65-069df8048ec8\" alt=\"Screen Shot 2021-10-15 at 8\" /></p>\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;1</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>2 3 4 1</div>\n<pre><code></code></pre>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d31c5515-08b0-4b34-880b-a5c7c854d157",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94af"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "2d-array-ds",
  "tags": [],
  "level": "BEGINNER",
  "title": "2D Array - DS",
  "content": "<p>Given a $6 \\times 6$ 2D Array, arr:</p>\n<pre><code>1 1 1 0 0 0\n0 1 0 0 0 0\n1 1 1 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0</code></pre>\n<p>An hourglass in $A$ is a subset of values with indices falling in this pattern in arr's graphical representation:</p>\n<pre><code>a b c\n  d\ne f g</code></pre>\n<p>There are 16 hourglasses in $a r r$. An hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in $a r r$, then print the maximum hourglass sum. The array will always be $6 \\times 6$.<br /><strong>Example</strong><br />$\\operatorname{arr}=$</p>\n<pre><code>-9 -9 -9  1 1 1 \n 0 -9  0  4 3 2\n-9 -9 -9  1 2 3\n 0  0  8  6 6 0\n 0  0  0 -2 0 0\n 0  0  1  2 4 0</code></pre>\n<p>The 16<span id=\"MathJax-Element-10-Frame\" class=\"MathJax_SVG\"></span>&nbsp;hourglass sums are:</p>\n<pre><code>-63, -34, -9, 12, \n-10,   0, 28, 23, \n-27, -11, -2, 10, \n  9,  17, 25, 18</code></pre>\n<p>The highest hourglass sum is 28 from the hourglass beginning at row 1 , column 2 :</p>\n<pre><code>0 4 3\n  1\n8 6 6</code></pre>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Note:</strong>&nbsp;If you have already solved the Java domain's&nbsp;<em>Java 2D Array</em>&nbsp;challenge, you may wish to skip this challenge.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>hourglassSum</em>&nbsp;in the editor below.</p>\n<p>hourglassSum has the following parameter(s):</p>\n<ul>\n<li><em>int arr[6][6]</em>: an array of integers</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;the maximum hourglass sum</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>Each of the 6 lines of inputs $\\operatorname{arr}[i]$ contains 6 space-separated integers $\\operatorname{arr}[i][j]$.<br /><strong>Constraints</strong><br />- $-9 \\leq \\operatorname{arr}[i][j] \\leq 9$<br />- $0 \\leq i, j \\leq 5$<br /><strong>Output Format</strong><br />Print the largest (maximum) hourglass sum found in arr.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 1 1 0 0 0\n0 1 0 0 0 0\n1 1 1 0 0 0\n0 0 2 4 4 0\n0 0 0 2 0 0\n0 0 1 2 4 0\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>19\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>$arr$ contains the following hourglasses:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1534256743-35b846ad4a-hourglasssum.png\" alt=\"image\" /></p>\n<p>The hourglass with the maximum sum (19<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>) is:</p>\n<pre><code>2 4 4\n  2\n1 2 4</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/4dd798fc-6be1-4987-9ba1-86c3200540ab",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "dynamic-array",
  "tags": [],
  "level": "BEGINNER",
  "title": "Dynamic Array",
  "content": "<p>- Declare a 2-dimensional array, $a r r$, of $n$ empty arrays. All arrays are zero indexed.<br />- Declare an integer, lastAnswer, and initialize it to 0 .<br />- There are 2 types of queries, given as an array of strings for you to parse:<br />1. Query: $1 \\times y$<br />1. Let $i d x=((x \\oplus$ lastAnswer $) \\% n$ ).<br />2. Append the integer $y$ to $\\operatorname{arr}[i d x]$.<br />2. Query: $2 \\times y$<br />1. Let $i d x=((x \\oplus$ lastAnswer $) \\% n$ ).<br />2. Assign the value $\\operatorname{arr}[i d x][y \\%$ size $(\\operatorname{arr}[i d x])]$ to lastAnswer.<br />3. Store the new value of lastAnswer to an answers array.<br />Note: $\\oplus$ is the bitwise XOR operation, which corresponds to the $^{\\wedge}$ operator in most languages. Learn more about it on <a href=\"https://en.wikipedia.org/wiki/Exclusive_or\">Wikipedia</a>. $\\%$ is the modulo operator.<br />Finally, size(arr[idx]) is the number of elements in arr[idx]</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>dynamicArray</em>&nbsp;function below.</p>\n<p><em>dynamicArray</em>&nbsp;has the following parameters:<br />-&nbsp;<em>int n:</em> the number of empty arrays to initialize in $arr$<br />-&nbsp;<em>string queries[q]:</em>&nbsp;query strings that contain 3 space-separated integers</p>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[]:</em>&nbsp;the results of each type 2 query in the order they are presented</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space-separated integers, $n$, the size of $a r r$ to create, and $q$, the number of queries, respectively. Each of the $q$ subsequent lines contains a query string, queries $[i]$.<br />Constraints<br />- $1 \\leq n, q \\leq 10^{5}$<br />- $0 \\leq x, y \\leq 10^{9}$<br />- It is guaranteed that query type 2 will never query an empty array or index.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2 5\n1 0 5\n1 1 7\n1 0 3\n2 1 0\n2 1 1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>7\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><em>Initial Values:</em></p>\n<p>$n=2$<br />lastAnswer $=0$<br />$\\operatorname{arr}[0]=[]$<br />$\\operatorname{arr}[1]=[]$</p>\n<p>Query 0: Append 5 to $\\operatorname{arr}[((0 \\oplus 0) \\% 2)]=\\operatorname{arr}[0]$ lastAnswer $=0$<br />$$<br />\\operatorname{arr}[0]=[5]<br />$$<br />$$<br />\\operatorname{arr}[1]=[\\mathrm{l}]<br />$$</p>\n<p>Query 1: Append 7 to $\\operatorname{arr}[((1 \\oplus 0) \\% 2)]=\\operatorname{arr}[1]$.<br />$$<br />\\begin{aligned}<br />&amp;\\operatorname{arr}[0]=[5] \\\\<br />&amp;\\operatorname{arr}[1]=[7]<br />\\end{aligned}<br />$$<br />Query 2: Append 3 to $\\operatorname{arr}[((0 \\oplus 0) \\% 2)]=\\operatorname{arr}[0]$.</p>\n<p>lastAnswer $=0$<br />$\\operatorname{arr}[0]=[5,3]$<br />$\\operatorname{arr}[1]=[7]$</p>\n<p>Query 3: Assign the value at index 0 of $\\operatorname{arr}[((1 \\oplus 0) \\% 2)]=\\operatorname{arr}[1]$ to lastAnswer, print lastAnswer.</p>\n<p>lastAnswer $=7$<br />$\\operatorname{arr}[0]=[5,3]$<br />$\\operatorname{arr}[1]=[7]$</p>\n<pre><code>7</code></pre>\n<p>&nbsp;Query 4: Assign the value at index 1 of $\\operatorname{arr}[((1 \\oplus 7) \\% 2)]=\\operatorname{arr}[0]$ to lastAnswer, print lastAnswer.</p>\n<p>lastAnswer $=3$<br />$\\operatorname{arr}[0]=[5,3]$<br />$\\operatorname{arr}[1]=[7]$</p>\n<pre><code>3</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/4e9b5070-8609-41d0-891b-a607416f9d88",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "left-rotation",
  "tags": [],
  "level": "BEGINNER",
  "title": "Left Rotation",
  "content": "<p>A left rotation operation on an array of size $n$ shifts each of the array's elements 1 unit to the left. Given an integer, $d$, rotate the array that many steps left and return the result.<br /><strong>Example</strong><br />$$<br />\\begin{aligned}<br />&amp;d=2 \\\\<br />&amp;a r r=[1,2,3,4,5]<br />\\end{aligned}<br />$$<br />After 2 rotations, $a r r^{\\prime}=[3,4,5,1,2]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>rotateLeft</em>&nbsp;function in the editor below.</p>\n<p><em>rotateLeft</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int d:</em>&nbsp;the amount to rotate by</li>\n<li><em>int arr[n]:</em>&nbsp;the array to rotate</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[n]:</em>&nbsp;the rotated array</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space-separated integers that denote $n$, the number of integers, and $d$, the number of left rotations to perform.<br />The second line contains $n$ space-separated integers that describe $\\operatorname{arr}[]$.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $1 \\leq d \\leq n$<br />- $1 \\leq a[i] \\leq 10^{6}$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 4\n1 2 3 4 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 1 2 3 4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>To perform $d=4$ left rotations, the array undergoes the following sequence of changes:<br />$$<br />[1,2,3,4,5] \\rightarrow[2,3,4,5,1] \\rightarrow[3,4,5,1,2] \\rightarrow[4,5,1,2,3] \\rightarrow[5,1,2,3,4]<br />$$</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/8a95ad8c-7e81-4608-91f6-564dcca3c96d",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "sparse-arrays",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Sparse Arrays",
  "content": "<p>There is a collection of input strings and a collection of query strings. For each query string, determine how many times it occurs in the list of input strings. Return an array of the results.</p>\n<p><strong>Example</strong></p>\n<p>$\\begin{aligned} \\text { strings } &amp;=\\left[^{\\prime} a b^{\\prime},^{\\prime} a b^{\\prime}, a b c^{\\prime}\\right] \\\\ \\text { queries } &amp;=\\left[{ }^{\\prime} a b^{\\prime},^{\\prime} a b c^{\\prime},^{\\prime} b c^{\\prime}\\right] \\end{aligned}$<br />There are 2 instances of ' $a b^{\\prime}, 1$ of ' $a b c^{\\prime}$ and 0 of ' $b c^{\\prime} .$ For each query, add an element to the return array, results $=[2,1,0]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>matchingStrings</em>&nbsp;in the editor below. The function must return an array of integers representing the frequency of occurrence of each query string in&nbsp;<em>strings</em>.</p>\n<p>matchingStrings has the following parameters:</p>\n<ul>\n<li><em>string strings[n]</em>&nbsp;- an array of strings to search</li>\n<li><em>string queries[q]</em>&nbsp;- an array of query strings</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[q]:</em>&nbsp;an array of results for each query</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>&nbsp;</p>\n<p>The first line contains and integer $n$, the size of strings [] . Each of the next $n$ lines contains a string strings $[i]$. The next line contains $q$, the size of queries [] .</p>\n<p>Each of the next $q$ lines contains a string queries $[i]$.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 1000 \\\\<br />&amp;1 \\leq q \\leq 1000 \\\\<br />&amp;1 \\leq \\mid \\text { strings }[i]|,| \\text { queries }[i] \\mid \\leq 20<br />\\end{aligned}<br />$$</p>\n<p><strong>Sample Input&nbsp;1</strong></p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/2d580841-afb9-42a3-8131-8ce684380ad8\" alt=\"Screen Shot 2021-10-15 at 11\" /></p>\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;1</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>2<br />1<br />0</div>\n<pre><code></code></pre>\n</div>\n</div>\n<div class=\"challenge-sample-explanation-title\">\n<p><strong>Explanation&nbsp;1</strong></p>\n</div>\n<div class=\"challenge-explanation-body\">\n<div class=\"hackdown-content\">\n<p>Here, \"<em>aba</em>\" occurs twice, in the first and third string. The string \"<em>xzxb</em>\" occurs once in the fourth string, and \"<em>ab</em>\" does not occur at all.</p>\n<p><strong>Sample Input&nbsp;2</strong></p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/47b21fac-df06-49da-90f1-c147e9afbcec\" alt=\"Screen Shot 2021-10-15 at 11\" /></p>\n<div class=\"visual-test-case\">\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;2</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>1<br />0<br />1</div>\n<pre><code></code></pre>\n</div>\n</div>\n<div class=\"challenge-sample-explanation-title\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Sample Input 3</strong></div>\n<div class=\"challenge-sample-explanation-title\"><img style=\"width: 100%;\" src=\"../../public_files/0f25c8cf-f660-490b-b82c-88423a6bac98\" alt=\"Screen Shot 2021-10-16 at 12\" /></div>\n<div class=\"challenge-sample-explanation-title\">\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;3</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>1<br />3<br />4<br />3<br />2</div>\n<pre><code></code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/35c52c05-9140-4643-94dd-25b0ee8844b6",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "array-manipulation",
  "tags": [],
  "level": "EXPERT",
  "title": "Array Manipulation",
  "content": "<p>Starting with a 1-indexed array of zeros and a list of operations, for each operation add a value to each the array element between two given indices, inclusive. Once all operations have been performed, return the maximum value in the array.</p>\n<p><strong>Example</strong></p>\n<p>$n=10$<br />queries $=[[1,5,3],[4,8,7],[6,9,1]$</p>\n<p>Queries are interpreted as follows:</p>\n<div class=\"highlight\">\n<pre>    <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span>\n    <span class=\"mi\">1</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span>\n    <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span>\n    <span class=\"mi\">6</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span></pre>\n</div>\n<p>Add the values of $k$ between the indices $a$ and $b$ inclusive:</p>\n<div class=\"highlight\">\n<pre><span class=\"n\">index</span><span class=\"o\">-&gt;</span>\t <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>  <span class=\"mi\">4</span>  <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span> <span class=\"mi\">8</span> <span class=\"mi\">9</span> <span class=\"mi\">10</span>\n\t<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n</div>\n<p>The largest value is 10<span id=\"MathJax-Element-6-Frame\" class=\"MathJax_SVG\"></span>&nbsp;after all operations are performed.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>arrayManipulation</em>&nbsp;in the editor below.</p>\n<p>arrayManipulation has the following parameters:</p>\n<ul>\n<li><em>int n</em>&nbsp;- the number of elements in the array</li>\n<li><em>int queries[q][3]</em>&nbsp;- a two dimensional array of queries where each&nbsp;<em>queries[i]</em>&nbsp;contains three integers,&nbsp;<em>a</em>,&nbsp;<em>b</em>, and&nbsp;<em>k</em>.</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int</em>&nbsp;- the maximum value in the resultant array</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space-separated integers $n$ and $m$, the size of the array and the number of operations. Each of the next $m$ lines contains three space-separated integers $a, b$ and $k$, the left index, right index and summand. Constraints<br />- $3 \\leq n \\leq 10^{7}$<br />- $1 \\leq m \\leq 2 * 10^{5}$<br />- $1 \\leq a \\leq b \\leq n$<br />- $0 \\leq k \\leq 10^{9}$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 3\n1 2 100\n2 5 100\n3 4 100\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>200\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>After the first update the list is&nbsp;<code>100 100 0 0 0</code>.<br />After the second update list is&nbsp;<code>100 200 100 100 100</code>.<br />After the third update list is&nbsp;<code>100 200 200 200 100</code>.</p>\n<p>The maximum value is 200<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/32a5d5e4-45e1-438c-adbf-87ea4a4dd195",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "print-the-elements-of-a-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Print the Elements of a Linked List",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>This challenge is part of a&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;tutorial track and is accompanied by a&nbsp;<a href=\"http://www.youtube.com/embed/vcQIFT79_50?theme=light\">video lesson</a>.</p>\n<hr />\n<p>This is an to practice traversing a&nbsp;<em>linked list</em>. Given a pointer to the&nbsp;<em>head</em> node of a linked list, print each node's $data$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;element, one per line. If the head pointer is null (indicating the list is empty), there is nothing to print.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>printLinkedList</em>&nbsp;function in the editor below.</p>\n<p><em>printLinkedList</em>&nbsp;has the following parameter(s):</p>\n<ul>\n<li><em>SinglyLinkedListNode head:</em>&nbsp;a reference to the head of the list</li>\n</ul>\n<p><strong>Print</strong></p>\n<ul>\n<li>For each node, print its $data$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;value on a new line (console.log in Javascript).</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line of input contains $n$, the number of elements in the linked list.<br />The next $n$ lines contain one element each, the data values for each node.<br />Note: Do not read any input from stdin/console. Complete the printLinked List function in the editor below.<br />Constraints<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq$ list $[i] \\leq 1000$, where list $[i]$ is the $i^{\\text {th }}$ element of the linked list.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n16\n13\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>16\n13\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>There are two elements in the linked list. They are represented as 16 -&gt; 13 -&gt; NULL. So, the printLinkedList function should print 16 and 13 each on a new line.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/aaa041e7-1943-478e-8887-002d868ac4bf",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "insert-a-node-at-the-tail-of-a-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Insert a Node at the Tail of a Linked List",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.</sub></p>\n<p>You are given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer. Insert this node at the tail of the linked list and return the head node of the linked list formed after inserting this new node. The given head pointer may be null, meaning that the initial list is empty.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>insertNodeAtTail</em>&nbsp;function in the editor below.</p>\n<p><em>insertNodeAtTail</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;a reference to the head of a list</li>\n<li><em>int data:</em>&nbsp;the data value for the node to insert</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>SinglyLinkedListNode pointer:</em>&nbsp;reference to the head of the modified linked list</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $n$, the number of elements in the linked list. The next $n$ lines contain an integer each, the value that needs to be inserted at tail. Constraints<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq$ list $_{i} \\leq 1000$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p>STDIN Function ----- -------- 5 size of linked list n = 5 141 linked list data values 141..474 302 164 530 474</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>141\n302\n164\n530\n474\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>First the linked list is NULL. After inserting 141, the list is 141 -&gt; NULL.<br />After inserting 302, the list is 141 -&gt; 302 -&gt; NULL.<br />After inserting 164, the list is 141 -&gt; 302 -&gt; 164 -&gt; NULL.<br />After inserting 530, the list is 141 -&gt; 302 -&gt; 164 -&gt; 530 -&gt; NULL. After inserting 474, the list is 141 -&gt; 302 -&gt; 164 -&gt; 530 -&gt; 474 -&gt; NULL, which is the final list.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/01675786-8994-473a-b188-04ec142b5baa",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "insert-a-node-at-the-head-of-a-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Insert a node at the head of a linked list",
  "content": "<p>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.</p>\n<p>Given a pointer to the head of a linked list, insert a new node before the head. The next value in the new node should point to head and the data value should be replaced with a given value. Return a reference to the new head of the list. The head pointer given may be null meaning that the initial list is empty.<br /><strong>Function Description</strong><br />Complete the function insertNodeAtHead in the editor below.<br />insertNodeAtHead has the following parameter(s):<br />- SinglyLinkedListNode llist: a reference to the head of a list<br />- data: the value to insert in the data field of the new node</p>\n<p><strong>Input Format</strong><br />The first line contains an integer $n$, the number of elements to be inserted at the head of the list. The next $n$ lines contain an integer each, the elements to be inserted, one per function call.<br /><strong>Constraints</strong><br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n383\n484\n392\n975\n321\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>321\n975\n392\n484\n383\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Intially the list in NULL. After inserting 383, the list is 383 -&gt; NULL.<br />After inserting 484, the list is 484 -&gt; 383 -&gt; NULL.<br />After inserting 392, the list is 392 -&gt; 484 -&gt; 383 -&gt; NULL.<br />After inserting 975, the list is 975 -&gt; 392 -&gt; 484 -&gt; 383 -&gt; NULL.<br />After inserting 321, the list is 321 -&gt; 975 -&gt; 392 -&gt; 484 -&gt; 383 -&gt; NULL.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/6f5ebe00-5d47-42d9-99a5-d310b253ef04",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "insert-a-node-at-a-specific-position-in-a-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Insert a node at a specific position in a linked list",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.</sub></p>\n<p>Given the pointer to the head node of a linked list and an integer to insert at a certain position, create a new node with the given integer as its $data$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;attribute, insert this node at the desired position and return the head node.</p>\n<p>A position of 0 indicates head, a position of 1 indicates one node away from the head and so on. The head pointer given may be null meaning that the initial list is empty.</p>\n<p>Example<br />head refers to the first node in the list $1 \\rightarrow 2 \\rightarrow 3$<br />data $=4$<br />position $=2$<br />Insert a node at position 2 with $d a t a=4$. The new list is $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 3$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong>&nbsp;Complete the function&nbsp;<em>insertNodeAtPosition</em>&nbsp;in the editor below. It must return a reference to the head node of your finished list.</p>\n<p>insertNodeAtPosition has the following parameters:</p>\n<ul>\n<li><em>head</em>: a SinglyLinkedListNode pointer to the head of the list</li>\n<li><em>data</em>: an integer value to insert as data in your new node</li>\n<li><em>position</em>: an integer position to insert the new node, zero based indexing</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>SinglyLinkedListNode pointer:</em>&nbsp;a reference to the head of the revised list</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">The first line contains an integer $n$, the number of elements in the linked list. Each of the next $n$ lines contains an integer SinglyLinkedListNode[i].data.<br />The next line contains an integer data, the data of the node that is to be inserted. The last line contains an integer position.</div>\n<div class=\"hackdown-content\"><strong>Constraints</strong><br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq$ SinglyLinkedListNode $[i] .$ data $\\leq 1000$, where SinglyLinkedListNode $[i]$ is the $i^{t h}$ element of the linked list.<br />- $0 \\leq$ position $\\leq n$</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n16\n13\n7\n1\n2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>16 13 1 7\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The initial linked list is $16 \\rightarrow 13 \\rightarrow 7$. Insert 1 at the position 2 which currently has 7 in it. The updated linked list is $16 \\rightarrow 13 \\rightarrow 1 \\rightarrow 7$</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/dd88a402-66a9-4a73-82cb-73d1ac1e7aa6",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "delete-a-node",
  "tags": [],
  "level": "BEGINNER",
  "title": "Delete a Node",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.</sub></p>\n<p>Delete the node at a given position in a linked list and return a reference to the head node. The head is at position 0. The list may be empty after you delete the node. In that case, return a null value.</p>\n<p><strong>Example</strong></p>\n<p>llist $=0 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3$<br />position $=2$<br />After removing the node at position 2, llist $^{\\prime}=0 \\rightarrow 1 \\rightarrow 3$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>deleteNode</em>&nbsp;function in the editor below.</p>\n<p><em>deleteNode</em>&nbsp;has the following parameters:<br />-&nbsp;<em>SinglyLinkedListNode pointer llist:</em>&nbsp;a reference to the head node in the list<br />-&nbsp;<em>int position:</em>&nbsp;the position of the node to remove</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>SinglyLinkedListNode pointer:</em>&nbsp;a reference to the head of the modified list</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line of input contains an integer $n$, the number of elements in the linked list. Each of the next $n$ lines contains an integer, the node data values in order. The last line contains an integer, position, the position of the node to delete.<br />Constraints<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq$ list $[i] \\leq 1000$, where list $[i]$ is the $i^{\\text {th }}$ element of the linked list.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>8\n20\n6\n2\n19\n7\n4\n15\n9\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>20 6 2 7 4 15 9\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The original list is $20 \\rightarrow 6 \\rightarrow 2 \\rightarrow 19 \\rightarrow 7 \\rightarrow 4 \\rightarrow 15 \\rightarrow 9$. After deleting the node at position 3 , the list is $20 \\rightarrow 6 \\rightarrow 2 \\rightarrow 7 \\rightarrow 4 \\rightarrow 15 \\rightarrow 9$</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5f2c0c50-c901-474f-8ca5-7155ad0005f8",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94b9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "print-in-reverse",
  "tags": [],
  "level": "BEGINNER",
  "title": "Print in Reverse",
  "content": "<p>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.<br />Given a pointer to the head of a singly-linked list, print each data value from the reversed list. If the given list is empty, do not print anything.<br />Example<br />head* refers to the linked list with data values $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow N U L L$</p>\n<p>Print the following:<br /><code>3<br />2<br />1<br /></code></p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>reversePrint</em>&nbsp;function in the editor below.</p>\n<p><em>reversePrint</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;a reference to the head of the list</li>\n</ul>\n<p><strong>Prints</strong><br />The data values of each node in the reversed list.<br /><strong>Input Format</strong><br />The first line of input contains $\\boldsymbol{t}$, the number of test cases.<br />The input of each test case is as follows:<br />- The first line contains an integer $n$, the number of elements in the list.<br />- Each of the next $n$ lines contains a data element for a list node.<br /><strong>Constraints</strong><br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$, where list $[i]$ is the $i^{t h}$ element in the list.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n5\n16\n12\n4\n2\n5\n3\n7\n3\n9\n5\n5\n1\n18\n3\n13\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n2\n4\n12\n16\n9\n3\n7\n13\n3\n18\n1\n5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>There are three test cases. There are no blank lines between test case output.</p>\n<p>The first linked list has 5 elements: $16 \\rightarrow 12 \\rightarrow 4 \\rightarrow 2 \\rightarrow 5$. Printing this in reverse order produces:<br />5<br />2<br />4<br />12<br />16<br />The second linked list has 3 elements: $7 \\rightarrow 3 \\rightarrow 9 \\rightarrow N U L L$. Printing this in reverse order produces:<br />9<br />3<br />7<br />The third linked list has 5 elements: $5 \\rightarrow 1 \\rightarrow 18 \\rightarrow 3 \\rightarrow 13 \\rightarrow N U L L$. Printing this in reverse order produces:<br />13<br />3<br />18<br />1<br />5</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/06fa1ccc-0d71-4bef-9f2c-8d994d2a83d9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ba"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "reverse-a-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Reverse a linked list",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a>&nbsp;and is accompanied by a video lesson.</sub></p>\n<p>Given the pointer to the head node of a linked list, change the&nbsp;<code>next</code>&nbsp;pointers of the nodes so that their order is reversed. The head pointer given may be null meaning that the initial list is empty.</p>\n<p><strong>Example</strong><br />head references the list $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow N U L L$<br />Manipulate the next pointers of each node in place and return head, now referencing the head of the list $3 \\rightarrow 2 \\rightarrow 1 \\rightarrow N U L L$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>reverse</em>&nbsp;function in the editor below.</p>\n<p><em>reverse</em>&nbsp;has the following parameter:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;a reference to the head of a list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>SinglyLinkedListNode pointer:</em>&nbsp;a reference to the head of the reversed list</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $\\boldsymbol{t}$, the number of test cases.<br />Each test case has the following format:<br />The first line contains an integer $n$, the number of elements in the linked list.<br />Each of the next $n$ lines contains an integer, the data values of the elements in the linked list.<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$, where list $[i]$ is the $i^{t h}$ element in the list.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n5\n1\n2\n3\n4\n5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 4 3 2 1 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The initial linked list is: $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 5 \\rightarrow N U L L$.<br />The reversed linked list is: $5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1 \\rightarrow N U L L$.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/2e558dd0-7703-46d3-b6bd-e828ca694230",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94bb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "compare-two-linked-lists",
  "tags": [],
  "level": "BEGINNER",
  "title": "Compare two linked lists",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n<p>You&rsquo;re given the pointer to the head nodes of two linked lists. Compare the data in the nodes of the linked lists to check if they are equal. If all data attributes are equal and the lists are the same length, return 1<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>. Otherwise, return 0<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</p>\n<p>Example<br />$$<br />\\begin{aligned}<br />l l i s t 1 &amp;=1 \\rightarrow 2 \\rightarrow 3 \\rightarrow N U L L \\\\<br />l l i s t 2 &amp;=1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow N U L L<br />\\end{aligned}<br />$$<br />The two lists have equal data attributes for the first 3 nodes. llist 2 is longer, though, so the lists are not equal. Return 0 .</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>compare_lists</em>&nbsp;function in the editor below.</p>\n<p><em>compare_lists</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode llist1:</em>&nbsp;a reference to the head of a list</li>\n<li><em>SinglyLinkedListNode llist2:</em>&nbsp;a reference to the head of a list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;return 1 if the lists are equal, or 0 otherwise</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $\\boldsymbol{t}$, the number of test cases.<br />Each of the test cases has the following format:<br />The first line contains an integer $n$, the number of nodes in the first linked list. Each of the next $n$ lines contains an integer, each a value for a data attribute. The next line contains an integer $m$, the number of nodes in the second linked list. Each of the next $m$ lines contains an integer, each a value for a data attribute.<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n, m \\leq 1000$<br />- $1 \\leq$ llist $1[i]$, llist $2[i] \\leq 1000$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Compare the two linked lists and&nbsp;<code>return</code>&nbsp;1 if the lists are equal. Otherwise,&nbsp;<code>return</code>&nbsp;0. Do NOT print anything to stdout/console.</p>\n<p>The output is handled by the code in the editor and it is as follows:</p>\n<p>For each test case, in a new line, print 1<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> if the two lists are equal, else print 0<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n2\n1\n2\n1\n1\n2\n1\n2\n2\n1\n2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>0\n1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>There are $t=2$&nbsp;test cases, each with a pair of linked lists.</p>\n<ul>\n<li>\n<p>In the first case, linked lists are: 1 -&gt; 2 -&gt; NULL and 1 -&gt; NULL</p>\n</li>\n<li>\n<p>In the second case, linked lists are: 1 -&gt; 2 -&gt; NULL and 1 -&gt; 2 -&gt; NULL</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/eee7034c-1423-4f7d-9fdd-3b800ea774ee",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94bc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "merge-two-sorted-linked-lists",
  "tags": [],
  "level": "BEGINNER",
  "title": "Merge two sorted linked lists",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n<p>Given pointers to the heads of two sorted linked lists, merge them into a single, sorted linked list. Either head pointer may be null meaning that the corresponding list is empty.</p>\n<p><strong>Example</strong><br />head $A$ refers to $1 \\rightarrow 3 \\rightarrow 7 \\rightarrow N U L L$<br />headB refers to $1 \\rightarrow 2 \\rightarrow N U L L$<br />The new list is $1 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 7 \\rightarrow N U L L$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>mergeLists</em>&nbsp;function in the editor below.</p>\n<p><em>mergeLists</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer headA:</em>&nbsp;a reference to the head of a list</li>\n<li><em>SinglyLinkedListNode pointer headB:</em>&nbsp;a reference to the head of a list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>SinglyLinkedListNode pointer:</em>&nbsp;a reference to the head of the merged list</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">The first line contains an integer $t$, the number of test cases.<br />The format for each test case is as follows:<br />The first line contains an integer $n$, the length of the first linked list. The next $n$ lines contain an integer each, the elements of the linked list. The next line contains an integer $m$, the length of the second linked list. The next $m$ lines contain an integer each, the elements of the second linked list,<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n, m \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$, where list $[i]$ is the $i^{\\text {th }}$ element of the list.</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n3\n1\n2\n3\n2\n3\n4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 2 3 3 4 </code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"hackdown-content\"><strong>Explanation</strong><br />The first linked list is: $1 \\rightarrow 3 \\rightarrow 7 \\rightarrow N U L L$<br />The second linked list is: $3 \\rightarrow 4 \\rightarrow N U L L$<br />Hence, the merged linked list is: $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 3 \\rightarrow 4 \\rightarrow N U L L$</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/21443e9b-ee6d-4f48-8b52-35f6dc1cd4ae",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94bd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "get-node-value",
  "tags": [],
  "level": "BEGINNER",
  "title": "Get Node Value",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n<p>Given a pointer to the head of a linked list and a specific position, determine the data value at that position. Count backwards from the tail node. The tail is at postion 0, its parent is at 1 and so on.</p>\n<p><strong>Example</strong><br />head refers to $3 \\rightarrow 2 \\rightarrow 1 \\rightarrow 0 \\rightarrow N U L L$<br />positionFromTail $=2$<br />Each of the data values matches its distance from the tail. The value 2 is at the desired position.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>getNode</em>&nbsp;function in the editor below.</p>\n<p><em>getNode</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;refers to the head of the list</li>\n<li><em>int positionFromTail:</em>&nbsp;the item to retrieve</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;the value at the desired position</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $\\boldsymbol{t}$, the number of test cases.<br />Each test case has the following format:<br />The first line contains an integer $n$, the number of elements in the linked list.<br />The next $n$ lines contains an integer, the data value for an element of the linked list.<br />The last line contains an integer positionFromTail, the position from the tail to retrieve the value of.<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n, m \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$, where list $[i]$ is the $i^{\\text {th }}$ element of the linked list.<br />- $0 \\leq$ positionFromTail $&lt;n$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n1\n1\n0\n3\n3\n2\n1\n2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In the first case, there is one element in linked list with a value of 1. The last (only) element contains 1.</p>\n<p>In the second case, the list is $3 \\rightarrow 2 \\rightarrow 1 \\rightarrow N U L L$. The element with position of 2 from tail contains $3 .$</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b33cdef4-406f-4b5a-8c2f-a25a8ebf84c4",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94be"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "delete-duplicate-value-nodes-from-a-sorted-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Delete duplicate-value nodes from a sorted linked list",
  "content": "<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n<p>You are given the pointer to the head node of a sorted linked list, where the data in the nodes is in ascending order. Delete nodes and return a sorted list with each distinct value in the original list. The given head pointer may be null indicating that the list is empty.</p>\n<p><strong>Example</strong></p>\n<p>head refers to the first node in the list $1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 3 \\rightarrow 3 \\rightarrow 3 \\rightarrow 3 \\rightarrow N U L L$<br />Remove 1 of the 2 data values and return head pointing to the revised list $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow N U L L$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>removeDuplicates</em>&nbsp;function in the editor below.</p>\n<p><em>removeDuplicates</em>&nbsp;has the following parameter:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;a reference to the head of the list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>SinglyLinkedListNode pointer:</em>&nbsp;a reference to the head of the revised list</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">The first line contains an integer $t$, the number of test cases.<br />The format for each test case is as follows:<br />The first line contains an integer $n$, the number of elements in the linked list.<br />Each of the next $n$ lines contains an integer, the data value for each of the elements of the linked list.<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq \\operatorname{list}[i] \\leq 1000$</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>STDIN   Function\n-----   --------\n1       t = 1\n5       n = 5\n1       data values = 1, 2, 2, 3, 4\n2\n2\n3\n4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 2 3 4 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The initial linked list is: $1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow N U L L$. The final linked list is: $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow N U L L$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f24ea346-6263-411c-a9db-cc637caea413",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94bf"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "cycle-detection",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Cycle Detection",
  "content": "<p>A linked list is said to contain a cycle if any node is visited more than once while traversing the list. Given a pointer to the head of a linked list, determine if it contains a cycle. If it does, return 1 . Otherwise, return $0 .$<br /><strong>Example</strong><br />head refers to the list of nodes $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow N U L L$<br />The numbers shown are the node numbers, not their data values. There is no cycle in this list so return 0 .<br />head refers to the list of nodes $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 1 \\rightarrow N U L L$<br />There is a cycle where node 3 points back to node 1, so return 1 .</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>has_cycle</em>&nbsp;function in the editor below.</p>\n<p>It has the following parameter:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head:</em>&nbsp;a reference to the head of the list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<p>- int: 1 if there is a cycle or 0 if there is not</p>\n<p>Note: If the list is empty, head will be null.</p>\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The code stub reads from stdin and passes the appropriate argument to your function. The custom test cases format will not be described for this question due to its complexity. Expand the section for the main function and review the code if you would like to figure out how to create a custom case.</p>\n<p><strong>Constraints</strong><br />- $0 \\leq$ list size $\\leq 1000$</p>\n<section class=\"problem-statement split\">\n<div class=\"ui-tabs-wrap\">\n<div id=\"tab-2-content-undefined\" class=\"tab-list-content\" tabindex=\"0\" role=\"tabpanel\" aria-labelledby=\"tab-2-item-undefined\">\n<div class=\"theme-m hr_tour-problem-statement problem-statement have-external-links\">\n<div class=\"content-text challenge-text mlB hackdown-container theme-m\">\n<div class=\"challenge-body-html\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p>References to each of the following linked lists are passed as arguments to your function:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/1163/1463778594-900a0ae522-inputs.png\" alt=\"Sample Inputs\" /></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>0\n1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<ol>\n<li>The first list has no cycle, so return 0<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</li>\n<li>The second list has a cycle, so return 1<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</section>\n<section class=\"code-editor-section split\">\n<div>\n<div>\n<div class=\"hr-monaco-editor-wrapper\">\n<div class=\"hr-monaco-editor-with-input\">\n<div>\n<div class=\"hr-monaco-editor-with-statusbar\">\n<div class=\"hr-monaco-editor\">\n<div class=\"editor-toolbar\">\n<div class=\"toolbar-right\">\n<div class=\"toolbar-custom-items\">\n<div class=\"theme-change-wrapper\">&nbsp;</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</section>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/dad76a1e-4df6-41de-ad9d-dbea426e0b73",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "find-merge-point-of-two-lists",
  "tags": [],
  "level": "BEGINNER",
  "title": "Find Merge Point of Two Lists",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></p>\n<hr />\n<p>Given pointers to the head nodes of 2<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> linked lists that merge together at some point, find the node where the two lists merge. The merge point is where both lists point to the same node, i.e. they reference the same memory location. It is guaranteed that the two head nodes will be different, and neither will be NULL. If the lists share a common node, return that node's $data$&nbsp;value.</p>\n<p><strong>Note:</strong>&nbsp;After the merge point, both lists will share the same node pointers.</p>\n<p><strong>Example</strong></p>\n<p>In the diagram below, the two lists converge at Node&nbsp;<code>x</code>:</p>\n<pre><code>[List #1] a---&gt;b---&gt;c\n                     \\\n                      x---&gt;y---&gt;z---&gt;NULL\n                     /\n     [List #2] p---&gt;q\n</code></pre>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>findMergeNode</em>&nbsp;function in the editor below.</p>\n<p><em>findMergeNode</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>SinglyLinkedListNode pointer head1:</em>&nbsp;a reference to the head of the first list</li>\n<li><em>SinglyLinkedListNode pointer head2:</em>&nbsp;a reference to the head of the second list</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;the $data$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;value of the node where the lists merge</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p><em>Do not read any input from stdin/console.</em></p>\n<p><em>The first line contains an integer $\\boldsymbol{t}$, the number of test cases.<br />Each of the test cases is in the following format:<br />The first line contains an integer, index, the node number where the merge will occur.<br />The next line contains an integer, list $1_{c}$ ount that is the number of nodes in the first list.<br />Each of the following list $1_{c}$ ount lines contains a data value for a node. The next line contains an integer, list $2_{c}$ ount that is the number of nodes in the second list.<br />Each of the following list $2_{c}$ ount lines contains a data value for a node.<br />Constraints<br />The lists will merge.<br />head 1, head $2 \\neq$ null.<br />head $1 \\neq$ head2 .</em></p>\n<p><em><strong>Sample Input</strong><br />The diagrams below are graphical representations of the lists that input nodes head 1 and head 2 are connected to.</em></p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p><strong>Test Case 0</strong></p>\n<pre><code> 1\n  \\\n   2---&gt;3---&gt;NULL\n  /\n 1\n</code></pre>\n<p><strong>Test Case 1</strong></p>\n<pre><code>1---&gt;2\n      \\\n       3---&gt;Null\n      /\n     1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><em>Test Case 0:</em> As demonstrated in the diagram above, the merge node's data field contains the integer 2<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.<br /><em>Test Case 1:</em> As demonstrated in the diagram above, the merge node's data field contains the integer 3<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/525a4284-3ff0-4063-b58f-3e96d25b9311",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "inserting-a-node-into-a-sorted-doubly-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Inserting a Node Into a Sorted Doubly Linked List",
  "content": "<p>Given a reference to the head of a doubly-linked list and an integer, data, create a new DoublyLinkedListNode object having data value data and insert it at the proper location to maintain the sort.<br /><strong>Example</strong><br />head refers to the list $1 \\leftrightarrow 2 \\leftrightarrow 4 \\rightarrow N U L L$ data $=3$<br />Return a reference to the new list: $1 \\leftrightarrow 2 \\leftrightarrow 3 \\leftrightarrow 4 \\rightarrow N U L L$.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>sortedInsert</em>&nbsp;function in the editor below.</p>\n<p>sortedInsert has two parameters:</p>\n<ul>\n<li>\n<p><em>DoublyLinkedListNode pointer head</em>: a reference to the head of a doubly-linked list</p>\n</li>\n<li>\n<p><em>int data</em>: An integer denoting the value of the $data$<span id=\"MathJax-Element-7-Frame\" class=\"MathJax_SVG\"></span>&nbsp;field for the&nbsp;<em>DoublyLinkedListNode</em>&nbsp;you must insert into the list.</p>\n</li>\n</ul>\n<p><strong>Returns</strong><br />- DoublyLinkedListNode pointer: a reference to the head of the list<br />Note: Recall that an empty list (i.e., where head $=\\mathrm{NULL}$ ) and a list with one element are sorted lists.<br /><strong>Input Format</strong><br />The first line contains an integer $t$, the number of test cases.<br />Each of the test case is in the following format:<br />- The first line contains an integer $n$, the number of elements in the linked list.<br />- Each of the next $n$ lines contains an integer, the data for each node of the linked list.<br />- The last line contains an integer, data, which needs to be inserted into the sorted doubly-linked list.<br /><strong>Constraints</strong><br />- $1 \\leq t \\leq 10$<br />- $1 \\leq n \\leq 1000$<br />- $1 \\leq$ DoublyLinkedListNode. data $\\leq 1000$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>STDIN   Function\n-----   --------\n1       t = 1\n4       n = 4\n1       node data values = 1, 3, 4, 10\n3\n4\n10\n5       data = 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 3 4 5 10\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">The initial doubly linked list is: $1 \\leftrightarrow 3 \\leftrightarrow 4 \\leftrightarrow 10 \\rightarrow N U L L$.<br />The doubly linked list after insertion is: $1 \\leftrightarrow 3 \\leftrightarrow 4 \\leftrightarrow 5 \\leftrightarrow 10 \\rightarrow N U L L$</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/abcb2d97-050f-4c5d-80f3-63da3eb97578",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "reverse-a-doubly-linked-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Reverse a doubly linked list",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><sub>This challenge is part of a tutorial track by&nbsp;<a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n<p>Given the pointer to the head node of a doubly linked list, reverse the order of the nodes in place. That is, change the&nbsp;<em>next</em>&nbsp;and&nbsp;<em>prev</em>&nbsp;pointers of the nodes so that the direction of the list is reversed. Return a reference to the head node of the reversed list.</p>\n<p><strong>Note:</strong>&nbsp;The head node might be NULL to indicate that the list is empty.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>reverse</em>&nbsp;function in the editor below.</p>\n<p>reverse has the following parameter(s):</p>\n<ul>\n<li><em>DoublyLinkedListNode head</em>: a reference to the head of a DoublyLinkedList</li>\n</ul>\n<p>Returns<br />-&nbsp;<em>DoublyLinkedListNode</em>: a reference to the head of the reversed list</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $t$, the number of test cases.<br />Each test case is of the following format:<br />- The first line contains an integer $n$, the number of elements in the linked list.<br />- The next $n$ lines contain an integer each denoting an element of the linked list.<br />Constraints<br />- $1 \\leq t \\leq 10$<br />- $0 \\leq n \\leq 1000$<br />- $0 \\leq$ DoublyLinkedListNode. data $\\leq 1000$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Return a reference to the head of your reversed list. The provided code will print the reverse array as a one line of space-separated integers for each test case.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n4\n1\n2\n3\n4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>4 3 2 1 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">The initial doubly linked list is: $1 \\leftrightarrow 2 \\leftrightarrow 3 \\leftrightarrow 4 \\rightarrow N U L L$ The reversed doubly linked list is: $4 \\leftrightarrow 3 \\leftrightarrow 2 \\leftrightarrow 1 \\rightarrow N U L L$</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1baa23bc-a29f-4e63-a543-4e799044578f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "tree-preorder-traversal",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree: Preorder Traversal",
  "content": "<p>Complete the preOrder function in the editor below, which has 1 parameter: a pointer to the root of a binary tree. It must print the values in the tree's preorder traversal as a single line of space-separated values.<br />Input Format<br />Our test code passes the root node of a binary tree to the preOrder function.<br />Constraints<br />$1 \\leq$ Nodes in the tree $\\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the tree's preorder traversal as a single line of space-separated values.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>     1\n      \\\n       2\n        \\\n         5\n        /  \\\n       3    6\n        \\\n         4  \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 2 5 3 4 6 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The preorder traversal of the binary tree is printed.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/bf8c2c85-6c69-4f51-9bbf-d0f39da273bf",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "tree-postorder-traversal",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree: Postorder Traversal",
  "content": "<p>Complete the postOrder function in the editor below. It received 1 parameter: a pointer to the root of a binary tree. It must print the values in the tree's postorder traversal as a single line of space-separated values.<br /><strong>Input Format</strong><br />Our test code passes the root node of a binary tree to the postOrder function.<br /><strong>Constraints</strong><br />$1 \\leq$ Nodes in the tree $\\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the tree's postorder traversal as a single line of space-separated values.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>     1\n      \\\n       2\n        \\\n         5\n        /  \\\n       3    6\n        \\\n         4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>4 3 6 5 2 1 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The postorder traversal is shown.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/866093eb-60a8-495d-88ae-ca1a082d713a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "tree-inorder-traversal",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree: Inorder Traversal",
  "content": "<p>In this challenge, you are required to implement inorder traversal of a tree.<br />Complete the inOrder function in your editor below, which has 1 parameter: a pointer to the root of a binary tree. It must print the values in the tree's inorder traversal as a single line of space-separated values.<br /><strong>Input Format</strong><br />Our hidden tester code passes the root node of a binary tree to your \\$inOrder* function.<br /><strong>Constraints</strong><br />$1 \\leq N o d e s$ in the tree $\\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the tree's inorder traversal as a single line of space-separated values.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>     1\n      \\\n       2\n        \\\n         5\n        /  \\\n       3    6\n        \\\n         4  \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 2 3 4 5 6 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The tree's inorder traversal results in 1 2 3 4 5 6 as the required result.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/33d97e33-9f0d-4156-b80e-9c726ca8f747",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "tree-height-of-a-binary-tree",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree: Height of a Binary Tree",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>The height of a binary tree is the number of edges between the tree's root and its furthest leaf. For example, the following binary tree is of height 2<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1527626183-88c8070977-isitBSTSample0.png\" alt=\"image\" /><br /><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>getHeight</em>&nbsp;or&nbsp;<em>height</em>&nbsp;function in the editor. It must return the height of a binary tree as an integer.</p>\n<p>getHeight or height has the following parameter(s):</p>\n<ul>\n<li><em>root</em>: a reference to the root of a binary tree.</li>\n</ul>\n<p><strong>Note</strong>&nbsp;-The Height of binary tree with single node is taken as zero.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $n$, the number of nodes in the tree.<br />Next line contains $n$ space separated integer where $i$ th integer denotes node[i].data.<br />Note: Node values are inserted into a binary search tree before a reference to the tree's root node is passed to your function. In a binary search tree, all nodes on the left branch of a node are less than the node value. All values on the right branch are greater than the node value.<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq \\text { node. } \\operatorname{data}[i] \\leq 20 \\\\<br />&amp;1 \\leq n \\leq 20<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Your function should return a single integer denoting the height of the binary tree.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1527625966-0f80a8e1a4-treeDepthSample0.png\" alt=\"image\" /></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The longest root-to-leaf path is shown below:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1527626088-807ca5fc63-treeDepthSample1.png\" alt=\"image\" /></p>\n<p>There are 4 nodes in this path that are connected by 3 edges, meaning our binary tree's height $=3$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/22d80072-547b-4d34-afd7-eb73cd4fea70",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "tree-top-view",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree : Top View",
  "content": "<p>Given a pointer to the root of a binary tree, print the top view of the binary tree.</p>\n<p>The tree as seen from the top the nodes, is called the top view of the tree.</p>\n<p>For example :</p>\n<pre><code>   1\n    \\\n     2\n      \\\n       5\n      /  \\\n     3    6\n      \\\n       4</code></pre>\n<p>Top View : $1-&gt;2-&gt;5-&gt;6$<br />Complete the function topView and print the resulting values on a single line separated by space.</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>You are given a function,</p>\n<pre><code>void topView(node * root) {\n\n}\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n<p>$1 \\leq$ Nodes in the tree $\\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the values on a single line separated by space.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>   1\n    \\\n     2\n      \\\n       5\n      /  \\\n     3    6\n      \\\n       4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<p>1 2 5 6</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<pre><code>   1\n    \\\n     2\n      \\\n       5\n      /  \\\n     3    6\n      \\\n       4</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;From the top, only nodes $1,2,5,6$ are visible.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b9954bec-0db0-4bf4-8819-a77664f846f9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "tree-level-order-traversal",
  "tags": [],
  "level": "BEGINNER",
  "title": "Tree: Level Order Traversal",
  "content": "<p>Given a pointer to the root of a binary tree, you need to print the level order traversal of this tree. In level-order traversal, nodes are visited level by level from left to right. Complete the function levelOrder and print the values in a single line separated by a space.</p>\n<p>For example:</p>\n<pre><code>     1\n      \\\n       2\n        \\\n         5\n        /  \\\n       3    6\n        \\\n         4  </code></pre>\n<p>For the above tree, the level order traversal is $1-&gt;2-&gt;5-&gt;3-&gt;6-&gt;4$.</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>You are given a function,</p>\n<pre><code>void levelOrder(Node * root) {\n\n}\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n<p>$1 \\leq$ Nodes in the tree $\\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the values in a single line separated by a space.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>     1\n      \\\n       2\n        \\\n         5\n        /  \\\n       3    6\n        \\\n         4  \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<p>1 2 5 3 6 4</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We need to print the nodes level by level. We process each level from left to right.</p>\n<p>Level Order Traversal: $1-&gt;2-&gt;5-&gt;3-&gt;6-&gt;4$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/fb982f3f-bc8a-4437-8698-c8dfc4120d40",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94c9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "binary-search-tree-insertion",
  "tags": [],
  "level": "BEGINNER",
  "title": "Binary Search Tree : Insertion",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a pointer to the root of a binary search tree and values to be inserted into the tree. Insert the values into their appropriate position in the binary search tree and return the root of the updated binary tree. You just have to complete the function.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>You are given a function,</p>\n<pre><code>Node * insert (Node * root ,int data) {\n\n}\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<ul>\n<li>No. of nodes in the tree $\\leq 500$</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Return the root of the binary search tree after inserting the value into the tree.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>        4\n       / \\\n      2   7\n     / \\\n    1   3\n</code></pre>\n<p>The value to be inserted is 6.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 6</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3de8959d-b1ca-4932-8625-c4448dc75c33",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ca"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "tree-huffman-decoding",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Tree: Huffman Decoding",
  "content": "<p><a href=\"https://en.wikipedia.org/wiki/Huffman_coding\">Huffman coding</a>&nbsp;assigns variable length codewords to fixed length input characters based on their frequencies. More frequent characters are assigned shorter codewords and less frequent characters are assigned longer codewords. All edges along the path to a character contain a code digit. If they are on the left side of the tree, they will be a&nbsp;<em>0</em>&nbsp;(zero). If on the right, they'll be a&nbsp;<em>1</em>&nbsp;(one). Only the leaves will contain a letter and its frequency count. All other nodes will contain a null instead of a character, and the count of the frequency of all of it and its descendant characters.</p>\n<p>For instance, consider the string ABRACADABRA. There are a total of 11 characters in the string. This number should match the count in the ultimately determined root of the tree. Our frequencies are $A=5, B=2, R=2, C=1$ and $D=1$. The two smallest frequencies are for $C$ and $D$, both equal to 1, so we'll create a tree with them. The root node will contain the sum of the counts of its descendants, in this case $1+1=2$. The left node will be the first character encountered, $C$, and the right will contain $D$. Next we have 3 items with a character count of 2 : the tree we just created, the character $B$ and the character $R$. The tree came first, so it will go on the left of our new root node. $B$ will go on the right. Repeat until the tree is complete, then fill in the 1 's and 0 's for the edges. The finished graph looks like:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1528128577-d4e3a24f3e-huffmanExample.png\" alt=\"image\" /></p>\n<p>Input characters are only present in the leaves. Internal nodes have a character value of ϕ (NULL). We can determine that our values for characters are:</p>\n<pre><code>A - 0\nB - 111\nC - 1100\nD - 1101\nR - 10\n</code></pre>\n<p>Our Huffman encoded string is:</p>\n<pre><code>A B    R  A C     A D     A B    R  A\n0 111 10 0 1100 0 1101 0 111 10 0\nor\n01111001100011010111100\n</code></pre>\n<p>To avoid ambiguity, Huffman encoding is a prefix free encoding technique. No codeword appears as a prefix of any other codeword.</p>\n<p>To decode the encoded string, follow the zeros and ones to a leaf and return the character there.</p>\n<p>You are given pointer to the root of the Huffman tree and a binary coded string to decode. You need to print the decoded string.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function decode_huff in the editor below. It must return the decoded string.</p>\n<p>decode_huff has the following parameters:</p>\n<ul>\n<li><em>root</em>: a reference to the root node of the Huffman tree</li>\n<li><em>s</em>: a Huffman encoded string</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>There is one line of input containing the plain string, $s$. Background code creates the Huffman tree then passes the head node and the encoded string to the function.<br />Constraints<br />$$<br />1 \\leq|s| \\leq 25<br />$$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Output the decoded string on a single line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1528126193-578de92bdb-huffmanSample.png\" alt=\"image\" /></p>\n<pre><code>s=\"1001011\"\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>ABACA\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<pre><code>S=\"1001011\"\nProcessing the string from left to right.\nS[0]='1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.\nWe move back to the root.\n\nS[1]='0' : we move to the left child. \nS[2]='0' : we move to the left child. We encounter a leaf node with value 'B'. We add 'B' to the decoded string.\nWe move back to the root.\n\nS[3] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.\nWe move back to the root.\n\nS[4]='0' : we move to the left child. \nS[5]='1' : we move to the right child. We encounter a leaf node with value C'. We add 'C' to the decoded string.\nWe move back to the root.\n\n S[6] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.\nWe move back to the root.\n\nDecoded String = \"ABACA\"</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b462666e-7b18-4b18-84ca-25c97d93948b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94cb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "binary-search-tree-lowest-common-ancestor",
  "tags": [],
  "level": "BEGINNER",
  "title": "Binary Search Tree : Lowest Common Ancestor",
  "content": "<p>You are given pointer to the root of the binary search tree and two values $v 1$ and $v 2$. You need to return the lowest common ancestor (<a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\">LCA</a>) of $v 1$ and $v 2$ in the binary search tree.</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1529959649-81b68736f7-lcaexample.png\" alt=\"image\" /></p>\n<p>In the diagram above, the lowest common ancestor of the nodes 4 and 6 is the node 3 . Node 3 is the lowest node which has nodes 4 and 6 as descendants.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>lca</em>&nbsp;in the editor below. It should return a pointer to the lowest common ancestor node of the two values given.</p>\n<p>lca has the following parameters:<br />- root: a pointer to the root node of a binary search tree<br />- v1: a node.data value<br />- v2: a node.data value</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $n$, the number of nodes in the tree.<br />The second line contains $n$ space-separated integers representing node. data values.<br />The third line contains two space-separated integers, $v 1$ and $v 2$.<br />To use the test data, you will have to create the binary search tree yourself. Here on the platform, the tree will be created for you.<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n, \\text { node. } d a t a \\leq 25 \\\\<br />&amp;1 \\leq v 1, v 2 \\leq 25 \\\\<br />&amp;v 1 \\neq v 2<br />\\end{aligned}<br />$$<br />The tree will contain nodes with data equal to $v 1$ and $v 2$.</p>\n<p><strong>Output Format</strong><br />Return the a pointer to the node that is the lowest common ancestor of $v 1$ and $v 2$.</p>\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>6\n4 2 3 1 7 6\n1 7\n</code></pre>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1527870675-1cfffe0a8a-LCASample.png\" alt=\"image\" /></p>\n<p>$v 1=1$ and $v 2=7$<br />Sample Output<br />[reference to node 4]<br />Explanation<br />LCA of 1 and 7 is 4 , the root in this case.<br />Return a pointer to the node.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7569d4e3-5769-40eb-adc2-f10ae0bf0b7a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94cc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 40,
  "slug": "swap-nodes-algo",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Swap Nodes [Algo]",
  "content": "<p>A binary tree is a tree which is characterized by one of the following properties:</p>\n<ul>\n<li>It can be empty (null).</li>\n<li>It contains a root node only.</li>\n<li>It contains a root node with a left subtree, a right subtree, or both. These subtrees are also binary trees.</li>\n</ul>\n<p><em>In-order</em>&nbsp;traversal is performed as</p>\n<ol>\n<li>Traverse the left subtree.</li>\n<li>Visit root.</li>\n<li>Traverse the right subtree.</li>\n</ol>\n<p>For this in-order traversal, start from the left child of the root node and keep exploring the left subtree until you reach a leaf. When you reach a leaf, back up to its parent, check for a right child and visit it if there is one. If there is not a child, you've explored its left and right subtrees fully. If there is a right child, traverse its left subtree then its right in the same manner. Keep doing this until you have traversed the entire tree. You will only store the values of a node as you visit when one of the following is true:</p>\n<ul>\n<li>it is the first node visited, the first time visited</li>\n<li>it is a leaf, should only be visited once</li>\n<li>all of its subtrees have been explored, should only be visited once while this is true</li>\n<li>it is the root of the tree, the first time visited</li>\n</ul>\n<p><strong>Swapping:</strong>&nbsp;Swapping subtrees of a node means that if initially node has left subtree&nbsp;<code>L</code>&nbsp;and right subtree&nbsp;<code>R</code>, then after swapping, the left subtree will be&nbsp;<code>R</code>&nbsp;and the right subtree,&nbsp;<code>L</code>.</p>\n<p>For example, in the following tree, we swap children of node&nbsp;<code>1</code>.</p>\n<pre><code>                                Depth\n    1               1            [1]\n   / \\             / \\\n  2   3     -&gt;    3   2          [2]\n   \\   \\           \\   \\\n    4   5           5   4        [3]\n</code></pre>\n<p>In-order traversal of left tree is&nbsp;<code>2 4 1 3 5</code>&nbsp;and of right tree is&nbsp;<code>3 5 1 2 4</code>.</p>\n<p><strong>Swap operation</strong>:</p>\n<p>We define depth of a node as follows:</p>\n<ul>\n<li>The root node is at depth&nbsp;<em>1</em>.</li>\n<li>If the depth of the parent node is&nbsp;<code>d</code>, then the depth of current node will be&nbsp;<code>d+1</code>.</li>\n</ul>\n<p>Given a tree and an integer,&nbsp;<code>k</code>, in one operation, we need to swap the subtrees of all the nodes at each depth&nbsp;<code>h</code>, where&nbsp;<code>h &isin; [k, 2k, 3k,...]</code>. In other words, if&nbsp;<code>h</code>&nbsp;is a multiple of&nbsp;<code>k</code>, swap the left and right subtrees of that level.</p>\n<p>You are given a tree of&nbsp;<code>n</code>&nbsp;nodes where nodes are indexed from&nbsp;<code>[1..n]</code>&nbsp;and it is rooted at&nbsp;<code>1</code>. You have to perform&nbsp;<code>t</code>&nbsp;swap operations on it, and after each swap operation print the in-order traversal of the current state of the tree.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>swapNodes</em>&nbsp;function in the editor below. It should return a two-dimensional array where each element is an array of integers representing the node indices of an in-order traversal after a swap operation.</p>\n<p>swapNodes has the following parameter(s):</p>\n<ul>\n<li>indexes: an array of integers representing index values of each node $[i]$, beginning with node $[1]$, the first element, as the root.</li>\n<li>queries: an array of integers, each representing a $k$ value.</li>\n</ul>\n<p><strong>Input Format</strong><br />The first line contains&nbsp;<code>n</code>, number of nodes in the tree.</p>\n<p>Each of the next&nbsp;<code>n</code>&nbsp;lines contains two integers,&nbsp;<code>a b</code>, where&nbsp;<code>a</code>&nbsp;is the index of left child, and&nbsp;<code>b</code>&nbsp;is the index of right child of&nbsp;<em>i<sup>th</sup></em>&nbsp;node.</p>\n<p><strong>Note:</strong>&nbsp;<code>-1</code>&nbsp;is used to represent a null node.</p>\n<p>The next line contains an integer, t, the size of queries.<br />Each of the next t lines contains an integer queries $[i]$, each being a value $k$.</p>\n<p><strong>Output Format</strong><br />For each&nbsp;<code>k</code>, perform the swap operation and store the indices of your in-order traversal to your result array. After all swap operations have been performed, return your result array for printing.</p>\n<p><strong>Constraints</strong><br />- $1 \\leq n \\leq 1024$<br />- $1 \\leq t \\leq 100$<br />- $1 \\leq k \\leq n$<br />- Either $a=-1$ or $2&lt;=a&lt;=n$<br />- Either $b=-1$ or $2&lt;=b&lt;=n$<br />- The index of a non-null child will always be greater than that of its parent.</p>\n<p><strong>Sample Input 0</strong></p>\n<pre><code>3\n2 3\n-1 -1\n-1 -1\n2\n1\n1\n</code></pre>\n<p><strong>Sample Output 0</strong></p>\n<pre><code>3 1 2\n2 1 3\n</code></pre>\n<p><strong>Explanation 0</strong></p>\n<p>As nodes&nbsp;<em>2</em>&nbsp;and&nbsp;<em>3</em>&nbsp;have no children, swapping will not have any effect on them. We only have to swap the child nodes of the root node.</p>\n<pre><code>    1   [s]       1    [s]       1   \n   / \\      -&gt;   / \\        -&gt;  / \\  \n  2   3 [s]     3   2  [s]     2   3\n</code></pre>\n<p><strong>Note:</strong>&nbsp;<code>[s]</code>&nbsp;indicates that a swap operation is done at this depth.</p>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>5\n2 3\n-1 4\n-1 5\n-1 -1\n-1 -1\n1\n2\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>4 2 1 5 3\n</code></pre>\n<p><strong>Explanation 1</strong></p>\n<p>Swapping child nodes of node&nbsp;<em>2</em>&nbsp;and&nbsp;<em>3</em>&nbsp;we get</p>\n<pre><code>    1                  1  \n   / \\                / \\ \n  2   3   [s]  -&gt;    2   3\n   \\   \\            /   / \n    4   5          4   5  \n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>11\n2 3\n4 -1\n5 -1\n6 -1\n7 8\n-1 9\n-1 -1\n10 11\n-1 -1\n-1 -1\n-1 -1\n2\n2\n4\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>2 9 6 4 1 3 7 5 11 8 10\n2 6 9 4 1 3 7 5 10 8 11\n</code></pre>\n<p><strong>Explanation 2</strong></p>\n<p>Here we perform swap operations at the nodes whose depth is either 2 or 4 for $K=2$ and then at nodes whose depth is 4 for $K=4$</p>\n<pre><code>         1                     1                          1             \n        / \\                   / \\                        / \\            \n       /   \\                 /   \\                      /   \\           \n      2     3    [s]        2     3                    2     3          \n     /      /                \\     \\                    \\     \\         \n    /      /                  \\     \\                    \\     \\        \n   4      5          -&gt;        4     5          -&gt;        4     5       \n  /      / \\                  /     / \\                  /     / \\      \n /      /   \\                /     /   \\                /     /   \\     \n6      7     8   [s]        6     7     8   [s]        6     7     8\n \\          / \\            /           / \\              \\         / \\   \n  \\        /   \\          /           /   \\              \\       /   \\  \n   9      10   11        9           11   10              9     10   11 </code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f3638f70-8c00-4608-858a-48a08bd7cf50",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94cd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 80,
  "slug": "kittys-calculations-on-a-tree",
  "tags": [],
  "level": "EXPERT",
  "title": "Kitty's Calculations on a Tree",
  "content": "<p>Kitty has a tree, $T$, consisting of $n$ nodes where each node is uniquely labeled from 1 to $n$. Her friend Alex gave her $q$ sets, where each set contains $k$ distinct nodes. Kitty needs to calculate the following expression on each set:<br />$$<br />\\left(\\sum_{\\{u, v\\}} u \\cdot v \\cdot \\operatorname{dist}(u, v)\\right) \\bmod \\left(10^{9}+7\\right)<br />$$<br />where:<br />- $\\{u, v\\}$ denotes an unordered pair of nodes belonging to the set.<br />- $\\operatorname{dist}(u, v)$ denotes the number of edges on the unique (shortest) path between nodes $u$ and $v$.<br />Given $T$ and $q$ sets of $k$ distinct nodes, calculate the expression for each set. For each set of nodes, print the value of the expression modulo $10^{9}+7$ on a new line.</p>\n<p><strong>Example</strong><br />edges $=[[1,2],[1,3],[1,4],[3,5],[3,6],[3,7]]$<br />queries $=[4,5,7]$</p>\n<p>The graph looks like this:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1480257483-7359ae9180-aleso.png\" alt=\"image\" /></p>\n<p>There are three pairs that can be created from the query set: $[4,5],[4,7],[5,7]$. The distance from 4 to 5 is 3 , from 4 to 7 is 3 , and from 5 to 7 is 2 .<br />Now do the summation:<br />$$<br />\\begin{aligned}<br />&amp;(4 \\cdot 5 \\cdot \\operatorname{dist}(4,5)+4 \\cdot 7 \\cdot \\operatorname{dist}(4,7)+5 \\cdot 7 \\cdot \\operatorname{dist}(5,7)) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow(4 \\cdot 5 \\cdot 3+4 \\cdot 7 \\cdot 3+5 \\cdot 7 \\cdot 2) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow 214<br />\\end{aligned}<br />$$</p>\n<p><strong>Input Format</strong><br />The first line contains two space-separated integers, the respective values of $n$ (the number of nodes in tree $T$ ) and $q$ (the number of nodes in the query set).<br />Each of the $n-1$ subsequent lines contains two space-separated integers, $a$ and $b$, that describe an undirected edge between nodes $\\boldsymbol{a}$ and $b$.<br />The $2 \\cdot q$ subsequent lines define each set over two lines in the following format:<br />1. The first line contains an integer, $k$, the size of the set.<br />2. The second line contains $k$ space-separated integers, the set's elements.</p>\n<p><strong>Constraints</strong><br />- $1 \\leq n \\leq 2 \\cdot 10^{5}$<br />- $1 \\leq a, b \\leq n$<br />- $1 \\leq q \\leq 10^{5}$<br />- $1 \\leq k_{i} \\leq 10^{5}$<br />- The sum of $k_{i}$ over all $q$ does not exceed $2 \\cdot 10^{5}$.<br />- All elements in each set are distinct.</p>\n<p><strong>Subtasks</strong><br />- $1 \\leq n \\leq 2000$ for $24 \\%$ of the maximum score.<br />- $1 \\leq n \\leq 5 \\cdot 10^{4}$ for $45 \\%$ of the maximum score.<br />- $1 \\leq n \\leq 2 \\cdot 10^{5}$ for $100 \\%$ of the maximum score.<br /><strong>Output Format</strong><br />Print $q$ lines of output where each line $i$ contains the expression for the $i^{\\text {th }}$ query, modulo $10^{9}+7$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">7 3</span>\n<span class=\"err\">1 2</span>\n<span class=\"err\">1 3</span>\n<span class=\"err\">1 4</span>\n<span class=\"err\">3 5</span>\n<span class=\"err\">3 6</span>\n<span class=\"err\">3 7</span>\n<span class=\"err\">2</span>\n<span class=\"err\">2 4</span>\n<span class=\"err\">1</span>\n<span class=\"err\">5</span>\n<span class=\"err\">3</span>\n<span class=\"err\">2 4 5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">16</span>\n<span class=\"err\">0</span>\n<span class=\"err\">106</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Tree $T$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;looks like this:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1480257483-7359ae9180-aleso.png\" alt=\"image\" /></p>\n<p>We perform the following calculations for $q=3$ sets:<br />- Set 0 : Given set $\\{2,4\\}$, the only pair we can form is $(u, v)=(2,4)$, where $\\operatorname{dist}(2,4)=2$. We then calculate the following answer and print it on a new line:<br />$$<br />\\begin{aligned}<br />&amp;(2 \\cdot 4 \\cdot \\operatorname{dist}(2,4)) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow(2 \\cdot 4 \\cdot 2) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow 16<br />\\end{aligned}<br />$$<br />- Set 1 : Given set $\\{5\\}$, we cannot form any pairs because we don't have at least two elements. Thus, we print 0 on a new line.<br />- Set 2 : Given set $\\{2,4,5\\}$, we can form the pairs $(2,4),(2,5)$, and $(4,5)$. We then calculate the following answer and print it on a new line:<br />$$<br />\\begin{aligned}<br />&amp;(2 \\cdot 4 \\cdot \\operatorname{dist}(2,4)+2 \\cdot 5 \\cdot \\operatorname{dist}(2,5)+4 \\cdot 5 \\cdot \\operatorname{dist}(4,5)) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow(2 \\cdot 4 \\cdot 2+2 \\cdot 5 \\cdot 3+4 \\cdot 5 \\cdot 3) \\bmod \\left(10^{9}+7\\right) \\\\<br />&amp;\\Rightarrow 106<br />\\end{aligned}<br />$$</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/140b42a3-db11-40a2-9ed8-7940e3d28695",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ce"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "is-this-a-binary-search-tree",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Is This a Binary Search Tree?",
  "content": "<p>For the purposes of this challenge, we define a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Binary_tree\">binary tree</a>&nbsp;to be a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Binary_search_tree\">binary search tree</a>&nbsp;with the following ordering requirements:<br />- The data value of every node in a node's left subtree is less than the data value of that node.<br />- The data value of every node in a node's right subtree is greater than the data value of that node.<br />Given the root node of a binary tree, can you determine if it's also a binary search tree?<br />Complete the function in your editor below, which has 1 parameter: a pointer to the root of a binary tree. It must return a boolean denoting whether or not the binary tree is a binary search tree. You may have to write one or more helper functions to complete this challenge.</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for reading any input from stdin. Hidden code stubs will assemble a binary tree and pass its root node to your function as an argument.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n<p>- $0 \\leq$ data $\\leq 10^{4}$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for printing any output to stdout. Your function must return&nbsp;<em>true</em>&nbsp;if the tree is a binary search tree; otherwise, it must return&nbsp;<em>false</em>. Hidden code stubs will print this result as a&nbsp;<em>Yes</em>&nbsp;or&nbsp;<em>No</em>&nbsp;answer on a new line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/8131/1461698192-c9e0fcb28d-BTinput.png\" alt=\"tree\" /></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>No</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e311b291-9fe7-41e8-91b9-e5a4167866b2",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94cf"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "square-ten-tree",
  "tags": [],
  "level": "EXPERT",
  "title": "Square-Ten Tree",
  "content": "<p>The square-ten tree decomposition of an array is defined as follows:<br />- The lowest $\\left(0^{t h}\\right)$ level of the square-ten tree consists of single array elements in their natural order.<br />- The $k^{\\text {th }}$ level (starting from 1 ) of the square-ten tree consists of subsequent array subsegments of length $10^{2^{k-1}}$ in their natural order. Thus, the $1^{s t}$ level contains subsegments of length $10^{2^{1-1}}=10$, the $2^{n d}$ level contains subsegments of length $10^{2^{2-1}}=100$, the $3^{r d}$ level contains subsegments of length $10^{2^{3-1}}=10000$, etc.<br />In other words, every $k^{t h}$ level (for every $k \\geq 1$ ) of square-ten tree consists of array subsegments indexed as:<br />$$<br />\\left[1,10^{2^{k-1}}\\right],\\left[10^{2^{k-1}}+1,2 \\cdot 10^{2^{k-1}}\\right], \\ldots,\\left[i \\cdot 10^{2^{k-1}}+1,(i+1) \\cdot 10^{2^{k-1}}\\right], \\ldots<br />$$<br />Level 0 consists of array subsegments indexed as $[1,1],[2,2], \\ldots,[i, i], \\ldots .$<br />The image below depicts the bottom-left corner (i.e., the first 128 array elements) of the table representing a square-ten tree.</p>\n<p>The levels are numbered from bottom to top:</p>\n<p><img title=\"4x128 square-ten tree table\" src=\"https://s3.amazonaws.com/hr-challenge-images/13816/1445948557-cdd10d5f3a-1.png\" /></p>\n<p><strong>Task</strong></p>\n<p>Given the borders of array subsegment $[L, R]$, find its decomposition into a minimal number of nodes of a square-ten tree. In other words, you must find a subsegment sequence $\\left[l_{1}, r_{1}\\right],\\left[l_{2}, r_{2}\\right], \\ldots,\\left[l_{m}, r_{m}\\right]$ such as $l_{i+1}=r_{i}+1$ for every $1 \\leq i&lt;m$ $, l_{1}=L, r_{m}=R$, where every $\\left[l_{i}, r_{i}\\right]$ belongs to any of the square-ten tree levels and $m$ is minimal amongst all such variants.<br /><strong>Input Format</strong><br />The first line contains a single integer denoting $L$.<br />The second line contains a single integer denoting $R$.<br /><strong>Constraints</strong><br />- $1 \\leq L \\leq R \\leq 10^{10^{6}}$<br />- The numbers in input do not contain leading zeroes.</p>\n<p><strong>Output Format</strong><br />As soon as array indices are too large, you should find a sequence of $m$ square-ten tree level numbers, $s_{1}, s_{2}, \\ldots, s_{m}$ meaning that subsegment $\\left[l_{i}, r_{i}\\right]$ belongs to the $s_{i}^{t h}$ level of the square-ten tree.<br />Print this sequence in the following compressed format:<br />- On the first line, print the value of $n$ (i.e., the compressed sequence block count).<br />- For each of the $n$ subsequent lines, print 2 space-separated integers, $t_{i}$ and $c_{i}\\left(t_{i} \\geq 0, c_{i} \\geq 1\\right)$, meaning that the number $t_{i}$ appears consequently $c_{i}$ times in sequence $s$. Blocks should be listed in the order they appear in the sequence. In other words, $s_{1}, s_{2}, \\ldots, s_{c_{1}}$ should be equal to $t_{1}, s_{c_{1}+1}, s_{c_{1}+2}, \\ldots, s_{c_{1}+c_{2}}$ should be equal to $t_{2}$, etc.<br />Thus $\\sum_{i=1}^{n} c_{i}=m$ must be true and $t_{i} \\neq t_{i+1}$ must be true for every $1 \\leq i&lt;n$. All numbers should be printed without leading zeroes.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">1</span>\n<span class=\"err\">10</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">1</span>\n<span class=\"err\">1 1</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>Segment $[1,10]$ belongs to level 1 of the square-ten tree.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7410093c-4c60-41a1-906a-629dff919e9c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "balanced-forest",
  "tags": [],
  "level": "EXPERT",
  "title": "Balanced Forest",
  "content": "<p>Greg has a tree of nodes containing integer data. He wants to insert a node with some non-zero integer value somewhere into the tree. His goal is to be able to cut two edges and have the values of each of the three new trees sum to the same amount. This is called a&nbsp;<em>balanced forest</em>. Being frugal, the data value he inserts should be minimal. Determine the minimal amount that a new node can have to allow creation of a balanced forest. If it's not possible to create a balanced forest, return -1.</p>\n<p>For example, you are given node values $c=[15,12,8,14,13]$ and edges $=[[1,2],[1,3],[1,4],[4,5]]$. It is the following tree:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1528138409-097321b50e-forestExample.png\" alt=\"image\" /></p>\n<p>The blue node is root, the first number in a node is node number and the second is its value. Cuts can be made between nodes 1 and 3 and nodes 1 and 4 to have three trees with sums 27,27 and 8 . Adding a new node $w$ of $c[w]=19$ to the third tree completes the solution.<br /><strong>Function Description</strong><br />Complete the balancedForest function in the editor below. It must return an integer representing the minimum value of $c[w]$ that can be added to allow creation of a balanced forest, or $-1$ if it is not possible.<br />balancedForest has the following parameter(s):<br />- c: an array of integers, the data values for each node<br />- edges: an array of 2 element arrays, the node pairs per edge</p>\n<p><strong>Input Format</strong><br />The first line contains a single integer, $q$, the number of queries.<br />Each of the following $q$ sets of lines is as follows:<br />- The first line contains an integer, $n$, the number of nodes in the tree.<br />- The second line contains $n$ space-separated integers describing the respective values of $c[1], c[2], \\ldots, c[n]$, where each $c[i]$ denotes the value at node $i$.<br />- Each of the following $n-1$ lines contains two space-separated integers, $x[j]$ and $y[j]$, describing edge $j$ connecting nodes $x[j]$ and $y[j]$<br /><strong>Constraints</strong><br />- $1 \\leq q \\leq 5$<br />- $1 \\leq n \\leq 5 \\times 10^{4}$<br />- $1 \\leq c[i] \\leq 10^{9}$<br />- Each query forms a valid undirected tree.</p>\n<p><strong>Subtasks</strong><br />For $30 \\%$ of the maximum score:<br />- $1 \\leq n \\leq 100$<br />- $1 \\leq c[i] \\leq 100$<br />For $50 \\%$ of the maximum score:<br />- $1 \\leq n \\leq 2000$<br />- $1 \\leq c[i] \\leq 10^{9}$<br /><strong>Output Format</strong><br />For each query, return the minimum value of the integer $c[w]$. If no such value exists, return $-1$ instead.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n5\n1 2 2 1 1\n1 2\n1 3\n3 5\n1 4\n3\n1 3 5\n1 3\n1 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n-1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We perform the following two queries:</p>\n<ol>\n<li>The tree initially looks like this:</li>\n</ol>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1528140939-72f0001183-forestSample0-1.png\" alt=\"image\" /></p>\n<p>Greg can add a new node $w=6$ with $c[w]=2$ and create a new edge connecting nodes 4 and 6 . Then he cuts the edge connecting nodes 1 and 4 and the edge connecting nodes 1 and 3 . We now have a three-tree balanced forest where each tree has a sum of 3 .</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1528141184-a92a2f7cff-forestSample0-2.png\" alt=\"image\" /></p>\n<ol start=\"2\">\n<li>In the second query, it's impossible to add a node in such a way that we can split the tree into a three-tree balanced forest so we return -1<span id=\"MathJax-Element-10-Frame\" class=\"MathJax_SVG\"></span>.</li>\n</ol>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/57d0926e-a65b-4f3d-98e4-c4846664fe3b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 70,
  "slug": "jennys-subtrees",
  "tags": [],
  "level": "EXPERT",
  "title": "Jenny's Subtrees",
  "content": "<p>Jenny loves experimenting with <a href=\"https://en.wikipedia.org/wiki/Tree_%28graph_theory%29\">trees</a>. Her favorite tree has $n$ nodes connected by $n-1$ edges, and each edge is 1 unit in length. She wants to cut a subtree (i.e., a connected part of the original tree) of radius $r$ from this tree by performing the following two steps:<br />1. Choose a node, $x$, from the tree.<br />2. Cut a subtree consisting of all nodes which are not further than $r$ units from node $x$.<br />For example, the blue nodes in the diagram below depict a subtree centered at $x=1$ that has radius $r=2$ :</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1483075128-6989fccb33-jenny3.png\" alt=\"image\" /></p>\n<p>Given $n, r$, and the definition of Jenny's tree, find and print the number of different subtrees she can cut out. Two subtrees are considered to be different if they are not <a href=\"https://en.wikipedia.org/wiki/Graph_isomorphism\">isomorphic</a>.<br /><strong>Input Format</strong><br />The first line contains two space-separated integers denoting the respective values of $n$ and $r$.<br />Each of the next $n-1$ subsequent lines contains two space-separated integers, $x$ and $y$, describing a bidirectional edge in Jenny's tree having length 1 .<br /><strong>Constraints</strong><br />- $1 \\leq n \\leq 3000$<br />- $0 \\leq r \\leq 3000$<br />- $1 \\leq x, y \\leq n$</p>\n<p><strong>Subtasks</strong><br />For $50 \\%$ of the max score:<br />- $1 \\leq n \\leq 500$<br />- $0 \\leq r \\leq 500$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the total number of different possible subtrees.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">7 1</span>\n<span class=\"err\">1 2</span>\n<span class=\"err\">1 3</span>\n<span class=\"err\">1 4</span>\n<span class=\"err\">1 5</span>\n<span class=\"err\">2 6</span>\n<span class=\"err\">2 7</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">3</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In the diagram below, blue nodes denote the possible subtrees:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1483203734-79b5233ce8-jenny8.png\" alt=\"image\" /></p>\n<p>The last 5<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> subtrees are considered to be the same (i.e., they all consist of two nodes connected by one edge), so we print 3<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;as our answer.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">7 3</span>\n<span class=\"err\">1 2</span>\n<span class=\"err\">2 3</span>\n<span class=\"err\">3 4</span>\n<span class=\"err\">4 5</span>\n<span class=\"err\">5 6</span>\n<span class=\"err\">6 7</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">4</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 1</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In the diagram below, blue nodes denote the possible subtrees:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1483203649-c8f47679bb-jenny7.png\" alt=\"image\" /></p>\n<p>Here, we have four possible different subtrees.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b7e2f5f0-9c63-42be-8c08-d4bc8c1c120b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "qheap1",
  "tags": [],
  "level": "BEGINNER",
  "title": "QHEAP1",
  "content": "<p>This question is designed to help you get a better understanding of basic heap operations.<br />There are 3 types of query:<br />- \" $1 v^{\\prime \\prime}$ - Add an element $v$ to the heap.<br />- \" $2 v^{\\prime \\prime}$ - Delete the element $v$ from the heap.<br />- \"3\"- Print the minimum of all the elements in the heap.<br />NOTE: It is guaranteed that the element to be deleted will be there in the heap. Also, at any instant, only distinct elements will be in the heap.<br />Input Format<br />The first line contains the number of queries, $Q$.<br />Each of the next $Q$ lines contains one of the 3 types of query.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq Q \\leq 10^{5} \\\\<br />&amp;-10^{9} \\leq v \\leq 10^{9}<br />\\end{aligned}<br />$$<br />Output Format<br />For each query of type 3 , print the minimum value on a single line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN       Function\n-----       --------\n5           Q = 5\n1 4         insert 4\n1 9         insert 9\n3           print minimum\n2 4         delete 4\n3           print minimum\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>4  \n9 \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>After the first 2 queries, the heap contains $\\{4,9\\}$. Printing the minimum gives 4 as the output. Then, the $4^{\\text {th }}$ query deletes 4 from the heap, and the $5^{t h}$ query gives 9 as the output.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/0b8a4966-788a-4d92-8ecc-0457dba01d8a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "maximum-element",
  "tags": [],
  "level": "BEGINNER",
  "title": "Maximum Element",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You have an empty sequence, and you will be given $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;queries. Each query is one of these three types:</p>\n<pre><code>1 x  -Push the element x into the stack.\n2    -Delete the element present at the top of the stack.\n3    -Print the maximum element in the stack.\n</code></pre>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>getMax</em>&nbsp;function in the editor below.</p>\n<p><em>getMax</em>&nbsp;has the following parameters:<br />-&nbsp;<em>string operations[n]:</em>&nbsp;operations as strings</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>int[]:</em>&nbsp;the answers to each type 3 query</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line of input contains an integer, $n$. The next $n$ lines each contain an above mentioned query.<br />Constraints<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 10^{5} \\\\<br />&amp;1 \\leq x \\leq 10^{9} \\\\<br />&amp;1 \\leq \\text { type } \\leq 3<br />\\end{aligned}<br />$$<br />All queries are valid.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN   Function\n-----   --------\n10      operations[] size n = 10\n1 97    operations = ['1 97', '2', '1 20', ....]\n2\n1 20\n2\n1 26\n1 20\n2\n3\n1 91\n3\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>26\n91</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/cfea8309-60a9-4258-ae24-996137897c15",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "jesse-and-cookies",
  "tags": [],
  "level": "BEGINNER",
  "title": "Jesse and Cookies",
  "content": "<p>Jesse loves cookies and wants the sweetness of some cookies to be greater than value $k$. To do this, two cookies with the least sweetness are repeatedly mixed. This creates a special combined cookie with:<br />sweetness $=(1 \\times$ Least sweet cookie $+2 \\times 2$ nd least sweet cookie).<br />This occurs until all the cookies have a sweetness $\\geq k$.<br />Given the sweetness of a number of cookies, determine the minimum number of operations required. If it is not possible, return $-1$<br />Example<br />$$<br />\\begin{aligned}<br />&amp;k=9 \\\\<br />&amp;A=[2,7,3,6,4,6]<br />\\end{aligned}<br />$$<br />The smallest values are 2,3 .<br />Remove them then return $2+2 \\times 3=8$ to the array. Now $A=[8,7,6,4,6]$.<br />Remove 4,6 and return $4+6 \\times 2=16$ to the array. Now $A=[16,8,7,6]$.<br />Remove 6,7 , return $6+2 \\times 7=20$ and $A=[20,16,8,7]$.<br />Finally, remove 8,7 and return $7+2 \\times 8=23$ to $A$. Now $A=[23,20,16]$.<br />All values are $\\geq k=9$ so the process stops after 4 iterations. Return 4 .</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>cookies</em>&nbsp;function in the editor below.</p>\n<p><em>cookies</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int k:</em>&nbsp;the threshold value</li>\n<li><em>int A[n]:</em>&nbsp;an array of sweetness values</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em> the number of iterations required or -1<span id=\"MathJax-Element-25-Frame\" class=\"MathJax_SVG\"></span></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line has two space-separated integers, $n$ and $k$, the size of $A[]$ and the minimum required sweetness respectively. The next line contains $n$ space-separated integers, $A[i]$<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 10^{6} \\\\<br />&amp;0 \\leq k \\leq 10^{9} \\\\<br />&amp;0 \\leq A[i] \\leq 10^{6}<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN               Function\n-----               --------\n6 7                 A[] size n = 6, k = 7\n1 2 3 9 10 12       A = [1, 2, 3, 9, 10, 12]  \n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Combine the first two cookies to create a cookie with sweetness $=1 \\times 1+2 \\times 2=5$<br />After this operation, the cookies are $3,5,9,10,12$.<br />Then, combine the cookies with sweetness 3 and sweetness 5 , to create a cookie with resulting sweetness $=1 \\times 3+2 \\times 5=$ 13<br />Now, the cookies are $9,10,12,13$<br />All the cookies have a sweetness $\\geq 7$<br />Thus, 2 operations are required to increase the sweetness.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d288bf38-6280-4af8-afb6-82de9421bb35",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "equal-stacks",
  "tags": [],
  "level": "BEGINNER",
  "title": "Equal Stacks",
  "content": "<p>You have three stacks of cylinders where each cylinder has the same diameter, but they may vary in height. You can change the height of a stack by removing and discarding its topmost cylinder any number of times.</p>\n<p>Find the maximum possible height of the stacks such that all of the stacks are exactly the same height. This means you must remove zero or more cylinders from the top of zero or more of the three stacks until they are all the same height, then return the height.</p>\n<p><strong>Example</strong><br />$$<br />\\begin{aligned}<br />&amp;h 1=[1,2,1,1] \\\\<br />&amp;h 2=[1,1,2] \\\\<br />&amp;h 3=[1,1]<br />\\end{aligned}<br />$$<br />There are 4,3 and 2 cylinders in the three stacks, with their heights in the three arrays. Remove the top 2 cylinders from $h 1$ (heights $=[1,2]$ ) and from $h 2$ (heights $=[1,1]$ ) so that the three stacks all are 2 units tall. Return 2 as the answer.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Note:</strong>&nbsp;An empty stack is still a stack.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>equalStacks</em>&nbsp;function in the editor below.</p>\n<p><em>equalStacks</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int h1[n1]:</em>&nbsp;the first array of heights</li>\n<li><em>int h2[n2]:</em>&nbsp;the second array of heights</li>\n<li><em>int h3[n3]:</em>&nbsp;the third array of heights</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;the height of the stacks when they are equalized</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains three space-separated integers, $n 1, n 2$, and $n 3$, the numbers of cylinders in stacks 1,2, and 3 . The subsequent lines describe the respective heights of each cylinder in a stack from top to bottom:<br />- The second line contains $n 1$ space-separated integers, the cylinder heights in stack 1 . The first element is the top cylinder of the stack.<br />- The third line contains $n 2$ space-separated integers, the cylinder heights in stack 2 . The first element is the top cylinder of the stack.<br />- The fourth line contains $n 3$ space-separated integers, the cylinder heights in stack 3 . The first element is the top cylinder of the stack.<br /><strong>Constraints</strong><br />- $0&lt;n 1, n 2, n 3 \\leq 10^{5}$<br />- $0&lt;$ height of any cylinder $\\leq 100$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>STDIN       Function\n-----       --------\n5 3 4       h1[] size n1 = 5, h2[] size n2 = 3, h3[] size n3 = 4  \n3 2 1 1 1   h1 = [3, 2, 1, 1, 1]\n4 3 2       h2 = [4, 3, 2]\n1 1 4 1     h3 = [1, 1, 4, 1]\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Initially, the stacks look like this:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/21404/1465645257-57311b88de-piles1.png\" alt=\"initial stacks\" /></p>\n<p>To equalize thier heights, remove the first cylinder from stacks 1 and 2, and then remove the top two cylinders from stack 3 (shown below).</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/21404/1465645312-e48f85c176-piles2.png\" alt=\"modified stacks\" /></p>\n<p>The stack heights are reduced as follows:<br />1. $8-3=5$<br />2. $9-4=5$<br />3. $7-1-1=5$<br />All three stacks now have height $=5$, the value to return.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f98ca8fd-5c28-4a6d-8ca4-1bb6e6d7f735",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "self-balancing-tree",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Self Balancing Tree",
  "content": "<p>An AVL tree (Georgy Adelson-Velsky and Landis' tree, named after the inventors) is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property.</p>\n<p>We define balance factor for each node as :</p>\n<pre><code>balanceFactor = height(left subtree) - height(right subtree)\n</code></pre>\n<p>The balance factor of any node of an AVL tree is in the integer range [-1,+1]. If after any modification in the tree, the balance factor becomes less than &minus;1 or greater than +1, the subtree rooted at this node is unbalanced, and a rotation is needed.</p>\n<p><img title=\"AVL_Tree_Rebalancing.svg.png\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1436854305-b167cc766c-AVL_Tree_Rebalancing.svg.png\" /></p>\n<p>(<a href=\"https://en.wikipedia.org/wiki/AVL_tree\">https://en.wikipedia.org/wiki/AVL_tree</a>)</p>\n<p>You are given a pointer to the root of an AVL tree. You need to insert a value into this tree and perform the necessary rotations to ensure that it remains balanced.</p>\n<p><strong>Input Format</strong></p>\n<p>You are given a function,</p>\n<pre><code>node *insert(node * root,int new_val)\n{\n\n\n}\n</code></pre>\n<p>'node' is defined as :</p>\n<pre><code>struct node\n{\nint val;            //value\nstruct node* left;  //left child\nstruct node* right; //right child\nint ht;             //height of the node\n} node;\n</code></pre>\n<p>You only need to complete the function.</p>\n<p>Note: All the values in the tree will be distinct. Height of a Null node is -1 and the height of the leaf node is 0.</p>\n<p><br /><strong>Output Format</strong></p>\n<p>Insert the new value into the tree and return a pointer to the root of the tree. Ensure that the tree remains balanced.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>    3\n  /  \\\n 2    4\n       \\\n        5\n</code></pre>\n<p>The value to be inserted is 6.</p>\n<p><strong>Sample Output</strong></p>\n<pre><code>    3\n  /  \\\n 2    5\n     / \\\n    4   6\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>After inserting 6 in the tree. the tree becomes:</p>\n<pre><code>    3 (Balance Factor = -2)\n  /  \\\n 2    4 (Balance Factor = -2)\n       \\\n        5 (Balance Factor = -1)\n         \\\n          6 (Balance Factor = 0)\n</code></pre>\n<p>Balance Factor of nodes 3 and 4 is no longer in the range [-1,1]. We need to perform a rotation to balance the tree. This is the right right case. We perform a single rotation to balance the tree.</p>\n<p>After performing the rotation, the tree becomes :</p>\n<pre><code>                              3 (Balance Factor = -1)\n                            /   \\\n      (Balance Factor = 0) 2     5 (Balance Factor = 0)\n                                / \\\n           (Balance Factor = 0)4   6 (Balance Factor = 0)</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/31f8b263-5d43-4210-bddf-a4a86fcaa49e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "queue-using-two-stacks",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Queue using Two Stacks",
  "content": "<p>A&nbsp;<a href=\"https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\">queue</a>&nbsp;is an abstract data type that maintains the order in which elements were added to it, allowing the oldest elements to be removed from the front and new elements to be added to the rear. This is called a&nbsp;<em>First-In-First-Out</em>&nbsp;(FIFO) data structure because the first element added to the queue (i.e., the one that has been waiting the longest) is always the first one to be removed.</p>\n<p>A basic queue has the following operations:</p>\n<ul>\n<li><em>Enqueue</em>: add a new element to the end of the queue.</li>\n<li><em>Dequeue</em>: remove the element from the front of the queue and return it.</li>\n</ul>\n<p>In this challenge, you must first implement a queue using two stacks. Then process $q$ queries, where each query is one of the following 3 types:<br />1. $1 \\mathrm{x}$ : Enqueue element $x$ into the end of the queue.<br />2. 2: Dequeue the element at the front of the queue.<br />3. 3: Print the element at the front of the queue.<br />Input Format<br />The first line contains a single integer, $q$, denoting the number of queries.<br />Each line $i$ of the $q$ subsequent lines contains a single query in the form described in the problem statement above. All three queries start with an integer denoting the query type, but only query 1 is followed by an additional space-separated value, $x$, denoting the value to be enqueued.<br />Constraints<br />- $1 \\leq q \\leq 10^{5}$<br />- $1 \\leq$ type $\\leq 3$<br />- $1 \\leq|x| \\leq 10^{9}$<br />- It is guaranteed that a valid answer always exists for each query of type 3 .</p>\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each query of type 3<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, print the value of the element at the front of the queue on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN   Function\n-----   --------\n10      q = 10 (number of queries)\n1 42    1st query, enqueue 42\n2       dequeue front element\n1 14    enqueue 42\n3       print the front element\n1 28    enqueue 28\n3       print the front element\n1 60    enqueue 60\n1 78    enqueue 78\n2       dequeue front element\n2       dequeue front element\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>14\n14\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Perform the following sequence of actions:</p>\n<p>1. Enqueue $42 ;$ queue $=\\{42\\}$.<br />2. Dequeue the value at the head of the queue, $42 ;$ queue $=\\{\\}$.<br />3. Enqueue 14; queue $=\\{14\\}$.<br />4. Print the value at the head of the queue, 14; queue $=\\{14\\}$.<br />5. Enqueue 28; queue $=\\{14,28\\}$.<br />6. Print the value at the head of the queue, 14; queue $=\\{14,28\\}$.<br />7. Enqueue $60 ;$ queue $=\\{14,28,60\\}$.<br />8. Enqueue 78; queue $=\\{14,28,60,78\\}$.<br />9. Dequeue the value at the head of the queue, 14; queue $=\\{28,60,78\\}$.<br />10. Dequeue the value at the head of the queue, 28 ; queue $=\\{60,78\\}$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/70381441-a348-4c38-a79e-39c287b6fa8d",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "components-in-a-graph",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Components in a graph",
  "content": "<p>There are $2 \\times N$ nodes in an undirected graph, and a number of edges connecting some nodes. In each edge, the first value will be between 1 and $N$, inclusive. The second node will be between $N+1$ and $2 \\times N$, inclusive. Given a list of edges, determine the size of the smallest and largest connected components that have 2 or more nodes. A node can have any number of connections. The highest node value will always be connected to at least 1 other node.<br />Note Single nodes should not be considered in the answer.<br /><strong>Example</strong><br />$$<br />b g=[[1,5],[1,6],[2,4]]<br />$$</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1610643454-3d793cb76a-connectedcomponentsexample.svg\" alt=\"image\" /></p>\n<p>The smaller component contains 2 nodes and the larger contains 3 . Return the array $[2,3]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>connectedComponents</em>&nbsp;function in the editor below.</p>\n<p><em>connectedComponents</em>&nbsp;has the following parameter(s):<br />-&nbsp;<em>int bg[n][2]:</em>&nbsp;a 2-d array of integers that represent node ends of graph edges</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>int[2]:</em>&nbsp;an array with 2 integers, the smallest and largest component sizes</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $n$, the size of $b g$.<br />Each of the next $n$ lines contain two space-separated integers, $b g[i][0]$ and $b g[i][1]$.<br /><strong>Constraints</strong><br />- $1 \\leq$ numberofnodes $N \\leq 15000$<br />- $1 \\leq b g[i][0] \\leq N$<br />- $N+1 \\leq b g[i][1] \\leq 2 N$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>STDIN   Function\n-----   --------\n5       bg[] size n = 5\n1 6     bg = [[1, 6],[2, 7], [3, 8], [4,9], [2, 6]]\n2 7\n3 8\n4 9\n2 6\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2 4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1610641145-b423e41655-connectedcomponentssample.svg\" alt=\"image\" /></p>\n<p>Since the component with node 5 contains only one node, it is not considered.<br />The number of vertices in the smallest connected component in the graph is 2 based on either $(3,8)$ or $(4,9)$. The number of vertices in the largest connected component in the graph is 4 i.e. $1-2-6-7$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/aeb8b248-24e4-4b07-8a21-740e69b16dad",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94d9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "balanced-brackets",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Balanced Brackets",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>A bracket is considered to be any one of the following characters:&nbsp;<code>(</code>,&nbsp;<code>)</code>,&nbsp;<code>{</code>,&nbsp;<code>}</code>,&nbsp;<code>[</code>, or&nbsp;<code>]</code>.</p>\n<p>Two brackets are considered to be a&nbsp;<em>matched pair</em>&nbsp;if the an opening bracket (i.e.,&nbsp;<code>(</code>,&nbsp;<code>[</code>, or&nbsp;<code>{</code>) occurs to the left of a closing bracket (i.e.,&nbsp;<code>)</code>,&nbsp;<code>]</code>, or&nbsp;<code>}</code>)&nbsp;<em>of the exact same type</em>. There are three types of matched pairs of brackets:&nbsp;<code>[]</code>,&nbsp;<code>{}</code>, and&nbsp;<code>()</code>.</p>\n<p>A matching pair of brackets is&nbsp;<em>not balanced</em>&nbsp;if the set of brackets it encloses are not matched. For example,&nbsp;<code>{[(])}</code>&nbsp;is not balanced because the contents in between&nbsp;<code>{</code>&nbsp;and&nbsp;<code>}</code>&nbsp;are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket,&nbsp;<code>(</code>, and the pair of parentheses encloses a single, unbalanced closing square bracket,&nbsp;<code>]</code>.</p>\n<p>By this logic, we say a sequence of brackets is&nbsp;<em>balanced</em>&nbsp;if the following conditions are met:</p>\n<ul>\n<li>It contains no unmatched brackets.</li>\n<li>The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.</li>\n</ul>\n<p>Given n<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;strings of brackets, determine whether each sequence of brackets is balanced. If a string is balanced, return&nbsp;<code>YES</code>. Otherwise, return&nbsp;<code>NO</code>.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<em>isBalanced</em>&nbsp;in the editor below.</p>\n<p>isBalanced has the following parameter(s):</p>\n<ul>\n<li><em>string s</em>: a string of brackets</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>string:</em>&nbsp;either&nbsp;<code>YES</code>&nbsp;or&nbsp;<code>NO</code></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains a single integer n<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, the number of strings.<br />Each of the next n<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> lines contains a single string s, a sequence of brackets.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<p>- $1 \\leq n \\leq 10^{3}$<br />- $1 \\leq|s| \\leq 10^{3}$, where $|s|$ is the length of the sequence.<br />- All chracters in the sequences $\\in\\{\\{,\\},(,),[,]$,$} .$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each string, return&nbsp;<code>YES</code>&nbsp;or&nbsp;<code>NO</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN           Function\n-----           --------\n3               n = 3\n{[()]}          first s = '{[()]}'\n{[(])}          second s = '{[(])}'\n{{[[(())]]}}    third s ='{{[[(())]]}}'\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>YES\nNO\nYES\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<ol>\n<li>The string&nbsp;<code>{[()]}</code>&nbsp;meets both criteria for being a balanced string.</li>\n<li>The string&nbsp;<code>{[(])}</code>&nbsp;is not balanced because the brackets enclosed by the matched pair&nbsp;<code>{</code>&nbsp;and&nbsp;<code>}</code>&nbsp;are not balanced:&nbsp;<code>[(])</code>.</li>\n<li>The string&nbsp;<code>{{[[(())]]}}</code>&nbsp;meets both criteria for being a balanced string.</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f1de449f-354b-45af-9115-de0752acbf2a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94da"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "castle-on-the-grid",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Castle on the Grid",
  "content": "<p>You are given a square grid with some cells open (<strong>.</strong>) and some blocked (<strong>X</strong>). Your playing piece can move along any row or column until it reaches the edge of the grid or a blocked cell. Given a grid, a start and a goal, determine the minmum number of moves to get to the goal.</p>\n<p><strong>Example</strong>.</p>\n<p>grid $=\\left[' \\ldots, ' \\cdot \\mathrm{X} .,, \\ldots^{\\prime}\\right]$<br />start $X=0$<br />start $Y=0$<br />goal $X=1$<br />goal $Y=2$</p>\n<p>The grid is shown below:</p>\n<pre><code>...\n.X.\n...</code></pre>\n<p>The starting position $($ start $X$, start $Y)=(0,0)$ so start in the top left corner. The goal is $($ goal $X$, goal $Y)=(1,2)$. The path is $(0,0) \\rightarrow(0,2) \\rightarrow(1,2)$. It takes 2 moves to reach the goal.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>minimumMoves</em>&nbsp;function in the editor.</p>\n<p>minimumMoves has the following parameter(s):</p>\n<ul>\n<li><em>string grid[n]:</em>&nbsp;an array of strings that represent the rows of the grid</li>\n<li><em>int startX:</em>&nbsp;starting X coordinate</li>\n<li><em>int startY:</em>&nbsp;starting Y coordinate</li>\n<li><em>int goalX:</em>&nbsp;ending X coordinate</li>\n<li><em>int goalY:</em>&nbsp;ending Y coordinate</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int:</em>&nbsp;the minimum moves to reach the goal</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $n$, the size of the array grid.<br />Each of the next $n$ lines contains a string of length $n$.<br />The last line contains four space-separated integers, startX, startY, goalX, goalY<br />Constraints<br />- $1 \\leq n \\leq 100$<br />- $0 \\leq$ start $X$, start $Y$, goalX, goal $Y&lt;n$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>STDIN       FUNCTION\n-----       --------\n3           grid[] size n = 3\n.X.         grid = ['.X.','.X.', '...']\n.X.\n...\n0 0 0 2     startX = 0, startY = 0, goalX = 0, goalY = 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">Here is a path that one could follow in order to reach the destination in 3 steps:<br />$$<br />(0,0) \\rightarrow(2,0) \\rightarrow(2,2) \\rightarrow(0,2)<br />$$</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/8ffe661a-9bd1-489a-9437-cd4801d60071",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94db"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 40,
  "slug": "down-to-zero-ii",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Down to Zero II",
  "content": "<p>You are given $Q$ queries. Each query consists of a single number $N$. You can perform any of the 2 operations on $N$ in each move:<br />1: If we take 2 integers $a$ and $b$ where $N=a \\times b(a \\neq 1, b \\neq 1)$, then we can change $N=\\max (a, b)$<br />2: Decrease the value of $N$ by 1 .<br />Determine the minimum number of moves required to reduce the value of $N$ to 0 .<br />Input Format<br />The first line contains the integer $Q$.<br />The next $Q$ lines each contain an integer, $N$.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq Q \\leq 10^{3} \\\\<br />&amp;0 \\leq N \\leq 10^{6}<br />\\end{aligned}<br />$$<br />Output Format<br />Output $Q$ lines. Each line containing the minimum number of moves required to reduce the value of $N$ to 0 .</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n3\n4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>For test case 1, We only have one option that gives the minimum number of moves.</p>\n<p>Follow 3 -&gt; 2 -&gt; $1-&gt;0$. Hence, 3 moves.<br />For the case 2 , we can either go $4-&gt;3-&gt;2-&gt;1-&gt;0$ or $4-&gt;2-&gt;1-&gt;0$. The 2nd option is more optimal. Hence, 3 moves.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d9016b43-cac6-4f7b-9e93-c8d34daaf396",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94dc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "game-of-two-stacks",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Game of Two Stacks",
  "content": "<p>Alexa has two stacks of non-negative integers, stack $a[n]$ and stack $b[m]$ where index 0 denotes the top of the stack. Alexa challenges Nick to play the following game:<br />- In each move, Nick can remove one integer from the top of either stack $a$ or stack $b$.<br />- Nick keeps a running sum of the integers he removes from the two stacks.<br />- Nick is disqualified from the game if, at any point, his running sum becomes greater than some integer maxSum given at the beginning of the game.<br />- Nick's final score is the total number of integers he has removed from the two stacks.<br />Given $a, b$, and $\\max S u m$ for $g$ games, find the maximum possible score Nick can achieve.<br />Example<br />$$<br />\\begin{aligned}<br />&amp;a=[1,2,3,4,5] \\\\<br />&amp;b=[6,7,8,9]<br />\\end{aligned}<br />$$<br />The maximum number of values Nick can remove is 4 . There are two sets of choices with this result.<br />1. Remove $1,2,3,4$ from $a$ with a sum of 10 .<br />2. Remove $1,2,3$ from $a$ and 6 from $b$ with a sum of 12 .</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>twoStacks</em>&nbsp;function in the editor below.</p>\n<p><em>twoStacks</em>&nbsp;has the following parameters: -&nbsp;<em>int maxSum:</em>&nbsp;the maximum allowed sum<br />-&nbsp;<em>int a[n]:</em>&nbsp;the first stack<br />-&nbsp;<em>int b[m]:</em>&nbsp;the second stack</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>int:</em>&nbsp;the maximum number of selections Nick can make</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $g$ (the number of games). The $3 \\cdot g$ subsequent lines describe each game in the following format:<br />1. The first line contains three space-separated integers describing the respective values of $n$ (the number of integers in stack $a$ ), $m$ (the number of integers in stack $b$ ), and $\\max S u m$ (the number that the sum of the integers removed from the two stacks cannot exceed).<br />2. The second line contains $n$ space-separated integers, the respective values of $a[i]$.<br />3. The third line contains $m$ space-separated integers, the respective values of $b[i]$.<br />Constraints<br />- $1 \\leq g \\leq 50$<br />- $1 \\leq n, m \\leq 10^{5}$<br />- $0 \\leq a[i], b[i] \\leq 10^{6}$<br />- $1 \\leq \\operatorname{maxSum} \\leq 10^{9}$<br />Subtasks<br />- $1 \\leq n, m, \\leq 100$ for $50 \\%$ of the maximum score.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">1</span>\n<span class=\"err\">5 4 10</span>\n<span class=\"err\">4 2 4 6 1</span>\n<span class=\"err\">2 1 8 5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">4</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The two stacks initially look like this:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1485853935-9b24f12026-twoarray3.png\" alt=\"image\" /></p>\n<p>The image below depicts the integers Nick should choose to remove from the stacks. We print 4 as our answer, because that is the maximum number of integers that can be removed from the two stacks without the sum exceeding $x=10$.</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1485849154-50c4a29f7d-twoarray2.png\" alt=\"image\" /></p>\n<p>(There can be multiple ways to remove the integers from the stack, the image shows just one of them.)</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a3c17afa-0099-44a4-a95d-7bf3a6b7dd5f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94dd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "largest-rectangle",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Largest Rectangle",
  "content": "<p>Skyline Real Estate Developers is planning to demolish a number of old, unoccupied buildings and construct a shopping mall in their place. Your task is to find the largest solid area in which the mall can be constructed.<br />There are a number of buildings in a certain two-dimensional landscape. Each building has a height, given by $h[i]$ where $i \\in[1, n]$. If you join $k$ adjacent buildings, they will form a solid rectangle of area $\\left.k \\times \\min \\left(h[i], h[i+1], \\ldots, h_{[} i+k-1\\right]\\right)$<br />Example<br />$$<br />h=[3,2,3]<br />$$<br />A rectangle of height $h=2$ and length $k=3$ can be constructed within the boundaries. The area formed is $h \\cdot k=2 \\cdot 3=6$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the function&nbsp;<code>largestRectangle</code>&nbsp;int the editor below. It should return an integer representing the largest rectangle that can be formed within the bounds of consecutive buildings.</p>\n<p>largestRectangle has the following parameter(s):</p>\n<ul>\n<li><em>int h[n]:</em>&nbsp;the building heights</li>\n</ul>\n<p><strong>Returns</strong><br />-&nbsp;<em>long:</em>&nbsp;the area of the largest rectangle that can be formed within the bounds of consecutive buildings</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">The first line contains $n$, the number of buildings.<br />The second line contains $n$ space-separated integers, each the height of a building.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $1 \\leq h[i] \\leq 10^{6}$</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN       Function\n-----       --------\n5           h[] size n = 5\n1 2 3 4 5   h = [1, 2, 3, 4, 5]\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>9\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>An illustration of the test case follows.<br /><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/8136/1436794554-75e178e325-drawing47.svg\" alt=\"image\" /></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/8298c572-9b95-487d-aae8-356a55a06ee3",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94de"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 65,
  "slug": "simple-text-editor",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Simple Text Editor",
  "content": "<p>Implement a simple text editor. The editor initially contains an empty string, $S$. Perform $Q$ operations of the following 4 types:<br />1. append $(W)$ - Append string $W$ to the end of $S$.<br />2. delete $(k)$ - Delete the last $k$ characters of $S$<br />3. print $(k)$ - Print the $k^{\\text {th }}$ character of $S$.<br />4. undo() - Undo the last (not previously undone) operation of type 1 or 2 , reverting $S$ to the state it was in prior to that operation.</p>\n<p><strong>Example</strong><br />$S=$ 'abcde'<br />ops $=\\left[, 1 f g^{\\prime},, 36^{\\prime},, 25,, 4,,, 37,,, 4,, 34^{\\prime}\\right]$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<pre>operation\nindex   S       ops[index]  explanation\n-----   ------  ----------  -----------\n0       abcde   1 fg        append fg\n1       abcdefg 3 6         print the 6th letter - f\n2       abcdefg 2 5         delete the last 5 letters\n3       ab      4           undo the last operation, index 2\n4       abcdefg 3 7         print the 7th characgter - g\n5       abcdefg 4           undo the last operation, index 0\n6       abcde   3 4         print the 4th character - d\n</pre>\n<p>The results should be printed as:</p>\n<pre><code>f\ng\nd\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $Q$, denoting the number of operations.<br />Each line $i$ of the $Q$ subsequent lines (where $0 \\leq i&lt;Q$ ) defines an operation to be performed. Each operation starts with a single integer, $t$ (where $t \\in\\{1,2,3,4\\}$ ), denoting a type of operation as defined in the Problem Statement above. If the operation requires an argument, $t$ is followed by its space-separated argument. For example, if $t=1$ and $W=\"$ abcd\", line $i$ will be 1 abcd.<br />Constraints<br />- $1 \\leq Q \\leq 10^{6}$<br />- $1 \\leq k \\leq|S|$<br />- The sum of the lengths of all $W$ in the input $\\leq 10^{6}$.<br />- The sum of $k$ over all delete operations $\\leq 2 \\cdot 10^{6}$.<br />- All input characters are lowercase English letters.<br />- It is guaranteed that the sequence of operations given as input is possible to perform.<br />Output Format<br />Each operation of type 3 must print the $k^{t h}$ character on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN   Function\n-----   --------\n8       Q = 8\n1 abc   ops[0] = '1 abc'\n3 3     ops[1] = '3 3'\n2 3     ...\n1 xy\n3 2\n4 \n4 \n3 1\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>c\ny\na\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Initially, $S$ is empty. The following sequence of 8 operations are described below:<br />1. $S=\" \\%$. We append $a b c$ to $S$, so $S=\" a b c^{\\prime \\prime}$.<br />2. Print the $3^{r d}$ character on a new line. Currently, the $3^{r d}$ character is $c$.<br />3. Delete the last 3 characters in $S(a b c)$, so $S=\"$ \".<br />4. Append $x y$ to $S$, so $S=\" x y \"$.<br />5. Print the $2^{n d}$ character on a new line. Currently, the $2^{n d}$ character is $y$.<br />6. Undo the last update to $S$, making $S$ empty again (i.e., $S=\"$ \" ).<br />7. Undo the next to last update to $S$ (the deletion of the last 3 characters), making $S={ }^{\\prime \\prime} \\mathrm{abc}^{\\prime \\prime}$.<br />8. Print the $1^{\\text {st }}$ character on a new line. Currently, the $1^{s t}$ character is a.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a4ec0e13-fc4e-487e-917f-d91836601889",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94df"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 75,
  "slug": "waiter",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Waiter",
  "content": "<p>You are a waiter at a party. There is a pile of numbered plates. Create an empty answers array. At each iteration, $i$, remove each plate from the top of the stack in order. Determine if the number on the plate is evenly divisible by the $i^{t} h$ prime number. If it is, stack it in pile $B_{i}$. Otherwise, stack it in stack $A_{i}$. Store the values in $B_{i}$ from top to bottom in answers. In the next iteration, do the same with the values in stack $A_{i}$. Once the required number of iterations is complete, store the remaining values in $A_{i}$ in answers, again from top to bottom. Return the answers array.<br />Example<br />$$<br />\\begin{aligned}<br />&amp;A=[2,3,4,5,6,7] \\\\<br />&amp;q=3<br />\\end{aligned}<br />$$<br />An abbreviated list of primes is $[2,3,5,7,11,13]$. Stack the plates in reverse order.<br />$$<br />A_{0}=[2,3,4,5,6,7]<br />$$<br />$$<br />\\text { answers }=[]<br />$$<br />Begin iterations. On the first iteration, check if items are divisible by 2 .<br />$$<br />\\begin{aligned}<br />A_{1} &amp;=[7,5,3] \\\\<br />B_{1} &amp;=[6,4,2]<br />\\end{aligned}<br />$$<br />Move $B_{1}$ elements to answers.<br />answers $=[2,4,6]$<br />On the second iteration, test if $A_{1}$ elements are divisible by 3 .<br />$$<br />\\begin{aligned}<br />A_{2} &amp;=[7,5] \\\\<br />B_{2} &amp;=[3]<br />\\end{aligned}<br />$$</p>\n<p>Move $B_{2}$ elmements to answers.<br />answers $=[2,4,6,3]$<br />And on the third iteration, test if $A_{2}$ elements are divisible by 5 .<br />$$<br />\\begin{aligned}<br />&amp;A_{3}=[7] \\\\<br />&amp;B_{3}=[5]<br />\\end{aligned}<br />$$<br />Move $B_{2}$ elmements to answers.<br />answers $=[2,4,6,3,5]$<br />All iterations are complete, so move the remaining elements in $A_{3}$, from top to bottom, to answers. answers $=[2,4,6,3,5,7]$. Return this list.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>waiter</em>&nbsp;function in the editor below.</p>\n<p><em>waiter</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int number[n]:</em>&nbsp;the numbers on the plates</li>\n<li><em>int q:</em>&nbsp;the number of iterations</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[n]:</em>&nbsp;the numbers on the plates after processing</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space separated integers, $n$ and $q$.<br />The next line contains $n$ space separated integers representing the initial pile of plates, i.e., $A$. Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 5 \\times 10^{4} \\\\<br />&amp;2 \\leq \\text { number }[i] \\leq 10^{4} \\\\<br />&amp;1 \\leq q \\leq 1200<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5 1</span>\n<span class=\"err\">3 4 7 6 5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">4</span>\n<span class=\"err\">6</span>\n<span class=\"err\">3</span>\n<span class=\"err\">7</span>\n<span class=\"err\">5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Initially:</p>\n<p>$$<br />A=[3,4,7,6,5]&lt;-T O P<br />$$<br />After 1 iteration (divide by 2 , the 1 st prime number):<br />$$<br />\\begin{aligned}<br />&amp;A_{1}=[5,7,3]&lt;-\\mathrm{TOP} \\\\<br />&amp;B_{1}=[6,4]&lt;\\text {-TOP }<br />\\end{aligned}<br />$$<br />Move $B_{1}$ elements to answers.<br />answers $=[4,6]$<br />All iterations are complete, so move $A_{1}$ elements to answers.<br />answers $=[4,6,3,7,5] .$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5 2</span>\n<span class=\"err\">3 3 4 4 9</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">4</span>\n<span class=\"err\">4</span>\n<span class=\"err\">9</span>\n<span class=\"err\">3</span>\n<span class=\"err\">3</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 1</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Initially:</p>\n<p>$$<br />A=[3,3,4,4,9]&lt;-\\text { TOP }<br />$$<br />After $1^{s t}$ iteration (divide by 2 ):<br />$$<br />\\begin{aligned}<br />&amp;A_{1}=[9,3,3]&lt;-\\mathrm{TOP} \\\\<br />&amp;B_{1}=[4,4]&lt;\\text {-TOP }<br />\\end{aligned}<br />$$<br />Move $B_{1}$ to answers.<br />answers $=[4,4]$<br />After $2^{n d}$ iteration (divide by 3 ):<br />$$<br />\\begin{aligned}<br />&amp;A_{2}=[]&lt;-\\mathrm{TOP} \\\\<br />&amp;B_{2}=[3,3,9]&lt;-\\mathrm{TOP}<br />\\end{aligned}<br />$$<br />Move $B_{2}$ elements to answers.<br />answers $=[4,4,9,3,3]$<br />There are no values remaining in $A_{2}$.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3a938e13-e800-433e-b514-28d79b7ffbd3",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 40,
  "slug": "contacts",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Contacts",
  "content": "<p>We're going to make our own Contacts application! The application must perform two types of operations:<br />1. add name, where name is a string denoting a contact name. This must store name as a new contact in the application.<br />2. find partial, where partial is a string denoting a partial name to search the application for. It must count the number of contacts starting with partial and print the count on a new line.<br />Given $n$ sequential add and find operations, perform each operation in order.</p>\n<p><strong>Example</strong><br />Operations are requested as follows:</p>\n<pre>add ed\nadd eddie\nadd edward\nfind ed\nadd edwina\nfind edw\nfind a</pre>\n<p>Three $a d d$ operations include the names 'ed', 'eddie', and 'edward'. Next, find ed matches all 3 names. Note that it matches and counts the entire name 'ed'. Next, add 'edwina' and then find 'edw'. 2 names match: 'edward' and 'edwina'. In the final operation, there are 0 names that start with 'a'. Return the array $[3,2,0]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>contacts</em>&nbsp;function below.</p>\n<p><em>contacts</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>string queries[n]:</em>&nbsp;the operations to perform</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[]:</em>&nbsp;the results of each find operation</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains a single integer, $n$, the number of operations to perform (the size of queries [] ). Each of the following $n$ lines contains a string, queries $[i]$.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $1 \\leq$ length of name $\\leq 21$<br />- $1 \\leq$ length of partial $\\leq 21$<br />- name and partial contain lowercase English letters only.<br />- The input does not have any duplicate name for the add operation.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN           Function\n-----           --------\n4               queries[] size n = 4\nadd hack        queries = ['add hack', 'add hackerrank', 'find hac', 'find hak']\nadd hackerrank\nfind hac\nfind hak\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n0\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<ol>\n<li>Add a contact named&nbsp;<code>hack</code>.</li>\n<li>Add a contact named&nbsp;<code>hackerrank</code>.</li>\n<li>Find the number of contact names beginning with&nbsp;<code>hac</code>. Both name start with&nbsp;<code>hac</code>, add 2<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;to the return array.</li>\n<li>Find the number of contact names beginning with&nbsp;<code>hak</code>. neither name starts with&nbsp;<code>hak</code>, add 0<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;to the return array.</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7856a4d8-a803-4d3f-aad3-95a3be25c7da",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "kindergarten-adventures",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Kindergarten Adventures",
  "content": "<p>Meera teaches a class of $n$ students, and every day in her classroom is an adventure. Today is drawing day!<br />The students are sitting around a round table, and they are numbered from 1 to $n$ in the clockwise direction. This means that the students are numbered $1,2,3, \\ldots, n-1, n$, and students 1 and $n$ are sitting next to each other.</p>\n<p>After letting the students draw for a certain period of time, Meera starts collecting their work to ensure she has time to review all the drawings before the end of the day. However, some of her students aren't finished drawing! Each student $i$ needs $t_{i}$ extra minutes to complete their drawing.<br />Meera collects the drawings sequentially in the clockwise direction, starting with student ID $x$, and it takes her exactly 1 minute to review each drawing. This means that student $x$ gets 0 extra minutes to complete their drawing, student $x+1$ gets 1 extra minute, student $x+2$ gets 2 extra minutes, and so on. Note that Meera will still spend 1 minute for each student even if the drawing isn't ready.<br />Given the values of $t_{1}, t_{2}, \\ldots, t_{n}$, help Meera choose the best possible $x$ to start collecting drawings from, such that the number of students able to complete their drawings is maximal. Then print $x$ on a new line. If there are multiple such IDs, select the smallest one.<br />Input Format<br />The first line contains a single positive integer, $n$, denoting the number of students in the class.<br />The second line contains $n$ space-separated integers describing the respective amounts of time that each student needs to finish their drawings (i.e., $\\left.t_{1}, t_{2}, \\ldots, t_{n}\\right)$<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $0 \\leq t_{i} \\leq n$</p>\n<p>Subtasks<br />- $1 \\leq n \\leq 10^{4}$ for $30 \\%$ of the maximum score.<br />Output Format<br />Print an integer denoting the ID number, $x$, where Meera should start collecting the drawings such that a maximal number of students can complete their drawings. If there are multiple such IDs, select the smallest one.</p>\n<p><strong>Sample Input&nbsp;1</strong></p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/08daa2ec-75db-439f-93bf-3b615b6ec0f7\" alt=\"Screen Shot 2021-10-19 at 2\" /></p>\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;1</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>2</div>\n<pre><code></code></pre>\n</div>\n</div>\n<div class=\"challenge-sample-explanation-title\">\n<p><strong>Explanation&nbsp;1</strong></p>\n<p>&nbsp;</p>\n<p>Meera's class has $n=3$ students:<br />1. If $x=1$, then only two students will finish.<br />The first student needs $t_{1}=1$ extra minute to complete their drawing. If Meera starts collecting here, this student will never finish their drawing. Students 2 and 3 's drawings are already finished, so their drawings are ready when she collects them in the second and third minutes.<br />2. If $x=2$, then all three students will finish.<br />The second student needs $t_{2}=0$ extra minutes, so the drawing is ready for Meera to collect. The next (third) student's drawing is also ready one minute later, as $t_{3}=0$. Meera then proceeds to the next (first) student, who needed $t_{1}=1$ extra minute. Because she already spent two minutes collecting the work of the other two students, the first student's drawing has already been completed for $2-1=1$ minute.<br />3. If $x=3$, then all three students will finish.<br />The third student needs $t_{3}=0$ extra minutes, so the drawing is ready for Meera to collect. The next (first) student's drawing is also ready one minute later, as $t_{1}=1$ and 1 minute passed while Meera collected the third student's drawing. She then proceeds to the next (second) student, whose drawing was already completed (as $t_{2}=0$ )</p>\n<p>Starting with student IDs $x=2$ or $x=3$ will result in a maximum number of completed drawings (i.e., 3 ). Because there are two equally valid answers, we choose the smaller ID, 2, and print it as our answer.</p>\n<p><strong>Sample Input&nbsp;2</strong></p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/42dd8860-4a5a-44c6-a7f2-50d46f2f3df8\" alt=\"Screen Shot 2021-10-19 at 2\" /></p>\n<div class=\"challenge-sample-output-title\">\n<p><strong>Sample Output&nbsp;2</strong></p>\n</div>\n<div class=\"challenge-sample-output-body\">\n<div class=\"visual-hackdown-content\">\n<pre><code></code></pre>\n<div>1</div>\n<pre><code></code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/abe16619-ecf6-4abc-8b4e-7c5e5a78760b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "mr-x-and-his-shots",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Mr. X and His Shots",
  "content": "<p>A cricket match is going to be held. The field is represented by a 1D plane. A cricketer, Mr. $X$ has $N$ favorite shots. Each shot has a particular range. The range of the $i^{\\text {th }}$ shot is from $A_{i}$ to $B_{\\text {. }}$. That means his favorite shot can be anywhere in this range. Each player on the opposite team can field only in a particular range. Player $i$ can field from $C_{\\mathrm{i}}$ to $D_{\\mathrm{i}}$. You are given the $N$ favorite shots of Mr. $X$ and the range of $M$ players.<br />$S i$ represents the strength of each player i.e. the number of shots player $i$ can stop.<br />Your task is to find:<br />$$<br />\\left(\\sum_{i=1}^{m} S i\\right)<br />$$<br />Game Rules: A player can stop the $i^{t h}$ shot if the range overlaps with the player's fielding range.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>For more clarity about overlapping, study the following figure:</p>\n<p><img title=\"L.png\" src=\"https://s3.amazonaws.com/hr-challenge-images/8943/1441719277-9d9c50f731-L.png\" /></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line consists of two space separated integers, $N$ and $M$.<br />Each of the next $N$ lines contains two space separated integers. The $i^{t h}$ line contains $A_{i}$ and $B_{i}$. Each of the next $M$ lines contains two integers. The $i^{t h}$ line contains integers $C_{i}$ and $D_{i}$<br />Output Format<br />You need to print the sum of the strengths of all the players: $\\left(\\sum_{i=1}^{m} S i\\right)$.<br />Constraints:<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq N, M \\leq 10^{5} \\\\<br />&amp;1 \\leq A_{i}, B_{i}, C_{i}, D_{i} \\leq 10^{8}<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>4 4                \n1 2 \n2 3\n4 5\n6 7\n1 5\n2 3\n4 7\n5 7   \n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>9\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Player 1 can stop the 1 st, 2 nd and $3 r d$ shot so the strength is 3 .<br />Player 2 can stop the 1 st and 2 nd shot so the strength is 2 .<br />Player 3 can stop the 3 and 4 th shot so the strength is 2 .<br />Player 4 can stop the 3 rd and 4 th shot so the strength is 2 .<br />The sum of the strengths of all the players is $3+2+2+2=9$.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/03b3e5b3-a32c-41e7-9efd-2c96afe39ece",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "jim-and-the-skyscrapers",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Jim and the Skyscrapers",
  "content": "<p>Jim has invented a new flying object called HZ42. HZ42 is like a broom and can only fly horizontally, independent of the environment. One day, Jim started his flight from Dubai's highest skyscraper, traveled some distance and landed on another skyscraper of same height! So much fun! But unfortunately, new skyscrapers have been built recently.<br />Let us describe the problem in one dimensional space. We have in total $N$ skyscrapers aligned from left to right. The $i^{\\text {th }}$ skyscraper has a height of $h_{i}$. A flying route can be described as $(i, j)$ with $i \\neq j$, which means, Jim starts his HZ42 at the top of the skyscraper $i$ and lands on the skyscraper $j$. Since HZ42 can only fly horizontally, Jim will remain at the height $h_{i}$ only. Thus the path $(i, j)$ can be valid, only if each of the skyscrapers $i, i+1, \\ldots, j-1, j$ is not strictly greater than $h_{i}$ and if the height of the skyscraper he starts from and arrives on have the same height. Formally, $(i, j)$ is valid iff $\\nexists k \\in[i, j]: h_{k}&gt;h_{i}$ and $h_{i}=h_{j}$<br />Help Jim in counting the number of valid paths represented by ordered pairs $(i, j)$.<br />Input Format<br />The first line contains $N$, the number of skyscrapers. The next line contains $N$ space separated integers representing the heights of the skyscrapers.<br />Output Format<br />Print an integer that denotes the number of valid routes.<br />Constraints<br />$1 \\leq N \\leq 3 \\cdot 10^{5}$ and no skyscraper will have height greater than $10^{6}$ and less than 1</p>\n<p><strong>Sample Input #00</strong></p>\n<pre><code>6\n3 2 1 2 3 3\n</code></pre>\n<p><strong>Sample Output #00</strong></p>\n<pre><code>8\n</code></pre>\n<p><strong>Sample Input #01</strong></p>\n<pre><code>3\n1 1000 1\n</code></pre>\n<p><strong>Sample Output #01</strong></p>\n<pre><code>0\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>First testcase: (1, 5), (1, 6) (5, 6) and (2, 4) and the routes in the opposite directions are the only valid routes.</p>\n<p>Second testcase: (1, 3) and (3, 1) could have been valid, if there wasn't a big skyscraper with height 1000 between them.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7294f6e4-bbaf-485c-affd-ece684f49406",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 100,
  "slug": "find-maximum-index-product",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Find Maximum Index Product",
  "content": "<p>You are given a list of $N$ numbers $a_{1}, a_{2}, \\ldots, a_{n}$. For each element at position $i(1 \\leq i \\leq N)$, we define $\\operatorname{Left}(i)$ and $\\operatorname{Right}(i)$ as:<br />$\\operatorname{Left}(i)=$ closest index $j$ such that $j&lt;i$ and $a_{j}&gt;a_{i}$. If no such $j$ exists then $\\operatorname{Left}(i)=0$<br />$\\operatorname{Right}(i)=$ closest index $\\mathrm{k}$ such that $\\mathrm{k}&gt;\\mathrm{i}$ and $a_{k}&gt;a_{i}$. If no such $\\mathrm{k}$ exists then $\\operatorname{Right}(i)=0$<br />We define IndexProduct $(i)=\\operatorname{Left}(i) * \\operatorname{Right}(i)$. You need to find out the maximum IndexProduct $(i)$ among all $\\mathrm{i} .$<br /><strong>Input Format</strong><br />The first line contains an integer $N$, the number of integers. The next line contains the $N$ integers describing the list a[1..N].<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq N \\leq 10^{5} \\\\<br />&amp;1 \\leq a_{i} \\leq 10^{9}<br />\\end{aligned}<br />$$<br /><strong>Output Format</strong><br />Output the maximum IndexProduct among all indices from 1 to $N$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n5 4 3 4 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>8\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We can compute the following:</p>\n<p>IndexProduct $(1)=0$<br />IndexProduct $(2)=1 \\times 5=5$<br />IndexProduct $(3)=2 \\times 4=8$<br />IndexProduct $(4)=1 \\times 5=5$<br />IndexProduct $(5)=0$<br />The largest of these is 8, so it is the answer</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a4e57ec2-03d2-43aa-bd24-bfa6640fa993",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 80,
  "slug": "array-and-simple-queries",
  "tags": [],
  "level": "EXPERT",
  "title": "Array and simple queries",
  "content": "<p>Given two numbers $N$ and $M . N$ indicates the number of elements in the array $A[](1-$ indexed $)$ and $M$ indicates number of queries. You need to perform two types of queries on the array $A[]$.<br />You are given $M$ queries. Queries can be of two types, type $\\mathbf{1}$ and type $\\mathbf{2}$.<br />- Type 1 queries are represented as $1 \\quad i j$ jodify the given array by removing elements from $i$ to $j$ and adding them to the front.<br />- Type 2 queries are represented as 2 i j : Modify the given array by removing elements from $i$ to $j$ and adding them to the back.<br />Your task is to simply print $|A[1]-A[N]|$ of the resulting array after the execution of $M$ queries followed by the resulting array.<br />Note While adding at back or front the order of elements is preserved.<br />Input Format<br />First line consists of two space-separated integers, $N$ and $M$.<br />Second line contains $N$ integers, which represent the elements of the array.<br />$M$ queries follow. Each line contains a query of either type 1 or type 2 in the form type $i j$<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq N, M \\leq 10^{5} \\\\<br />&amp;1 \\leq A[i] \\leq 10^{9} \\\\<br />&amp;1 \\leq i \\leq j \\leq N<br />\\end{aligned}<br />$$</p>\n<p>Output Format<br />Print the absolute value i.e. $a b s(A[1]-A[N])$ in the first line.<br />Print elements of the resulting array in the second line. Each element should be seperated by a single space.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>8 4\n1 2 3 4 5 6 7 8\n1 2 4\n2 3 5\n1 4 7\n2 1 4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n2 3 6 5 7 8 4 1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">Given array is $\\{1,2,3,4,5,6,7,8\\}$.<br />After execution of query 124 , the array becomes $\\{2,3,4,1,5,6,7,8\\}$.<br />After execution of query 235 , the array becomes $\\{2,3,6,7,8,4,1,5\\}$.<br />After execution of query 147 , the array becomes $\\{7,8,4,1,2,3,6,5\\}$.<br />After execution of query 214, the array becomes $\\{2,3,6,5,7,8,4,1\\}$.<br />Now $|A[1]-A[N]|$ is $|(2-1)|$ i.e. 1 and the array is 23657841</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/44eeee0c-9495-4df8-b977-5007fcde6749",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 70,
  "slug": "median-updates",
  "tags": [],
  "level": "EXPERT",
  "title": "Median Updates",
  "content": "<p>The median of $M$ numbers is defined as the middle number after sorting them in order if $M$ is odd. Or it is the average of the middle two numbers if $M$ is even. You start with an empty number list. Then, you can add numbers to the list, or remove existing numbers from it. After each add or remove operation, output the median.<br /><strong>Example:</strong><br />For a set of $M=5$ numbers $9,2,8,4,1$ the median is the third number in the sorted set $1,2,4,8,9$, which is 4 . Similarly, for a set of $M=4$ numbers, $5,2,10,4$, the median is the average of the second and the third element in the sorted set $2,4,5,10$, which is $(4+5) / 2=4.5$<br /><strong>Input:</strong><br />The first line is an integer, $N$, that indicates the number of operations. Each of the next $N$ lines is either a $x$ or $r x$. a $x$ indicates that $x$ is added to the set, and $r \\times$ indicates that $x$ is removed from the set.<br /><strong>Output:</strong><br />For each operation: If the operation is add, output the median after adding $x$ in a single line. If the operation is remove and the number $x$ is not in the list, output Wrong! in a single line. If the operation is remove and the number $x$ is in the list, output the median after deleting $x$ in a single line. (If the result is an integer DO NOT output decimal point. And if the result is a real number, DO NOT output trailing 0s.)</p>\n<p><strong>Note</strong><br />If your median is $3.0$, print only 3 . And if your median is $3.50$, print only $3.5$. Whenever you need to print the median and the list is empty, print Wrong!<br /><strong>Constraints:</strong><br />$$<br />0&lt;N \\leq 10^{5}<br />$$<br />For each a $x$ or $r x, x$ will always be a signed integer (which will fit in 32 bits).</p>\n<p><strong>Sample Input:</strong></p>\n<pre><code>7  \nr 1  \na 1  \na 2  \na 1  \nr 1  \nr 2  \nr 1  \n</code></pre>\n<p><strong>Sample Output:</strong></p>\n<pre><code>Wrong!  \n1  \n1.5  \n1  \n1.5  \n1  \nWrong!\n</code></pre>\n<p><strong>Note:</strong>&nbsp;As evident from the last line of the input, if after remove operation the list becomes empty, you have to print&nbsp;<em>Wrong!</em>.&nbsp;</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b92ed965-1b7f-415e-bc42-dfdf6433939e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "merging-communities",
  "tags": [],
  "level": "EXPERT",
  "title": "Merging Communities",
  "content": "<p>People connect with each other in a social network. A connection between Person $i$ and Person $j$ is represented as $\\mathrm{M}$ i $\\mathbf{j}$. When two persons belonging to different communities connect, the net effect is the merge the communities which $i$ and $j$ belong to. At the beginning, there are $n$ people representing $n$ communities. Suppose person 1 and 2 connected and later 2 and 3 connected, then 1,2, and 3 will belong to the same community.<br />There are two types of queries:<br />1. $\\mathrm{M} \\mathrm{i} \\mathrm{j} \\Longrightarrow$ communities containing persons $i$ and $j$ are merged if they belong to different communities.<br />2. Q i $\\Longrightarrow$ print the size of the community to which person $i$ belongs.<br /><strong>Input Format</strong><br />The first line of input contains 2 space-separated integers $n$ and $q$, the number of people and the number of queries. The next $q$ lines will contain the queries.<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 10^{5} \\\\<br />&amp;1 \\leq q \\leq 2 \\times 10^{5}<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>The output of the queries.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<p>STDIN Function ----- -------- 3 6 n = 3, q = 6 Q 1 print the size of the community containing person 1 M 1 2 merge the communities containing persons 1 and 2 ... Q 2 M 2 3 Q 3 Q 2</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n2\n3\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Initial size of each of the community is 1<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/670e94cc-631c-4e9c-b516-b2757054cb9a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 80,
  "slug": "kundu-and-tree",
  "tags": [],
  "level": "EXPERT",
  "title": "Kundu and Tree",
  "content": "<p>Kundu is true tree lover. Tree is a connected graph having&nbsp;<em>N</em>&nbsp;vertices and&nbsp;<em>N-1</em>&nbsp;edges. Today when he got a tree, he colored each edge with one of either red(<code>r</code>) or black(<code>b</code>) color. He is interested in knowing how many triplets(a,b,c) of vertices are there , such that, there is atleast one edge having red color on all the three paths i.e. from vertex&nbsp;<em>a</em>&nbsp;to&nbsp;<em>b</em>, vertex&nbsp;<em>b</em>&nbsp;to&nbsp;<em>c</em>&nbsp;and vertex&nbsp;<em>c</em>&nbsp;to&nbsp;<em>a</em>&nbsp;. Note that (a,b,c), (b,a,c) and all such permutations will be considered as the same triplet.</p>\n<p>If the answer is greater than 10<sup>9</sup>&nbsp;+ 7, print the answer modulo (%) 10<sup>9</sup>&nbsp;+ 7.</p>\n<p><strong>Input Format</strong><br />The first line contains an integer&nbsp;<em>N</em>, i.e., the number of vertices in tree.<br />The next&nbsp;<em>N-1</em>&nbsp;lines represent edges: 2 space separated integers denoting an edge followed by a color of the edge. A color of an edge is denoted by a small letter of English alphabet, and it can be either red(<code>r</code>) or black(<code>b</code>).</p>\n<p><strong>Output Format</strong><br />Print a single number i.e. the number of triplets.</p>\n<p><strong>Constraints</strong><br />1 &le;&nbsp;<em>N</em>&nbsp;&le; 10<sup>5</sup><br />A node is numbered between 1 to&nbsp;<em>N</em>.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>5\n1 2 b\n2 3 r\n3 4 r\n4 5 b\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>4\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>Given tree is something like this.<br /><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1526563539-7ce683027b-kundu-and-trees.jpg\" alt=\"image\" /></p>\n<p>(2,3,4) is one such triplet because on all paths i.e 2 to 3, 3 to 4 and 2 to 4 there is atleast one edge having red color.<br />(2,3,5), (1,3,4) and (1,3,5) are other such triplets.<br />Note that (1,2,3) is NOT a triplet, because the path from 1 to 2 does not have an edge with red color.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/9dac8e1f-c54d-45cb-a387-047abca3042e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94e9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "find-the-running-median",
  "tags": [],
  "level": "EXPERT",
  "title": "Find the Running Median",
  "content": "<p>The median of a set of integers is the midpoint value of the data set for which an equal number of integers are less than and greater than the value. To find the median, you must first sort your set of integers in non-decreasing order, then:<br />- If your set contains an odd number of elements, the median is the middle element of the sorted sample. In the sorted set $\\{1,2,3\\}, 2$ is the median.<br />- If your set contains an even number of elements, the median is the average of the two middle elements of the sorted sample. In the sorted set $\\{1,2,3,4\\}, \\frac{2+3}{2}=2.5$ is the median.<br />Given an input stream of $n$ integers, perform the following task for each $i^{t h}$ integer:<br />1. Add the $i^{t h}$ integer to a running list of integers.<br />2. Find the median of the updated list (i.e., for the first element through the $i^{\\text {th }}$ element).<br />3. Print the updated median on a new line. The printed value must be a double-precision number scaled to 1 decimal place (i.e., $12.3$ format).<br />Example<br />$$<br />a=[7,3,5,2]<br />$$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<pre>Sorted          Median\n[7]             7.0\n[3, 7]          5.0\n[3, 5, 7]       5.0\n[2, 3, 5, 7]    4.0\n</pre>\n<p>Each of the median values is stored in an array and the array is returned for the main function to print.</p>\n<p><strong>Note:</strong>&nbsp;Add formatting to the print statement.</p>\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>runningMedian</em>&nbsp;function in the editor below.</p>\n<p><em>runningMedian</em>&nbsp;has the following parameters:<br />-&nbsp;<em>int a[n]:</em>&nbsp;an array of integers</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>float[n]:</em>&nbsp;the median of the array after each insertion, modify the print statement in main to get proper formatting.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains a single integer, $n$, the number of integers in the data stream.<br />Each line $i$ of the $n$ subsequent lines contains an integer, $a[i]$, to be inserted into the list.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $0 \\leq a[i] \\leq 10^{5}$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN   Function\n-----   --------\n6       a[] size n = 6\n12      a = [12, 4, 5, 3, 8, 7]\n4\n5\n3\n8\n7\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>12.0\n8.0\n5.0\n4.5\n5.0\n6.0\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>There are $n=6$ integers, so we must print the new median on a new line as each integer is added to the list:<br />1. list $=\\{12\\}$, median $=12.0$<br />2. list $=\\{4,12\\}$, median $=\\frac{4+12}{2}=8.0$<br />3. list $=\\{4,5,12\\}$, median $=5.0$<br />4. list $=\\{3,4,5,12\\}$, median $=\\frac{4+5}{2}=4.5$<br />5. list $=\\{3,4,5,8,12\\}$, median $=5.0$<br />6. list $=\\{3,4,5,7,8,12\\}$, median $=\\frac{5+7}{2}=6.0$</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/eb83d914-f94d-4752-a9f7-b0ef7422dc9c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ea"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 80,
  "slug": "minimum-average-waiting-time",
  "tags": [],
  "level": "EXPERT",
  "title": "Minimum Average Waiting Time",
  "content": "<p>Tieu owns a pizza restaurant and he manages it in his own way. While in a normal restaurant, a customer is served by following the first-come, first-served rule, Tieu simply minimizes the average waiting time of his customers. So he gets to decide who is served first, regardless of how sooner or later a person comes.</p>\n<p>Different kinds of pizzas take different amounts of time to cook. Also, once he starts cooking a pizza, he cannot cook another pizza until the first pizza is completely cooked. Let's say we have three customers who come at time t=0, t=1, &amp; t=2 respectively, and the time needed to cook their pizzas is 3, 9, &amp; 6 respectively. If Tieu applies first-come, first-served rule, then the waiting time of three customers is 3, 11, &amp; 16 respectively. The average waiting time in this case is (3 + 11 + 16) / 3 = 10. This is not an optimized solution. After serving the first customer at time t=3, Tieu can choose to serve the third customer. In that case, the waiting time will be 3, 7, &amp; 17 respectively. Hence the average waiting time is (3 + 7 + 17) / 3 = 9.</p>\n<p>Help Tieu achieve the minimum average waiting time. For the sake of simplicity, just find the integer part of the minimum average waiting time.</p>\n<p>Input Format<br />- The first line contains an integer $\\mathrm{N}$, which is the number of customers.<br />- In the next $N$ lines, the $i^{\\text {th }}$ line contains two space separated numbers $T_{i}$ and $L_{i} \\cdot T_{i}$ is the time when $i^{\\text {th }}$ customer order a pizza, and $L_{i}$ is the time required to cook that pizza.<br />- The $i^{\\text {th }}$ customer is not the customer arriving at the $i^{t h}$ arrival time.<br />Output Format<br />- Display the integer part of the minimum average waiting time.<br />Constraints<br />- $1 \\leq N \\leq 10^{5}$<br />- $0 \\leq \\mathrm{T}_{\\mathrm{i}} \\leq 10^{9}$<br />- $1 \\leq L_{i} \\leq 10^{9}$</p>\n<p><strong>Note</strong></p>\n<ul>\n<li>\n<p>The waiting time is calculated as the difference between the time a customer orders pizza (the time at which they enter the shop) and the time she is served.</p>\n</li>\n<li>\n<p>Cook does not know about the future orders.</p>\n</li>\n</ul>\n<p><strong>Sample Input #00</strong></p>\n<pre><code>3\n0 3\n1 9\n2 6\n</code></pre>\n<p><strong>Sample Output #00</strong></p>\n<pre><code>9\n</code></pre>\n<p><strong>Sample Input #01</strong></p>\n<pre><code>3\n0 3\n1 9\n2 5\n</code></pre>\n<p><strong>Sample Output #01</strong></p>\n<pre><code>8\n</code></pre>\n<p><strong>Explanation #01</strong></p>\n<p>Let's call the person ordering at time = 0 as&nbsp;<em>A</em>, time = 1 as&nbsp;<em>B</em>&nbsp;and time = 2 as&nbsp;<em>C</em>. By delivering pizza for&nbsp;<em>A</em>,&nbsp;<em>C</em>&nbsp;and&nbsp;<em>B</em>&nbsp;we get the minimum average wait time to be</p>\n<pre><code>(3 + 6 + 16)/3 = 25/3 = 8.33 \n</code></pre>\n<p>the integer part is&nbsp;<code>8</code>&nbsp;and hence the answer.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b5892bbd-884d-4a7f-aee3-e248decba915",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94eb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "truck-tour",
  "tags": [],
  "level": "EXPERT",
  "title": "Truck Tour",
  "content": "<p>Suppose there is a circle. There are $N$ petrol pumps on that circle. Petrol pumps are numbered 0 to $(N-1)$ (both inclusive). You have two pieces of information corresponding to each of the petrol pump: (1) the amount of petrol that particular petrol pump will give, and (2) the distance from that petrol pump to the next petrol pump.</p>\n<p>Initially, you have a tank of infinite capacity carrying no petrol. You can start the tour at any of the petrol pumps. Calculate the first point from where the truck will be able to complete the circle. Consider that the truck will stop at each of the petrol pumps. The truck will move one kilometer for each litre of the petrol.<br /><strong>Input Format</strong><br />The first line will contain the value of $N$.<br />The next $N$ lines will contain a pair of integers each, i.e. the amount of petrol that petrol pump will give and the distance between that petrol pump and the next petrol pump.<br /><strong>Constraints:</strong><br />$$<br />1 \\leq N \\leq 10^{5}<br />$$<br />$1 \\leq$ amount of petrol, distance $\\leq 10^{9}$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>An integer which will be the smallest index of the petrol pump from which we can start the tour.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n1 5\n10 3\n3 4\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We can start the tour from the second petrol pump.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3d9d7d35-84e5-4e8a-a9ad-86ec4516b4d2",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ec"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "queries-with-fixed-length",
  "tags": [],
  "level": "EXPERT",
  "title": "Queries with Fixed Length",
  "content": "<p>Consider an $n$-integer sequence, $A=\\left\\{a_{0}, a_{1}, \\ldots, a_{n-1}\\right\\}$. We perform a query on $A$ by using an integer, $d$, to calculate the result of the following expression:<br />In other words, if we let $m_{i}=\\max \\left(a_{i}, a_{i+1}, a_{i+2}, \\ldots, a_{i+d-1}\\right)$, then you need to calculate $\\min \\left(m_{0}, m_{1}, \\ldots, m_{n-d}\\right)$.<br />Given $a r r$ and $q$ queries, return a list of answers to each query.<br /><strong>Example</strong><br />$$<br />\\begin{aligned}<br />&amp;\\operatorname{arr}=[2,3,4,5,6] \\\\<br />&amp;\\text { queries }=[2,3]<br />\\end{aligned}<br />$$<br />The first query uses all of the subarrays of length $2:[2,3],[3,4],[4,5],[5,6]$. The maxima of the subarrays are $[3,4,5,6]$. The minimum of these is 3 .</p>\n<p>The second query uses all of the subarrays of length $3:[2,3,4],[3,4,5],[4,5,6]$. The maxima of the subarrays are $[4,5,6]$. The minimum of these is 4<br />Return $[3,4]$.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>solve</em>&nbsp;function below.</p>\n<p><em>solve</em>&nbsp;has the following parameter(s):</p>\n<ul>\n<li><em>int arr[n]:</em>&nbsp;an array of integers</li>\n<li><em>int queries[q]:</em>&nbsp;the lengths of subarrays to query</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>int[q]:</em>&nbsp;the answers to each query</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">The first line consists of two space-separated integers, $n$ and $q$.<br />The second line consists of $n$ space-separated integers, the elements of $a r r$.<br />Each of the $q$ subsequent lines contains a single integer denoting the value of $d$ for that query.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $0 \\leq \\operatorname{arr}[i]&lt;10^{6}$<br />- $1 \\leq q \\leq 100$<br />- $1 \\leq d \\leq n$</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5 5</span>\n<span class=\"err\">33 11 44 11 55</span>\n<span class=\"err\">1</span>\n<span class=\"err\">2</span>\n<span class=\"err\">3</span>\n<span class=\"err\">4</span>\n<span class=\"err\">5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">11</span>\n<span class=\"err\">33</span>\n<span class=\"err\">44</span>\n<span class=\"err\">44</span>\n<span class=\"err\">55</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>For $d=1$, the answer is<br />$$<br />\\min \\left(\\max \\left(a_{0}\\right), \\max \\left(a_{1}\\right), \\max \\left(a_{2}\\right), \\max \\left(a_{3}\\right), \\max \\left(a_{4}\\right)\\right)=11<br />$$<br />For $d=2$, the answer is<br />$$<br />\\min \\left(\\max \\left(a_{0}, a_{1}\\right), \\max \\left(a_{1}, a_{2}\\right), \\max \\left(a_{2}, a_{3}\\right), \\max \\left(a_{3}, a_{4}\\right)\\right)=33<br />$$<br />For $d=3$, the answer is<br />$$<br />\\min \\left(\\max \\left(a_{0}, a_{1}, a_{2}\\right), \\max \\left(a_{1}, a_{2}, a_{3}\\right), \\max \\left(a_{2}, a_{3}, a_{4}\\right)\\right)=44<br />$$<br />For $d=4$, the answer is<br />$$<br />\\min \\left(\\max \\left(a_{0}, a_{1}, a_{2}, a_{3}\\right), \\max \\left(a_{1}, a_{2}, a_{3}, a_{4}\\right)\\right)=44<br />$$<br />For $d=5$, the answer is<br />$$<br />\\min \\left(\\max \\left(a_{0}, a_{1}, a_{2}, a_{3}, a_{4}\\right)\\right)=55<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5 5</span>\n<span class=\"err\">1 2 3 4 5</span>\n<span class=\"err\">1</span>\n<span class=\"err\">2</span>\n<span class=\"err\">3</span>\n<span class=\"err\">4</span>\n<span class=\"err\">5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">1</span>\n<span class=\"err\">2</span>\n<span class=\"err\">3</span>\n<span class=\"err\">4</span>\n<span class=\"err\">5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 1</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>For each query, the \"prefix\" has the least maximum value among the consecutive subsequences of the same size.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ace1858d-d04a-4584-bbd7-c93078122c7b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ed"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "super-maximum-cost-queries",
  "tags": [],
  "level": "EXPERT",
  "title": "Super Maximum Cost Queries",
  "content": "<p>Victoria has a tree, $T$, consisting of $N$ nodes numbered from 1 to $N$. Each edge from node $U_{i}$ to $V_{i}$ in tree $T$ has an integer weight, $W_{i}$</p>\n<p>Let's define the cost, $C$, of a path from some node $X$ to some other node $Y$ as the maximum weight $(W)$ for any edge in the unique path from node $X$ to node $Y$.</p>\n<p>Victoria wants your help processing $Q$ queries on tree $T$, where each query contains 2 integers, $L$ and $R$, such that $L \\leq R$. For each query, she wants to print the number of different paths in $T$ that have a cost, $C$, in the inclusive range $[L, R]$ It should be noted that path from some node $X$ to some other node $Y$ is considered same as path from node $Y$ to $X$ i.e $\\{X, Y\\}$ is same as $\\{Y, X\\}$<br /><strong>Input Format</strong><br />The first line contains 2 space-separated integers, $N$ (the number of nodes) and $Q$ (the number of queries), respectively. Each of the $N-1$ subsequent lines contain 3 space-separated integers, $U, V_{,}$and $W$, respectively, describing a bidirectional road between nodes $U$ and $V$ which has weight $W$.<br />The $Q$ subsequent lines each contain 2 space-separated integers denoting $L$ and $R$.<br /><strong>Constraints</strong><br />- $1 \\leq N, Q \\leq 10^{5}$<br />- $1 \\leq U, V \\leq N$<br />- $1 \\leq W \\leq 10^{9}$<br />- $1 \\leq L \\leq R \\leq 10^{9}$</p>\n<p><strong>Scoring</strong><br />- $1 \\leq N, Q \\leq 10^{3}$ for $30 \\%$ of the test data.<br />- $1 \\leq N, Q \\leq 10^{5}$ for $100 \\%$ of the test data.<br /><strong>Output Format</strong><br />For each of the $Q$ queries, print the number of paths in $T$ having cost $C$ in the inclusive range $[L, R]$ on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 5\n1 2 3\n1 4 2\n2 5 6\n3 4 1\n1 1\n1 2\n2 3\n2 5\n1 6\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n3\n5\n5\n10\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>$Q_{1}:\\{3,4\\}$<br />$Q_{2}:\\{1,3\\},\\{3,4\\},\\{1,4\\}$<br />$Q_{3}:\\{1,4\\},\\{1,2\\},\\{2,4\\},\\{1,3\\},\\{2,3\\}$<br />$Q_{4}:\\{1,4\\},\\{1,2\\},\\{2,4\\},\\{1,3\\},\\{2,3\\}$<br />...etc.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ecbe201d-2384-407c-ac9f-7b0cb407b9e6",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ee"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 70,
  "slug": "poisonous-plants",
  "tags": [],
  "level": "EXPERT",
  "title": "Poisonous Plants",
  "content": "<p>There are a number of plants in a garden. Each of the plants has been treated with some amount of pesticide. After each day, if any plant has more pesticide than the plant on its left, being weaker than the left one, it dies.</p>\n<p>You are given the initial values of the pesticide in each of the plants. Determine the number of days after which no plant dies, i.e. the time after which there is no plant with more pesticide content than the plant to its left.</p>\n<p><strong>Example</strong></p>\n<p>$p=[3,6,2,7,5] / /$ pesticide levels<br />Use a 1 -indexed array. On day 1, plants 2 and 4 die leaving $p^{\\prime}=[3,2,5]$. On day 2, plant 3 in $p^{\\prime}$ dies leaving $p^{\\prime \\prime}=[3,2]$. There is no plant with a higher concentration of pesticide than the one to its left, so plants stop dying after day 2 .</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong><br />Complete the function&nbsp;<em>poisonousPlants</em>&nbsp;in the editor below.</p>\n<p>poisonousPlants has the following parameter(s):</p>\n<ul>\n<li><em>int p[n]</em>: the pesticide levels in each plant</li>\n</ul>\n<p>Returns<br />-&nbsp;<em>int</em>: the number of days until plants no longer die from pesticide</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $n$, the size of the array $p$. The next line contains $n$ space-separated integers $p[i]$<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 10^{5} \\\\<br />&amp;0 \\leq p[i] \\leq 10^{9}<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>7\n6 5 8 4 7 10 9\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Initially all plants are alive.</p>\n<p>Plants = {(6,1), (5,2), (8,3), (4,4), (7,5), (10,6), (9,7)}</p>\n<p>Plants[k] = (i,j) =&gt; j<sup>th</sup>&nbsp;plant has pesticide amount = i.</p>\n<p>After the 1<sup>st</sup>&nbsp;day, 4 plants remain as plants 3, 5, and 6 die.</p>\n<p>Plants = {(6,1), (5,2), (4,4), (9,7)}</p>\n<p>After the 2<sup>nd</sup>&nbsp;day, 3 plants survive as plant 7 dies.</p>\n<p>Plants = {(6,1), (5,2), (4,4)}</p>\n<p>Plants stop dying after the 2<sup>nd</sup>&nbsp;day.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c42e5c00-c1a6-4bb1-965e-8df985358dba",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94ef"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 70,
  "slug": "and-xor-or",
  "tags": [],
  "level": "EXPERT",
  "title": "AND xor OR",
  "content": "<p>Given an array $A[]$ of $N$ distinct elements. Let $M_{1}$ and $M_{2}$ be the smallest and the next smallest element in the interval $[L, R]$ where $1 \\leq L&lt;R \\leq N$<br />$$<br />S_{i}=\\left(\\left(\\left(M_{1} \\wedge M_{2}\\right) \\oplus\\left(M_{1} \\vee M_{2}\\right)\\right) \\wedge\\left(M_{1} \\oplus M_{2}\\right)\\right)<br />$$<br />where $\\wedge, \\vee, \\oplus$, are the bitwise operators $A N D, O R$ and $X O R$ respectively.<br />Your task is to find the maximum possible value of $S_{i}$.<br />Input Format<br />First line contains integer $N$.<br />Second line contains $N$ integers, representing elements of the array $A[]$.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1&lt;N \\leq 10^{6} \\\\<br />&amp;1 \\leq A_{i} \\leq 10^{9}<br />\\end{aligned}<br />$$<br />Output Format<br />Print the value of maximum possible value of $S_{i}$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n9 6 3 5 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>15\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Consider the interval $[1,2]$ the result will be maximum. $(((9 \\wedge 6) \\oplus(9 \\vee 6)) \\wedge(9 \\oplus 6))=15$</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/42762cb8-5ef5-4de7-914a-f2aeb4780397",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "no-prefix-set",
  "tags": [],
  "level": "EXPERT",
  "title": "No Prefix Set",
  "content": "<p>There is a given list of strings where each string contains only lowercase letters from $a-j$, inclusive. The set of strings is said to be a GOOD SET if no string is a prefix of another string. In this case, print GOOD SET. Otherwise, print BAD SET on the first line followed by the string being checked.<br />Note If two strings are identical, they are prefixes of each other.<br />Example<br />words $=$ ['abcd', 'bcd', 'abcde', 'bcde']</p>\n<p>Here 'abcd' is a prefix of 'abcde' and 'bcd' is a prefix of 'bcde'. Since 'abcde' is tested first, print</p>\n<pre><code>BAD SET  \nabcde</code></pre>\n<p>words $=[$ 'ab', 'bc', 'cd']</p>\n<p>No string is a prefix of another so print</p>\n<pre><code>GOOD SET \n</code></pre>\n<p><strong>Function Description</strong><br />Complete the&nbsp;<em>noPrefix</em>&nbsp;function in the editor below.</p>\n<p><em>noPrefix</em>&nbsp;has the following parameter(s):<br />-&nbsp;<em>string words[n]:</em>&nbsp;an array of strings</p>\n<p><strong>Prints</strong></p>\n<p>- string(s): either GOOD SET or BAD SET on one line followed by the word on the next line. No return value is expected.<br />Input Format<br />First line contains $n$, the size of words []<br />Then next $n$ lines each contain a string, words $[i]$<br />Constraints<br />$$<br />1 \\leq n \\leq 10^{5}<br />$$<br />$1 \\leq$ the length of words $[i] \\leq 60$<br />All letters in words $[i]$ are in the range 'a' through 'j', inclusive.</p>\n<p><strong>Sample Input00</strong></p>\n<pre><code>STDIN       Function\n-----       --------\n7            words[] size n = 7\naab          words = ['aab', 'defgab', 'abcde', 'aabcde', 'bbbbbbbbbb', 'jabjjjad']\ndefgab  \nabcde\naabcde\ncedaaa\nbbbbbbbbbb\njabjjjad\n</code></pre>\n<p><strong>Sample Output00</strong></p>\n<pre><code>BAD SET\naabcde\n</code></pre>\n<p><strong>Explanation</strong><br />'aab' is prefix of 'aabcde' so it is a&nbsp;<strong>BAD SET</strong>&nbsp;and fails at string 'aabcde'.</p>\n<p><strong>Sample Input01</strong></p>\n<pre><code>4\naab\naac\naacghgh\naabghgh\n</code></pre>\n<p><strong>Sample Output01</strong></p>\n<pre><code>BAD SET\naacghgh\n</code></pre>\n<p><strong>Explanation</strong><br />'aab' is a prefix of 'aabghgh', and aac' is prefix of 'aacghgh'. The set is a&nbsp;<strong>BAD SET</strong>. 'aacghgh' is tested before 'aabghgh', so and it fails at 'aacghgh'.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/27f9a476-cb2c-45d9-b502-e42d6bd18de9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "cube-summation",
  "tags": [],
  "level": "EXPERT",
  "title": "Cube Summation",
  "content": "<p><a href=\"https://hr-testcases.s3.amazonaws.com/1058/1058-chinese.md\">Chinese Version</a><br /><a href=\"https://hr-testcases.s3.amazonaws.com/1058/1058_rus.md\">Russian Version</a></p>\n<p>Define a 3-D Matrix in which each block contains 0 initially. The first block is defined by the coordinates (1,1,1) and the last block is defined by the coordinates (n,n,n). There are two types of queries.</p>\n<pre><code>UPDATE x y z W\n</code></pre>\n<p>Update the value of block (x,y,z) to W.</p>\n<pre><code>QUERY x1 y1 z1 x2 y2 z2\n</code></pre>\n<p>Calculate the sum of the values of blocks whose x coordinate is between x1 and x2 (inclusive), y coordinate between y1 and y2 (inclusive) and z coordinate between z1 and z2 (inclusive).</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>cubeSum</em>&nbsp;function in the editor below.</p>\n<p><em>cubeSum</em>&nbsp;has the following parameters: - *int n: the dimensions of the 3-d matrix -&nbsp;<em>string operations[m]:</em>&nbsp;the operations to perform</p>\n<p><strong>Returns</strong><br />-&nbsp;<em>int[]:</em>&nbsp;the results of each&nbsp;<code>QUERY</code>&nbsp;operation</p>\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer $T$, the number of test-cases. $T$ testcases follow.<br />For each test case, the first line contains two space-separated integers, $n$ and $m . n$ defines the $n \\times n \\times n$ matrix.<br />$m$ defines the number of operations.<br />The next $m$ lines will contain an operation either of these forms:</p>\n<pre><code> 1. UPDATE x y z W\n 2. QUERY  x1 y1 z1 x2 y2 z2 </code></pre>\n<p>Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq T \\leq 50 \\\\<br />&amp;1 \\leq n \\leq 100 \\\\<br />&amp;1 \\leq m \\leq 1000 \\\\<br />&amp;1 \\leq x 1 \\leq x 2 \\leq n \\\\<br />&amp;1 \\leq y 1 \\leq y 2 \\leq n \\\\<br />&amp;1 \\leq z 1 \\leq z 2 \\leq n \\\\<br />&amp;1 \\leq x, y, z \\leq n \\\\<br />&amp;-10^{9} \\vee \\operatorname{lle} W \\operatorname{lle} 10^{9}<br />\\end{aligned}<br />$$</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>2\n4 5\nUPDATE 2 2 2 4\nQUERY 1 1 1 3 3 3\nUPDATE 1 1 1 23\nQUERY 2 2 2 4 4 4\nQUERY 1 1 1 3 3 3\n2 4\nUPDATE 2 2 2 1\nQUERY 1 1 1 1 1 1\nQUERY 1 1 1 2 2 2\nQUERY 2 2 2 2 2 2\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>4\n4\n27\n0\n1\n1\n</code></pre>\n<p><strong>Explanation</strong><br />In the first test case, there is a cube of 4 * 4 * 4 and there are 5 queries. Initially all the cells (1,1,1) to (4,4,4) are 0.<br /><code>UPDATE 2 2 2 4</code>&nbsp;makes the cell (2,2,2) = 4<br /><code>QUERY 1 1 1 3 3 3</code>. As (2,2,2) is updated to 4 and the rest are all 0. The answer to this query is 4.<br /><code>UPDATE 1 1 1 23</code>. updates the cell (1,1,1) to 23.&nbsp;<code>QUERY 2 2 2 4 4 4</code>. Only the cell (1,1,1) and (2,2,2) are non-zero and (1,1,1) is not between (2,2,2) and (4,4,4). So, the answer is 4.<br /><code>QUERY 1 1 1 3 3 3</code>. 2 cells are non-zero and their sum is 23+4 = 27.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/01c9baa1-3c1e-4d3c-87ab-6bedcf5c7ddd",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "direct-connections",
  "tags": [],
  "level": "EXPERT",
  "title": "Direct Connections",
  "content": "<p>Enter-View $(E V)$ is a linear, street-like country. By linear, we mean all the cities of the country are placed on a single straight line - the $x$-axis. Thus every city's position can be defined by a single coordinate, $x_{i}$, the distance from the left borderline of the country. You can treat all cities as single points.<br />Unfortunately, the dictator of telecommunication of EV (Mr. S. Treat Jr.) doesn't know anything about the modern telecom technologies, except for peer-to-peer connections. Even worse, his thoughts on peer-to-peer connections are extremely faulty: he believes that, if $P_{i}$ people are living in city $i$, there must be at least $P_{i}$ cables from city $i$ to every other city of EV - this way he can guarantee no congestion will ever occur!</p>\n<p>Mr. Treat hires you to find out how much cable they need to implement this telecommunication system, given the coordination of the cities and their respective population.<br />Note that The connections between the cities can be shared. Look at the example for the detailed explanation.<br /><strong>Input Format</strong><br />A number $T$ is given in the first line and then comes $T$ blocks, each representing a scenario.<br />Each scenario consists of three lines. The first line indicates the number of cities (N). The second line indicates the coordinates of the $N$ cities. The third line contains the population of each of the cities. The cities needn't be in increasing order in the input. Output Format<br />For each scenario of the input, write the length of cable needed in a single line modulo $1,000,000,007$.</p>\n<p><strong>Output Format</strong><br />For each scenario of the input, write the length of cable needed in a single line modulo $1,000,000,007$.<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq T \\leq 20 \\\\<br />&amp;1 \\leq N \\leq 200,000 \\\\<br />&amp;P_{i} \\leq 10,000<br />\\end{aligned}<br />$$<br />Border to border length of the country $\\leq 1,000,000,000$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Sample Input</strong></p>\n<pre><code>2  \n3  \n1 3 6  \n10 20 30  \n5  \n5 55 555 55555 555555  \n3333 333 333 33 35\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>280  \n463055586\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">For the first test case, having 3 cities requires 3 sets of cable connections. Between city 1 and 2 , which has a population of 10 and 20 , respectively, Mr. Treat believes at least 10 cables should come out of city 1 for this connection, and at least 20 cables should come out of city 2 for this connection. Thus, the connection between city 1 and city 2 will require 20 cables, each crossing a distance of $3-1=2 \\mathrm{~km}$. Applying this absurd logic to connection 2,3 and 1,3, we have $[1,2] \\Rightarrow 20$ connections $\\times 2 k m=40 \\mathrm{~km}$ of cable $[2,3]=30$ connections $\\times 3 k m=90 \\mathrm{~km}$ of cable $[1,3]=&gt;30$ connections $\\times 5 k m=150 \\mathrm{~km}$ of cable<br />For a total of 280, Output is $280 \\mathrm{~km}$ of cable</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/62def88a-7f3b-4c75-b472-c973f15738df",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 80,
  "slug": "palindromic-subsets",
  "tags": [],
  "level": "EXPERT",
  "title": "Palindromic Subsets",
  "content": "<p>Consider a lowercase English alphabetic letter character denoted by $c$. A shift operation on some $c$ turns it into the next letter in the alphabet. For example, and $\\operatorname{shift}(\\mathrm{a})=\\mathrm{b}, \\operatorname{shift}(\\mathrm{e})=\\mathrm{f}, \\operatorname{shift}(\\mathbf{z})=\\mathrm{a}$.</p>\n<p>Given a zero-indexed string, $s$, of $n$ lowercase letters, perform $q$ queries on $s$ where each query takes one of the following two forms:<br />- $1 i$ j t: All letters in the inclusive range from $i$ to $j$ are shifted $t$ times.<br />- 2 i j: Consider all indices in the inclusive range from $i$ to $j$. Find the number of non-empty subsets of characters, $c_{1}, c_{2}, \\ldots, c_{k}$ where $i \\leq$ index of $c_{1}&lt;$ index of $c_{2}&lt;\\ldots&lt;$ index of $\\left.c_{k} \\leq j\\right)$, such that characters $c_{1}, c_{2}, c_{3}, \\ldots, c_{k}$ can be rearranged to form a palindrome. Then print this number modulo $10^{9}+7$ on a new line. Two palindromic subsets are considered to be different if their component characters came from different indices in the original string.</p>\n<p>Note Two palindromic subsets are considered to be different if their component characters came from different indices in the original string.<br />Input Format<br />The first line contains two space-separated integers describing the respective values of $n$ and $q$.<br />The second line contains a string of $n$ lowercase English alphabetic letters (i.e., a through $z$ ) denoting $s$.<br />Each of the $q$ subsequent lines describes a query in one of the two formats defined above.</p>\n<p>Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $1 \\leq q \\leq 10^{5}$<br />- $0 \\leq i \\leq j&lt;n$ for each query<br />- $0 \\leq t \\leq 10^{9}$ for each query of type 1<br />Subtasks<br />For $20 \\%$ of the maximum score:<br />- $n \\leq 500$<br />- $q \\leq 500$<br />For another $30 \\%$ of the maximum score:<br />- All queries will be of type 2 .<br />Output Format<br />For each query of type 2 (i.e., $2 i j$ ), print the number of non-empty subsets of characters satisfying the conditions given above, modulo $10^{9}+7$, on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">3 5</span>\n<span class=\"err\">aba</span>\n<span class=\"err\">2 0 2</span>\n<span class=\"err\">2 0 0</span>\n<span class=\"err\">2 1 2</span>\n<span class=\"err\">1 0 1 1</span>\n<span class=\"err\">2 0 2</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5</span>\n<span class=\"err\">1</span>\n<span class=\"err\">2</span>\n<span class=\"err\">3</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">We perform the following $q=5$ queries:<br />$1.202: s=a b a$ and we want to find the palindromic subsets of substring aba. There are five such subsets that form palindromic strings $\\left(a, b, a, a a\\right.$, and aba), so we print the result of $5 \\bmod \\left(10^{9}+7\\right)=5$ on a new line<br />2. 20 0: $s=$ aba and we want to find the palindromic subsets of substring a. Because this substring only has one letter, we only have one subset forming a palindromic string (a). We then print the result of $1 \\bmod \\left(10^{9}+7\\right)=1$ on a new line.<br />3. $212: s=a b a$ and we want to find the palindromic subsets of substring ba. There are two such subsets that form palindromic strings (b and a), so we print the result of $2 \\bmod \\left(10^{9}+7\\right)=2$ on a new line.<br />4. $1011: s=a b a$ and we need to perform $t=1$ shift operations on each character from index $i=0$ to index $j=1$. After performing these shifts, $s=\\mathrm{bca}$.<br />5. $202: s=$ bca and we want to find the palindromic subsets of substring bca. There are three valid subsets that form palindromic strings $\\left(b, c\\right.$, and $a$ ), so we print the result of $3 \\bmod \\left(10^{9}+7\\right)=3$ on a new line.</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ef14f437-0566-4808-b0f7-cd84346c46e9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 60,
  "slug": "polynomial-division",
  "tags": [],
  "level": "EXPERT",
  "title": "Polynomial Division",
  "content": "<p>Consider a sequence, $c_{0}, c_{1}, \\ldots c_{n-1}$, and a polynomial of degree 1 defined as $Q(x)=a \\cdot x+b$. You must perform $q$ queries on the sequence, where each query is one of the following two types:<br />- 1 i $\\mathrm{x}$ : Replace $c_{i}$ with $x$.<br />- $2 l r:$ Consider the polynomial $P(x)=c_{l} \\cdot x^{0}+c_{l+1} \\cdot x^{1}+\\cdots+c_{r} \\cdot x^{r-l}$ and determine whether $P(x)$ is divisible by $Q(x)=a \\cdot x+b$ over the field $Z_{p}$, where $p=10^{9}+7$. In other words, check if there exists a polynomial $R(x)$ with integer coefficients such that each coefficient of $P(x)-R(x) \\cdot Q(x)$ is divisible by $p$. If a valid $R(x)$ exists, print Yes on a new line; otherwise, print No.<br />Given the values of $n, a, b$, and $q$ queries, perform each query in order.<br />Input Format<br />The first line contains four space-separated integers describing the respective values of $n$ (the length of the sequence), $a$ (a coefficient in $Q(x)), b$ (a coefficient in $Q(x)$ ), and $q$ (the number of queries).<br />The second line contains $n$ space-separated integers describing $c_{0}, c_{1}, \\ldots c_{n-1}$<br />Each of the $q$ subsequent lines contains three space-separated integers describing a query of either type 1 or type 2 .<br />Constraints<br />- $1 \\leq n, q \\leq 10^{5}$<br />- For query type $1: 0 \\leq i \\leq n-1$ and $0 \\leq x&lt;10^{9}+7$.<br />- For query type 2: $0 \\leq l \\leq r \\leq n-1$<br />- $0 \\leq a, b, c_{i}&lt;10^{9}+7$<br />- $a \\neq 0$</p>\n<p>Output Format<br />For each query of type 2 , print Yes on a new line if $Q(x)$ is a divisor of $P(x)$; otherwise, print No instead.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">3 2 2 3</span>\n<span class=\"err\">1 2 3</span>\n<span class=\"err\">2 0 2</span>\n<span class=\"err\">1 2 1</span>\n<span class=\"err\">2 0 2</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">No</span>\n<span class=\"err\">Yes</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>Given $Q(x)=2 \\cdot x+2$ and the initial sequence $c=\\{1,2,3\\}$, we perform the following $q=3$ queries:<br />1. $Q(x)=2 \\cdot x+2$ is not a divisor of $P(x)=1+2 \\cdot x+3 \\cdot x^{2}$, so we print No on a new line.<br />2. Set $c_{2}$ to 1, so $c=\\{1,2,1\\}$.<br />3. After the second query, $P(x)=1+2 \\cdot x+1 \\cdot x^{2}$. Because<br />$(2 \\cdot x+2) \\cdot(500000004 \\cdot x+500000004) \\bmod \\left(10^{9}+7\\right)=1+2 \\cdot x+1 \\cdot x^{2}=P(x)$, we print Yes on a new line.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/95cc8529-f0e0-49ab-90e8-541558f92fa4",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 65,
  "slug": "costly-intervals",
  "tags": [],
  "level": "EXPERT",
  "title": "Costly Intervals",
  "content": "<p>Given an array, your goal is to find, for each element, the largest subarray containing it whose cost is at least $k$.<br />Specifically, let $A=\\left[A_{1}, A_{2}, \\ldots, A_{n}\\right]$ be an array of length $n$, and let $A_{l \\ldots r}=\\left[A_{l}, \\ldots, A_{r}\\right]$ be the subarray from index $l$ to index $r$. Also,<br />- Let $\\operatorname{MAX}(l, r)$ be the largest number in $A_{l \\ldots r}$<br />- Let $\\operatorname{MIN}(l, r)$ be the smallest number in $A_{l \\ldots r}$<br />- Let $\\mathrm{OR}(l, r)$ be the bitwise OR of the elements of $A_{l \\ldots r}$<br />- Let $\\operatorname{AND}(l, r)$ be the bitwise AND of the elements of $A_{l \\ldots r}$<br />The cost of $A_{l \\ldots r}$, denoted $\\operatorname{cost}(l, r)$, is defined as<br />$$<br />\\operatorname{cost}(l, r)=(\\mathrm{OR}(l, r)-\\operatorname{AND}(l, r))-(\\operatorname{MAX}(l, r)-\\operatorname{MIN}(l, r))<br />$$<br />The size of $A_{l \\ldots r}$ is defined as $r-l+1$<br />You are given the array $A$ and and an integer $k$. For each index $i$ from 1 to $n$, your goal is to find the largest size of any subarray $A_{l \\ldots r}$ such that $1 \\leq l \\leq i \\leq r \\leq n$ and $\\operatorname{cost}(l, r) \\geq k$<br />Consider, array $A=[2,4,3,1,7]$ and $k=6$. The possible sub-arrays and their costs would be as follows:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1512116739-8dea10a9c6-costly-3.png\" alt=\"image\" /></p>\n<p>Complete the function costlyIntervals which takes two integers $n$ and $k$ as first line of input, and array $A_{1}, A_{2}, \\ldots, A_{n}$ in the second line of input. Return an array of $n$ integers, where the $i^{\\text {th }}$ element contains the answer for index $i$ of the input array, $1 \\leq i \\leq n$. Every element of the output array denotes the largest size of a subarray containing $i$ whose cost is at least $k$, or $-1$ if there is no such subarray.<br />Constraints<br />- $1 \\leq n \\leq 10^{5}$<br />- $0 \\leq A_{i} \\leq 10^{9}$<br />- $0 \\leq k \\leq 10^{9}$<br />Subtasks<br />- For $5 \\%$ of the maximum score, $n \\leq 100$.<br />- For $15 \\%$ of the maximum score, $n \\leq 5 \\cdot 10^{3}$.<br />Sample Input<br />$$<br />\\begin{aligned}<br />&amp;n=5, k=6 \\\\<br />&amp;A=[2,4,3,1,7]<br />\\end{aligned}<br />$$<br />Sample Output<br />$$<br />[-1,2,2,-1,-1]<br />$$<br />Explanation<br />In this example, we have $k=6$. There is only one subarray whose cost is at least 6, and that is $A_{2 \\ldots 3}=[4,3]$, since $\\operatorname{cost}(2,3)=6$. Its size is 2 . Thus, for $i=2$ and $i=3$, the answer is 2, and for the others, $-1$.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ca3436b2-c284-4465-84f8-7e641584c54f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 70,
  "slug": "the-strange-function",
  "tags": [],
  "level": "EXPERT",
  "title": "The Strange Function",
  "content": "<p>One of the most important skills a programmer needs to learn early on is the ability to pose a problem in an abstract way. This skill is important not just for researchers but also in applied fields like software engineering and web development.</p>\n<p>You are able to solve most of a problem, except for one last subproblem, which you have posed in an abstract way as follows: Given an array consisting of $n$ integers $\\left[a_{1}, a_{2}, \\ldots, a_{n}\\right]$, define<br />$$<br />f(l, r)=\\operatorname{gcd}\\left(a_{l}, a_{l+1}, \\ldots, a_{r}\\right) \\cdot\\left(\\left(\\sum_{i=l}^{r} a_{i}\\right)-\\max \\left(a_{l}, a_{l+1}, \\ldots, a_{r}\\right)\\right)<br />$$<br />For example, for an input array $[10,-5,5,20]$, a subsegment $f(1,1)$ would be computed as follows:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1514443882-d4fd00ae66-strange_function5.png\" alt=\"image\" /></p>\n<p>What is $\\max _{1 \\leq l \\leq r \\leq n} f(l, r)$, i.e., the maximum value of $f(l, r)$ among all subsegments $[l, r] ?$<br />Complete the function maximumValue which takes an integer array as input and returns the maximum value of $f$ among all subsegments $[l, r]$.<br />Note that:<br />- $\\operatorname{gcd}(x, y)=\\operatorname{gcd}(|x|,|y|)$<br />- $\\operatorname{gcd}(x, 0)=\\operatorname{gcd}(0, x)=|x|$<br />Input Format<br />The first line contains a single integer $n$<br />The second line contains $n$ space-separated integers $a_{1}, a_{2}, \\ldots a_{n}$<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq n \\leq 50000 \\\\<br />&amp;-10^{6} \\leq a_{i} \\leq 10^{6}<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print a single integer denoting the answer</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">4</span>\n<span class=\"err\">10 -5 5 20</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">50</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>The maximum value occurs at $f(1,4)=50$ as shown below.</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1514443735-fef0ce5b41-strange_function4.png\" alt=\"image\" /></p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">5</span>\n<span class=\"err\">7 12 24 6 5</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">144</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 1</strong></p>\n<p>The maximum value occurs at $f(2,3)=144$.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5df258f5-b604-47f3-866b-805f507e2b25",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 100,
  "slug": "lazy-white-falcon",
  "tags": [],
  "level": "EXPERT",
  "title": "Lazy White Falcon",
  "content": "<p>White Falcon just solved the data structure problem below using heavy-light decomposition. Can you help her find a new solution that doesn't require implementing any fancy techniques?<br />There are 2 types of query operations that can be performed on a tree:<br />1. $1 \\mathrm{u} \\mathrm{x}$ : Assign $x$ as the value of node $u$.<br />2. $2 \\mathrm{u} \\mathrm{v}$ : Print the sum of the node values in the unique path from node $u$ to node $v$.<br />Given a tree with $N$ nodes where each node's value is initially 0 , execute $Q$ queries.<br />Input Format<br />The first line contains 2 space-separated integers, $N$ and $Q$, respectively.<br />The $N-1$ subsequent lines each contain 2 space-separated integers describing an undirected edge in the tree.<br />Each of the $Q$ subsequent lines contains a query you must execute.<br />Constraints<br />- $1 \\leq N, Q \\leq 10^{5}$<br />- $1 \\leq x \\leq 1000$<br />- It is guaranteed that the input describes a connected tree with $N$ nodes.<br />- Nodes are enumerated with 0 -based indexing.<br />Output Format<br />For each type-2 query, print its integer result on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3 3\n0 1\n1 2\n1 0 1\n1 1 2\n2 0 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"Lazy White Falcon Expl.png\" src=\"https://s3.amazonaws.com/hr-challenge-images/15812/1458794192-0cf036b4e2-LazyWhiteFalconExpl.png\" /></p>\n<p>After the first 2 queries, the value of node $n_{0}=1$ and the value of node $n_{1}=2$. The third query requires us to print the sum of the node values in the path from nodes 0 to 2 , which is $1+2+0=3$. Thus, we print 3 on a new line.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/37e78229-81f4-4331-ac63-05d66c998f2a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 100,
  "slug": "heavy-light-white-falcon",
  "tags": [],
  "level": "EXPERT",
  "title": "Heavy Light White Falcon",
  "content": "<p>Our lazy white falcon finally decided to learn heavy-light decomposition. Her teacher gave an assignment for her to practice this new technique. Please help her by solving this problem.</p>\n<p>You are given a tree with $N$ nodes and each node's value is initially 0 . The problem asks you to operate the following two types of queries:<br />- \"1 $u \\mathrm{x}$ \" assign $x$ to the value of the node $u$.<br />- \"2 $u \\mathrm{v}^{\\prime \\prime}$ print the maximum value of the nodes on the unique path between $u$ and $v$.<br />Input Format<br />First line consists of two integers seperated by a space: $N$ and $Q$.<br />Following $N-1$ lines consisting of two integers denotes the undirectional edges of the tree.<br />Following $Q$ lines consist of the queries you are asked to operate.<br />Constraints<br />$$<br />1 \\leq N, Q, x \\leq 50000<br />$$<br />It is guaranteed that input denotes a connected tree with $N$ nodes. Nodes are enumerated with 0-based indexing.<br />Output Format<br />For each second type of query print single integer in a single line, denoting the asked maximum value.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3 3\n0 1\n1 2\n1 0 1\n1 1 2\n2 0 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>After the first two updates value of the 0th node is 1 and 1 st node is 2 . That is why maxiumum value on the path between 0 and 2 is $\\max (1,2)=2$.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7018f488-007c-4a4b-aa22-92d189ad9ccc",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94f9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 100,
  "slug": "burger-happiness",
  "tags": [],
  "level": "EXPERT",
  "title": "Burger Happiness",
  "content": "<p>In Burger Town new burger restaurants will be opened! Concretely, $N$ restaurants will open in $N$ days, while restaurant $i$ will be opened on day $i$ and will be located at $X_{i}$. The town should be imagined as an one dimensional line in which every object's location can be described by the $x$ coordinate.</p>\n<p>Tim has just recently arrived the town after a very bad result in a programming contest. Thus he wants to cheer himself up by starting a trip to try out some new burgers.<br />Every burger restaurant $i$ is associated with two integers $A_{i}$ and $B_{i}$. If Tim eats a burger from $i$, then his happiness will increase by $A_{i}$, which can also be negative, depending on the deliciousness of the burger. On the other hand, if Tim looks through the window of an opened restaurant $i$, from which he will not eat a burger, then his happiness decreases by $B_{i}$, since Tim gets sad by only seeing the burgers.<br />Tim's journey can start from any day $d$ at the burger restaurant $d$ and eats a burger from there. On each subsequent day $n&gt;d$, Tim has the following options:<br />- Stay at the previous restaurant $p$.<br />- Or go to the new restaurant $n$ to eat a burger from there.<br />If he decides for the latter option, then on the path from $p$ to $n$ he will look through all the windows that are on his path and maybe lose some happiness. Concretely, if $X_{p}&lt;X_{n}$, then he will look through the window of every opened restaurant $i$, having $X_{p} \\leq X_{i}&lt;X_{n}$. Similar for the case $X_{n}&lt;X_{p}$<br />Since Tim is a very good friend of yours you should help him finding a trip that will maximize his happiness. If he should stay at home since no trip would cheer him up, then print 0 .<br />Note: Tim's happiness is 0 at the beginning of the trip and is allowed to be negative throughout the time.<br />Input Format<br />$N$ will be given on the first line, then $N$ lines will follow, describing the restaurants numbered from 1 to $N$ accordingly. Restaurant $i$ will be described by $X_{i}, A_{i}$ and $B_{i}$ separated by a single space.</p>\n<p>Output Format<br />Output the maximium happiness on one line.<br />Constraints<br />- $1 \\leq N \\leq 10^{5}$<br />- $\\left|A_{i}\\right| \\leq 10^{6}$<br />- $0 \\leq B_{i} \\leq 10^{6}$<br />- $0 \\leq X_{i} \\leq 10^{9}$ and no two restaurants will have the same $X$ coordinates.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code> 3\n 2 -5 1\n 1 5 1\n 3 5 1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>8\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code> 4\n 4 10 0\n 1 -5 0\n 3 0 10\n 2 10 0\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code> 15\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code> 3\n 1 -1 0\n 2 -2 0\n 3 -3 0\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code> 0</code></pre>\n<p>First testcase: His trip starts on day 2 at restaurant 2 located at $X_{2}=1$. He gains $A_{2}=5$ happiness points there by eating a burger. On the next day he goes from restaurant 2 to 3 , but will look through the window of restaurant 2 and 1 . Therefore he Ioses $B_{2}=1$ and $B_{1}=1$ points on the way to restaurant 3 . There he eats a burger and gains another $A_{3}=5$ points. In total his happiness is equal to $5-1-1+5=8$ and this is optimal.<br />Second testcase: His trip starts on day 1 at restaurant 1 . Then his actions on day 2,3 and 4 will be go to restaurant 2 , stay at restaurant 2 and go to restaurant 4 respectively. The happiness of this optimal trip is equal to $10-5+10=15$.</p>\n<p>Third testcase: It's not worth to start the trip from any of the restaurant since he will only have negative happiness. That's why he should stay at home and 0 should be printed.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/6a8976b8-ba04-4ffb-af30-441122dd8163",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94fa"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 120,
  "slug": "roy-and-alpha-beta-trees",
  "tags": [],
  "level": "EXPERT",
  "title": "Roy and alpha-beta trees",
  "content": "<p>Roy has taken a liking to the Binary Search Trees(BST). He is interested in knowing the number of ways an array $A$ of $N$ integers can be arranged to form a BST. Thus, he tries a few combinations, and notes down the numbers at the odd levels and the numbers at the even levels.</p>\n<p>You're given two values, alpha and beta. Can you calculate the sum of Liking of all possible BST's that can be formed from an array of $N$ integers? Liking of each BST is defined as follows</p>\n<pre><code>(sum of numbers on even levels * alpha) - (sum of numbers on odd levels * beta)\n</code></pre>\n<p><strong>Note</strong></p>\n<p>- The root element is at level 0 ( Even)<br />- The elements smaller or equal to the parent element are present in the left subtree, elements greater than or equal to the parent element are present in the right subtree. Explained here<br />If the answer is no less than $10^{9}+9$, output the answer $\\% 10^{9}+9$.<br />(If the answer is less than 0 , keep adding $10^{9}+9$ until the value turns non negative.)<br />Input Format<br />The first line of input file contains an integer, $T$, denoting the number of test cases to follow.<br />Each testcase comprises of 3 lines.<br />The first line contains $N$, the number of integers.<br />The second line contains two space separated integers, alpha and beta.<br />The third line contains space separated $N$ integers_, denoting the $i^{t h}$ integer in array $A[i]$.<br />Output Format<br />Output $T$ lines. Each line contains the answer to its respective test case.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq T \\leq 10 \\\\<br />&amp;1 \\leq N \\leq 150 \\\\<br />&amp;1 \\leq A[i] \\leq 10^{9} \\\\<br />&amp;1 \\leq \\text { alpha }, \\text { beta } \\leq 10^{9}<br />\\end{aligned}<br />$$</p>\n<p><strong>Sample Input</strong></p>\n<pre>4\n1\n1 1\n1\n2\n1 1\n1 2\n3\n1 1\n1 2 3\n5\n1 1\n1 2 3 4 5\n</pre>\n<p><strong>Sample Output</strong></p>\n<pre>1\n0\n6\n54\n</pre>\n<p><strong>Explanation</strong></p>\n<p>There are 4 test cases in total.<br />- For the first test case, only 1 BST can be formed with 1 as the root node. Hence the Liking / sum is 1 .<br />- For the second test case, we get 2 BSTs of the form, the Liking of the first tree is $1 * 1-2 * 1=-1$ and $2 * 1-1 * 1=1$, this sums to 0 , hence the answer.</p>\n<pre>1                  2 \n \\                /\n  2              1</pre>\n<p>- For the third test case, we get 5 BSTs. The Liking of each of the BST from left to right are $2,-2,4,2,0$ which sums to 6 and hence the answer.</p>\n<pre>1            2                 3          3      1\n \\          / \\               /          /        \\\n  2        1   3             1          2          3\n   \\                          \\        /          /\n    3                          2      1          2<br /><br />- Similarly, for the fourth test case, the answer is 54</pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1a0921de-60bf-46f9-84dd-f8ce96d50634",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94fb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 120,
  "slug": "coloring-tree",
  "tags": [],
  "level": "EXPERT",
  "title": "Coloring Tree",
  "content": "<p>You are given a tree with&nbsp;<strong>N</strong>&nbsp;nodes with every node being colored. A color is represented by an integer ranging from 1 to 10<sup>9</sup>. Can you find the number of distinct colors available in a subtree rooted at the node&nbsp;<strong>s</strong>?</p>\n<p><strong>Input Format</strong><br />The first line contains three space separated integers representing the number of nodes in the tree (<strong>N</strong>), number of queries to answer (<strong>M</strong>) and the root of the tree.</p>\n<p>In each of the next N-1 lines, there are two space separated integers(a b) representing an edge from node a to Node b and vice-versa.</p>\n<p>N lines follow: N+i<sup>th</sup>&nbsp;line contains the color of the i<sup>th</sup>&nbsp;node.</p>\n<p>M lines follow: Each line containg a single integer s.</p>\n<p><strong>Output Format</strong><br />Output exactly M lines, each line containing the output of the i<sub>th</sub>&nbsp;query.</p>\n<p><strong>Constraints</strong><br />0 &lt;= M &lt;= 10<sup>5</sup><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= root &lt;= N<br />1 &lt;= color of the Node &lt;= 10<sup>9</sup></p>\n<p><strong>Example</strong></p>\n<p><strong>Sample Input</strong></p>\n<pre><code>4 2 1\n1 2\n2 4\n2 3\n10\n20\n20\n30\n1\n2\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3\n2\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>Query 1-Subtree rooted at 1 is the entire tree and colors used are 10 20 20 30 , so the answer is 3(10,20 and 30)</p>\n<p>Query 2-Subtree rooted at 2 contains color 20 20 30, so the answer is 2(20 and 30)</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/36285905-c142-4304-a315-edbf7ddeb736",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94fc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 100,
  "slug": "heavy-light-2-white-falcon",
  "tags": [],
  "level": "EXPERT",
  "title": "Heavy Light 2 White Falcon",
  "content": "<p>White Falcon was amazed by what she can do with heavy-light decomposition on trees. As a resut, she wants to improve her expertise on heavy-light decomposition. Her teacher gave her an another assignment which requires path updates. As always, White Falcon needs your help with the assignment.<br />You are given a tree with $N$ nodes and each node's value $v a l_{i}$ is initially 0 .<br />Let's denote the path from node $u$ to node $v$ like this: $p_{1}, p_{2}, p_{3}, \\ldots, p_{k}$, where $p_{1}=u$ and $p_{k}=v$, and $p_{i}$ and $p_{i+1}$ are connected.<br />The problem asks you to operate the following two types of queries on the tree:<br />- \"1 u $\\vee \\mathrm{x}^{\\prime \\prime}$ Add $x$ to $\\operatorname{val}_{p_{1}}, 2 x$ to $\\operatorname{val}_{p_{2}}, 3 x$ to $v a l_{p_{3}}, \\ldots, k x$ to $v a l_{p_{k}}$<br />- \"2 u v\" print the sum of the nodes' values on the path between $u$ and $v$ at modulo $10^{9}+7$.<br />Input Format<br />First line cosists of two integers $N$ and $Q$ seperated by a space.<br />Following $N-1$ lines contains two integers which denote the undirectional edges of the tree.<br />Following $Q$ lines contains one of the query types described above.<br />Note: Nodes are numbered by using 0-based indexing.<br />Constraints<br />$$<br />\\begin{aligned}<br />&amp;1 \\leq N, Q \\leq 50000 \\\\<br />&amp;0 \\leq x&lt;10^{9}+7<br />\\end{aligned}<br />$$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For every query of second type print a single integer.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3 2\n0 1\n1 2\n1 0 2 1\n2 1 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>After the first type of query, $v a l_{0}=1, v a l_{1}=2, v a l_{2}=3$. Hence the answer of the second query is $2+3=5$.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/fdc9cd1a-86e5-4985-b74e-b5bd695c9db2",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94fd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 120,
  "slug": "recalling-early-days-gp-with-trees",
  "tags": [],
  "level": "EXPERT",
  "title": "Recalling Early Days GP with Trees",
  "content": "<p><a href=\"https://hr-testcases.s3.amazonaws.com/959/959-chinese.md\">Chinese Version</a><br /><a href=\"https://hr-testcases.s3.amazonaws.com/959/959_rus.md\">Russian Version</a></p>\n<p>You are given a&nbsp;<a href=\"http://en.wikipedia.org/wiki/Tree_%28graph_theory%29\">tree</a>&nbsp;with N nodes and each has a value associated with it. You are given Q queries, each of which is either an update or a retrieval operation.</p>\n<p>The&nbsp;<strong>update query</strong>&nbsp;is of the format</p>\n<pre><code>i j X\n</code></pre>\n<p>This means you'd have to add a&nbsp;<a href=\"http://en.wikipedia.org/wiki/Geometric_progression\">GP</a>&nbsp;series to the nodes which lie in the path from node&nbsp;<code>i</code>&nbsp;to node&nbsp;<code>j</code>&nbsp;(both inclusive) with first term of the GP as&nbsp;<code>X</code>&nbsp;on node&nbsp;<code>i</code>&nbsp;and the common ratio as&nbsp;<code>R</code>&nbsp;(given in the input)</p>\n<p>The&nbsp;<strong>retrieval</strong>&nbsp;query is of the format</p>\n<p>i j</p>\n<p>You need to return the sum of the node values (S) lying in the path from node i to node j modulo 100711433.</p>\n<p><strong>Input Format</strong><br />The first line contains two integers (N and R respectively) separated by a space.<br />In the next N-1 lines, the i<sup>th</sup>&nbsp;line describes the i<sup>th</sup>&nbsp;edge: a line with two integers a b separated by a single space denotes an edge between a, b.<br />The next line contains 2 space separated integers (U and Q respectively) representing the number of Update and Query operations to follow.<br />U lines follow. Each of the next U lines contains 3 space separated integers (i,j, and X respectively).<br />Each of the next Q lines contains 2 space separated integers, i and j respectively.</p>\n<p><strong>Output Format</strong><br />It contains exactly Q lines and each line containing the answer of the i<sup>th</sup>&nbsp;query.</p>\n<p><strong>Constraints</strong></p>\n<p>2 &lt;= N &lt;= 100000<br />2 &lt;= R &lt;= 10<sup>9</sup><br />1 &lt;= U &lt;= 100000<br />1 &lt;= Q &lt;= 100000<br />1 &lt;= X &lt;= 10<br />1 &lt;= a, b, i, j &lt;= N</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>6 2\n1 2\n1 4\n2 6\n4 5\n4 3\n2 2\n1 6 3\n5 3 5\n6 4\n5 1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>31\n18\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>The node values after the first updation becomes :</p>\n<pre><code>3 6 0 0 0 12  \n</code></pre>\n<p>The node values after second updation becomes :</p>\n<pre><code>3 6 20 10 5 12  \n</code></pre>\n<p>Answer to Query #1: 12 + 6 + 3 + 10 = 31<br />Answer to Query #2: 5 + 10 +3 = 18</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/756d0faf-edd5-4b5f-974c-84ad8a1acb85",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dbc42e9b9821851ef94fe"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 120,
  "slug": "white-falcon-and-tree",
  "tags": [],
  "level": "EXPERT",
  "title": "White Falcon And Tree",
  "content": "<p>White Falcon has a tree with $N$ nodes. Each node contains a linear function. Let's denote by $f_{u}(x)$ the linear function contained in the node $u$.<br />Let's denote the path from node $u$ to node $v$ like this: $p_{1}, p_{2}, p_{3}, \\ldots, p_{k}$, where $p_{1}=u$ and $p_{k}=v$, and $p_{i}$ and $p_{i+1}$ are connected.<br />White Falcon also has $Q$ queries. They are in the following format:<br />1. $1 u v a b$. Assign $a x+b$ as the function of all the nodes on the path from $u$ to $v$, i.e., $f_{p_{i}}(x)$ is changed to $a x+b$ where $p_{1}, p_{2}, p_{3}, \\ldots, p_{k}$ is the path from $u$ to $v$.<br />2. $2 u v x$. Calculate $f_{p_{k}}\\left(f_{p_{k-1}}\\left(f_{p_{k-2}}\\left(\\ldots f_{p_{1}}(x)\\right)\\right)\\right)$ modulo $\\left(10^{9}+7\\right)$<br />Input Format<br />The first line contains $N$, the number of nodes. The following $N$ lines each contain two integers $a$ and $b$ that describe the function $a x+b$<br />Following $N-1$ lines contain edges of the tree.<br />The next line contains $Q$, the number of queries. Each subsequent line contains one of the queries described above.<br />Output Format<br />For every query of the second kind, print one line containing an integer, the answer for that query.<br />Constraints<br />$1 \\leq N \\leq 50000$ (Number of nodes)<br />$1 \\leq Q \\leq 50000$ (Number of queries)<br />$0 \\leq a, b, x&lt;10^{9}+7$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n1 1\n1 2\n1 2\n2\n1 2 2 1 1\n2 1 2 1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n</div>\n<p>$f_{1}(1)=2$<br />$f_{2}(2)=3$</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c9ea6073-c1b3-4b1d-89c4-c032a5a61b05",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
}]