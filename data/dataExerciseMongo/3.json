[{
  "_id": {
    "$oid": "634dba84e9b9821851ef9380"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "adfruits-advanced-fruits",
  "tags": [],
  "level": "EXPERT",
  "title": "Sáng tạo tên cho các loại trái cây",
  "content": "<p>C&ocirc;ng ty \"Tr&aacute;i c&acirc;y thế kỷ 21\" đ&atilde; chuy&ecirc;n tạo ra c&aacute;c loại tr&aacute;i c&acirc;y mới bằng c&aacute;ch chuyển gen từ tr&aacute;i c&acirc;y n&agrave;y v&agrave;o bộ gen của tr&aacute;i c&acirc;y kh&aacute;c. Hầu hết c&aacute;c phương ph&aacute;p n&agrave;y kh&ocirc;ng hiệu quả, nhưng đ&ocirc;i khi, trong một số trường hợp hiếm hoi, một loại tr&aacute;i c&acirc;y mới xuất hiện c&oacute; vị giống như hỗn hợp giữa cả hai loại tr&aacute;i c&acirc;y.</p>\n<div id=\"problem-body\">\n<p>Một chủ đề thảo luận lớn trong c&ocirc;ng ty l&agrave; \"C&aacute;c c&acirc;y s&aacute;ng tạo mới n&ecirc;n được gọi như thế n&agrave;o?\" Tất nhi&ecirc;n, một hỗn hợp giữa t&aacute;o v&agrave; l&ecirc; c&oacute; thể được gọi l&agrave; apple-pear, nhưng điều n&agrave;y nghe c&oacute; vẻ kh&ocirc;ng th&uacute; vị cho lắm. Cuối c&ugrave;ng, &ocirc;ng chủ quyết định sử dụng chuỗi ngắn nhất chứa cả t&ecirc;n của c&aacute;c loại tr&aacute;i c&acirc;y ban đầu l&agrave;m chuỗi con l&agrave;m t&ecirc;n mới. V&iacute; dụ: \"applear\" chứa \"apple\" v&agrave; \"pear\" (APPLEar v&agrave; apPlEAR) v&agrave; kh&ocirc;ng c&oacute; chuỗi n&agrave;o ngắn hơn c&oacute; c&ugrave;ng thuộc t&iacute;nh. V&iacute; dụ, sự kết hợp giữa cranberry v&agrave; boysenberry sẽ được gọi l&agrave; \"boysecranberry\" or a \"craboysenberry\".</p>\n<p>C&ocirc;ng việc của bạn l&agrave; viết một chương tr&igrave;nh t&iacute;nh to&aacute;n một c&aacute;i t&ecirc;n ngắn nhất cho tổ hợp của hai loại quả đ&atilde; cho. Thuật to&aacute;n của bạn phải hiệu quả, nếu kh&ocirc;ng, n&oacute; kh&ocirc;ng chắc sẽ thực thi trong thời gian quy định đối với t&ecirc;n của c&aacute;c quả d&agrave;i.</p>\n<p><strong>Định dạng đầu v&agrave;o</strong></p>\n<p>Mỗi d&ograve;ng của tệp đầu v&agrave;o chứa hai chuỗi k&yacute; tự biểu thị t&ecirc;n của c&aacute;c loại tr&aacute;i c&acirc;y được kết hợp. Tất cả c&aacute;c t&ecirc;n c&oacute; độ d&agrave;i tối đa l&agrave; 100 v&agrave; chỉ bao gồm c&aacute;c k&yacute; tự chữ c&aacute;i. Đầu v&agrave;o được kết th&uacute;c ở cuối tệp.</p>\n<p><strong>Định dạng đầu ra</strong></p>\n<p>Đối với mỗi trường hợp thử nghiệm, in ra t&ecirc;n ngắn nhất của quả kết quả tr&ecirc;n một d&ograve;ng. Nếu c&oacute; thể c&oacute; nhiều hơn một t&ecirc;n ngắn nhất, bất kỳ t&ecirc;n n&agrave;o cũng được chấp nhận.</p>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>apple peach\nananas banana\npear peach</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>appleach\nbananas\npearch</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/42734f37-4ce9-4dfe-b178-344bc377e9f2",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ADFRUITS_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9381"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "addrev-them-so-dao-nguoc",
  "tags": [],
  "level": "EXPERT",
  "title": "Thêm số đảo ngược",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>C&aacute;c diễn vi&ecirc;n h&agrave;i cổ của Malidinesia th&iacute;ch phim h&agrave;i hơn bi kịch. Tiếc thay, hầu hết c&aacute;c vở tuồng cổ đều l&agrave; vở bi kịch. Do đ&oacute;, cố vấn kịch t&iacute;nh của ACM đ&atilde; quyết định chuyển một số bi kịch th&agrave;nh phim h&agrave;i. R&otilde; r&agrave;ng, c&ocirc;ng việc n&agrave;y l&agrave; rất kh&oacute; v&igrave; &yacute; thức cơ bản của vở kịch phải được giữ nguy&ecirc;n vẹn, mặc d&ugrave; tất cả mọi thứ đều thay đổi theo hướng đối lập của ch&uacute;ng. V&iacute; dụ c&aacute;c con số: nếu bất kỳ con số n&agrave;o xuất hiện trong bi kịch, n&oacute; phải được chuyển sang dạng đảo ngược của n&oacute; trước khi được chấp nhận v&agrave;o vở h&agrave;i kịch.</p>\n<div id=\"problem-body\">\n<p>Số đảo ngược l&agrave; số được viết bằng chữ số Ả Rập nhưng thứ tự c&aacute;c chữ số bị đảo ngược.&nbsp;Chữ số đầu ti&ecirc;n trở th&agrave;nh chữ số cuối c&ugrave;ng v&agrave; ngược lại.&nbsp;V&iacute; dụ, nếu anh h&ugrave;ng ch&iacute;nh c&oacute; 1245 quả d&acirc;u t&acirc;y trong thảm kịch, anh ta c&oacute; 5421 quả d&acirc;u t&acirc;y trong số đ&oacute; b&acirc;y giờ.&nbsp;Lưu &yacute; rằng tất cả c&aacute;c số 0 ở đầu đều bị bỏ qua.&nbsp;Điều đ&oacute; c&oacute; nghĩa l&agrave; nếu số kết th&uacute;c bằng số 0, số 0 sẽ bị mất bằng c&aacute;ch đảo ngược (v&iacute; dụ: 1200 cho 21).&nbsp;Cũng lưu &yacute; rằng số đảo ngược kh&ocirc;ng bao giờ c&oacute; bất kỳ số kh&ocirc;ng ở cuối.</p>\n<p>ACM cần t&iacute;nh to&aacute;n với c&aacute;c số đảo ngược.&nbsp;Nhiệm vụ của bạn l&agrave; cộng hai số đảo ngược v&agrave; xuất ra tổng đảo ngược của ch&uacute;ng.&nbsp;Tất nhi&ecirc;n, kết quả kh&ocirc;ng phải l&agrave; duy nhất v&igrave; bất kỳ số cụ thể n&agrave;o cũng l&agrave; dạng đảo ngược của một số số (v&iacute; dụ: 21 c&oacute; thể l&agrave; 12, 120 hoặc 1200 trước khi đảo ngược).&nbsp;V&igrave; vậy, ch&uacute;ng ta phải giả định rằng kh&ocirc;ng c&oacute; số 0 n&agrave;o bị mất khi đảo ngược (v&iacute; dụ: giả sử rằng số ban đầu l&agrave; 12).</p>\n<h3>Đầu v&agrave;o</h3>\n<ul>\n<li>Đầu v&agrave;o bao gồm&nbsp;<var>N</var>&nbsp;trường hợp (bằng khoảng 10000).&nbsp;D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chỉ chứa dương t&iacute;nh số nguy&ecirc;n&nbsp;<var>N</var>&nbsp;.&nbsp;Sau đ&oacute;, theo d&otilde;i c&aacute;c trường hợp.&nbsp;Mỗi trường hợp bao gồm đ&uacute;ng một d&ograve;ng với hai số nguy&ecirc;n dương c&aacute;ch nhau bởi dấu c&aacute;ch.&nbsp;Đ&acirc;y l&agrave; những số đảo ngược m&agrave; bạn phải th&ecirc;m v&agrave;o.</li>\n</ul>\n<h3>Đầu ra</h3>\n<ul>\n<li>Đối với mỗi trường hợp, in ch&iacute;nh x&aacute;c một d&ograve;ng chỉ chứa một số nguy&ecirc;n - tổng đảo ngược của hai số đảo ngược.&nbsp;Bỏ qua bất kỳ số kh&ocirc;ng ở đầu trong kết quả đầu ra.</li>\n</ul>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3\n24 1\n4358 754\n305 794</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>34 1998 1</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5e2690fb-e57f-4b51-b8e1-1fef02bd414b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ADDREV_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9382"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "acpc10a-whats-next",
  "tags": [],
  "level": "EXPERT",
  "title": "Cấp số cộng hay cấp số nhân?",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Theo Wikipedia, một cấp số cộng (AP) l&agrave; một d&atilde;y số sao cho hiệu của hai phần tử li&ecirc;n tiếp bất kỳ của d&atilde;y l&agrave; một hằng số. V&iacute; dụ: d&atilde;y 3, 5, 7, 9, 11, 13 ,. . . l&agrave; một cấp số cộng với hiệu chung l&agrave; 2. Đối với b&agrave;i to&aacute;n n&agrave;y, ch&uacute;ng ta sẽ tự giới hạn ở cấp số cộng c&oacute; hiệu chung l&agrave; một số nguy&ecirc;n kh&aacute;c 0.</p>\n<p>On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18, 54, . . . is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric progression whose common ratio is a non-zero integer.</p>\n<p>Mặt kh&aacute;c, cấp số nh&acirc;n (GP) l&agrave; một d&atilde;y số, trong đ&oacute;, mỗi số hạng đứng sau số hạng đầu ti&ecirc;n được t&igrave;m bằng c&aacute;ch nh&acirc;n số hạng trước với một số kh&aacute;c 0 cố định được gọi l&agrave; tỷ số chung. V&iacute; dụ, d&atilde;y số 2, 6, 18, 54 ,. . . l&agrave; một cấp số nh&acirc;n với tỉ số chung l&agrave; 3. Đối với b&agrave;i to&aacute;n n&agrave;y, ch&uacute;ng ta sẽ tự giới hạn ở cấp số nh&acirc;n c&oacute; tỉ số chung l&agrave; một số nguy&ecirc;n kh&aacute;c 0.</p>\n<div id=\"problem-body\">\n<p>Với ba phần tử li&ecirc;n tiếp của một d&atilde;y, bạn cần x&aacute;c định kiểu loại của d&atilde;y số v&agrave; phần tử kế tiếp tiếp theo.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Chương tr&igrave;nh của bạn sẽ được thử nghiệm tr&ecirc;n một hoặc nhiều trường hợp thử nghiệm. Mỗi trường hợp được chỉ định tr&ecirc;n một d&ograve;ng c&oacute; ba số nguy&ecirc;n (&minus;10, 000 &lt;a1, a2, a3 &lt;10, 000) trong đ&oacute; a1, a2 v&agrave; a3 l&agrave; kh&aacute;c nhau. Trường hợp cuối c&ugrave;ng được theo sau bởi một d&ograve;ng c&oacute; ba số 0.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm, chương tr&igrave;nh của bạn phải in ra một d&ograve;ng duy nhất với dạng như sau: XX v</p>\n<p>Trong đ&oacute; XX l&agrave; cấp số cộng hoặc cấp số nh&acirc;n t&ugrave;y thuộc v&agrave;o d&atilde;y số đ&atilde; cho. v l&agrave; phần tử tiếp theo của d&atilde;y đ&atilde; cho. Tất cả c&aacute;c trường hợp đầu v&agrave;o được đảm bảo l&agrave; một cấp số cộng hoặc cấp số nh&acirc;n.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>4 7 10\n2 6 18\n0 0 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>AP 13\nGP 54</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/cf8a887e-7008-4448-9844-8fad900a6aac",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ACPC10A_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9383"
  },
  "memoryLimit": 2,
  "source": 2,
  "timeLimit": 2,
  "scores": 50,
  "slug": "acode-alphacode",
  "tags": [],
  "level": "EXPERT",
  "title": "Bảng mã Alpha",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Alice v&agrave; Bob cần gửi tin nhắn b&iacute; mật cho nhau v&agrave; đang thảo luận về c&aacute;ch m&atilde; h&oacute;a tin nhắn của họ:</p>\n<div id=\"problem-body\">\n<blockquote>\n<p>Alice: &ldquo;H&atilde;y chỉ sử dụng một m&atilde; rất đơn giản: Ch&uacute;ng ta sẽ g&aacute;n cho&lsquo; A &rsquo; l&agrave; m&atilde; 1,&lsquo; B &rsquo;sẽ l&agrave; 2 v&agrave; cứ tiếp tục cho đến&lsquo; Z &rsquo;được g&aacute;n l&agrave; 26.&rdquo;</p>\n<p>Bob: &ldquo;Đ&oacute; l&agrave; một đoạn m&atilde; sai lầm, Alice. Giả sử t&ocirc;i gửi cho bạn từ &lsquo;BEAN&rsquo; được m&atilde; h&oacute;a l&agrave; 25114. Bạn c&oacute; thể giải m&atilde; từ đ&oacute; theo nhiều c&aacute;ch kh&aacute;c nhau! &rdquo;</p>\n<p>Alice: &ldquo;Chắc chắn l&agrave; bạn c&oacute; thể, nhưng bạn sẽ nhận được những từ n&agrave;o? Ngo&agrave;i &lsquo;BEAN&rsquo;, bạn sẽ nhận được &lsquo;BEAAD&rsquo;, &lsquo;YAAD&rsquo;, &lsquo;YAN&rsquo;, &lsquo;YKD&rsquo; v&agrave; &lsquo;BEKD&rsquo;. T&ocirc;i nghĩ rằng bạn sẽ c&oacute; thể t&igrave;m ra lời giải m&atilde; ch&iacute;nh x&aacute;c. V&agrave; tại sao bạn lại gửi cho t&ocirc;i từ &lsquo;BEAN&rsquo;? &rdquo;</p>\n<p>Bob: &ldquo;Được rồi, c&oacute; thể đ&oacute; l&agrave; một v&iacute; dụ sai, nhưng t&ocirc;i c&aacute; với bạn rằng nếu bạn c&oacute; một chuỗi d&agrave;i 5000 th&igrave; sẽ c&oacute; rất nhiều c&aacute;ch giải m&atilde; kh&aacute;c nhau v&agrave; với nhiều giải m&atilde; đ&oacute;, bạn sẽ t&igrave;m thấy &iacute;t nhất hai giải m&atilde; kh&aacute;c nhau c&oacute; &yacute; nghĩa&rdquo;.</p>\n<p>Alice: \"C&oacute; bao nhi&ecirc;u c&aacute;ch giải m&atilde; kh&aacute;c nhau?\"</p>\n<p>Bob: \"Jillions!\"</p>\n</blockquote>\n<p>V&igrave; một số l&yacute; do, Alice vẫn kh&ocirc;ng cảm thấy thuyết phục bởi lập luận của Bob, v&igrave; vậy c&ocirc; ấy y&ecirc;u cầu một chương tr&igrave;nh sẽ x&aacute;c định số lượng c&aacute;ch giải m&atilde; c&oacute; thể c&oacute; cho một chuỗi k&yacute; tự nhất định bằng c&aacute;ch sử dụng m&atilde; của c&ocirc; ấy.</p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Đầu v&agrave;o sẽ bao gồm nhiều tập hợp đầu v&agrave;o. Mỗi tập hợp sẽ bao gồm một d&ograve;ng tối đa l&agrave; 5000 chữ số đại diện cho một c&aacute;ch m&atilde; h&oacute;a hợp lệ (v&iacute; dụ: kh&ocirc;ng c&oacute; d&ograve;ng n&agrave;o bắt đầu bằng số 0). Sẽ kh&ocirc;ng c&oacute; khoảng trắng giữa c&aacute;c chữ số. D&ograve;ng đầu v&agrave;o l&agrave; '0' sẽ kết th&uacute;c đầu v&agrave;o v&agrave; kh&ocirc;ng được xử l&yacute;.</p>\n<h3>Định dạng đầu ra</h3>\n<p>Đối với mỗi tập hợp đầu v&agrave;o, in ra số lượng c&aacute;ch giải m&atilde; c&oacute; thể c&oacute; cho chuỗi k&yacute; tự đầu v&agrave;o. Tất cả c&aacute;c c&acirc;u trả lời sẽ nằm trong phạm vi của một số nguy&ecirc;n c&oacute; dấu 64 bit.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>25114\n1111111111\n3333333333\n0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>6\n89\n1</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7cdd566d-2bce-4767-abd3-7646fc194e66",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ACODE _input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9384"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 20,
  "slug": "abcpath-abc-path",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Đường dẫn ABC",
  "content": "<p>Bạn sẽ được cung cấp một ma trận 2 chiều gồm c&aacute;c chữ c&aacute;i. T&igrave;m độ d&agrave;i của con đường d&agrave;i nhất của c&aacute;c chữ c&aacute;i li&ecirc;n tiếp, bắt đầu từ 'A'. C&aacute;c đường dẫn c&oacute; thể chuyển từ một chữ c&aacute;i trong ma trận sang bất kỳ chữ c&aacute;i n&agrave;o liền kề (theo chiều ngang, chiều dọc hoặc đường ch&eacute;o). V&iacute; dụ: Trong ma trận sau, c&oacute; một số đường dẫn từ 'A' đến 'D', nhưng kh&ocirc;ng c&oacute; đường n&agrave;o từ 'A' đến 'E':</p>\n<div id=\"problem-body\">\n<div><img style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"ABC\" src=\"https://www.spoj.com/content/simes:ABCPATH-1.png\" alt=\"ABC\" width=\"162\" height=\"108\" /></div>\n<p>Một đường thỏa m&atilde;n b&agrave;i to&aacute;n tr&ecirc;n l&agrave;:</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"ABC path\" src=\"https://www.spoj.com/content/simes:ABCPATH-2.png\" alt=\"path\" width=\"163\" height=\"108\" /></p>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p>Each test case will start with a line contains two integers H, W the height and width of the grid respectively 1 &lt;= H, W &lt;= 50. Then H lines follow each of W uppercase letters only. Input terminates with H = 0 and W = 0.</p>\n<p>Mỗi trường hợp thử nghiệm sẽ bắt đầu bằng một d&ograve;ng chứa hai gi&aacute; trị số nguy&ecirc;n H, W, chiều cao v&agrave; chiều rộng của ma trận theo thứ tự lần lượt. Tiếp theo l&agrave; H d&ograve;ng nối theo sau mỗi W chữ c&aacute;i viết hoa. Đầu v&agrave;o kết th&uacute;c với H = 0 v&agrave; W = 0.</p>\n<h3><strong> Điều kiện</strong></h3>\n<ul>\n<li>$1 \\leq H$</li>\n<li>$W \\leq 50$</li>\n</ul>\n<h3>Định dạng đầu ra</h3>\n<p>Chỉ in ra 1 d&ograve;ng đối với mỗi trường hợp thử nghiệm</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>4 3\nABE\nCFG\nBDH\nABC\n0 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>4</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a421efb1-0784-4681-8b30-eae6117b6058",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ABCPATHinput.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9385"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 50,
  "slug": "1ae00-rectangles",
  "tags": [],
  "level": "EXPERT",
  "title": "Tạo ra các hình chữ nhật",
  "content": "<p id=\"đề-b&agrave;i\"><strong>B&agrave;i to&aacute;n</strong></p>\n<p>Th&aacute;i c&oacute; N h&igrave;nh vu&ocirc;ng với k&iacute;ch thước 1. Hỏi c&oacute; bao nhi&ecirc;u dạng h&igrave;nh chữ nhật m&agrave; Th&aacute;i c&oacute; thể&nbsp;tạo ra từ những h&igrave;nh vu&ocirc;ng n&agrave;y?</p>\n<p>Biết rằng, 2 h&igrave;nh chữ nhật được xem l&agrave; kh&aacute;c nhau nếu ch&uacute;ng kh&ocirc;ng thể quay hay dịch chuyển để trở th&agrave;nh h&igrave;nh c&ograve;n lại. Trong qu&aacute; tr&igrave;nh x&acirc;y dựng l&ecirc;n h&igrave;nh chữ nhật, Th&aacute;i kh&ocirc;ng thể l&agrave;m thay đổi h&igrave;nh&nbsp;dạng của c&aacute;c h&igrave;nh vu&ocirc;ng v&agrave; cũng kh&ocirc;ng thể đặt ch&uacute;ng l&ecirc;n tr&ecirc;n những h&igrave;nh c&ograve;n lại.</p>\n<p id=\"đầu-v&agrave;o\"><strong>Định dạng đầu v&agrave;o</strong></p>\n<ul>\n<li>Gồm chỉ một d&ograve;ng chứa một số nguy&ecirc;n N, với $1 \\leq N \\leq 10000$.</li>\n</ul>\n<p id=\"đầu-ra\"><strong>Định dạng đầu ra</strong></p>\n<ul>\n<li>In ra chỉ một d&ograve;ng chứa một số nguy&ecirc;n l&agrave; những h&igrave;nh chữ nhật m&agrave; Th&aacute;i c&oacute; thể tạo ra.</li>\n</ul>\n<p id=\"v&iacute;-dụ\"><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>6</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>8</code></pre>\n<p><strong>Giải th&iacute;ch</strong></p>\n<p>Với N = 6 h&igrave;nh vu&ocirc;ng, ta c&oacute; thể tạo ra h&igrave;nh chữ nhật bằng c&aacute;ch lần lượt x&eacute;t c&aacute;c h&igrave;nh chữ nhật với chiều cao bằng 1 hoặc 2 như h&igrave;nh dưới đ&acirc;y.</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://thuattoan.phamvanlam.com/static/b0e61ff7e847af9628e9918575efd81a/ff7a3/spoj-com-thuat-toan-bai-1AE00-Rectangles-thuattoan-phamvanlam-com.png\" alt=\"spoj-com-thuat-toan-bai-1ae00-rectangles-thuattoan-phamvanlam-com\" /></p>\n<p>Do đ&oacute;, kết quả l&agrave; 8 h&igrave;nh chữ nhật.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d292bd31-dae8-4d5d-85e2-7edc7d092c7f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "1AE00_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9386"
  },
  "memoryLimit": 2,
  "source": 2,
  "timeLimit": 2,
  "scores": 50,
  "slug": "aba12c-mua-tao",
  "tags": [],
  "level": "EXPERT",
  "title": "Mua táo",
  "content": "<h2 id=\"problem-name\" class=\"text-center\">B&agrave;i to&aacute;n mua t&aacute;o</h2>\n<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<div id=\"problem-body\">\n<p>Harish đ&atilde; đến một si&ecirc;u thị để mua đ&uacute;ng 'k' kg t&aacute;o cho 'n' người bạn của m&igrave;nh.&nbsp;Si&ecirc;u thị thực sự kỳ lạ.&nbsp;Gi&aacute; của c&aacute;c mặt h&agrave;ng rất kh&aacute;c nhau.&nbsp;Anh v&agrave;o mục T&aacute;o v&agrave; hỏi về gi&aacute; cả.&nbsp;Người b&aacute;n h&agrave;ng đưa cho anh một tấm thẻ ghi gi&aacute; t&aacute;o kh&ocirc;ng t&iacute;nh theo kg.&nbsp;T&aacute;o được đ&oacute;ng th&agrave;nh từng b&igrave;a, mỗi b&igrave;a chứa 'x' kg t&aacute;o, x&gt; 0 v&agrave; 'x' l&agrave; một số nguy&ecirc;n.&nbsp;Một g&oacute;i 'x' kg sẽ được định gi&aacute; bằng rupee 'y'.&nbsp;V&igrave; vậy, tấm bảng chứa một bảng c&oacute; mục nhập 'y' biểu thị gi&aacute; của một g&oacute;i 'x' kg.&nbsp;Nếu 'y' l&agrave; -1 c&oacute; nghĩa l&agrave; g&oacute;i tương ứng kh&ocirc;ng c&oacute; sẵn.&nbsp;B&acirc;y giờ v&igrave; t&aacute;o chỉ c&oacute; sẵn trong c&aacute;c g&oacute;i, anh ấy quyết định mua &iacute;t nhất 'n' g&oacute;i cho 'n' bạn của m&igrave;nh, tức l&agrave; anh ấy sẽ kh&ocirc;ng mua nhiều hơn n g&oacute;i t&aacute;o.</p>\n<p>Harish rất th&iacute;ch bạn b&egrave; của m&igrave;nh v&agrave; v&igrave; vậy anh ấy kh&ocirc;ng muốn l&agrave;m bạn b&egrave; thất vọng.&nbsp;V&igrave; vậy, b&acirc;y giờ, anh ấy sẽ cho bạn biết anh ấy c&oacute; bao nhi&ecirc;u người bạn v&agrave; bạn phải cho anh ấy biết số tiền tối thiểu anh ấy phải chi cho bạn b&egrave; của m&igrave;nh.</p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<ul>\n<li>D&ograve;ng đầu ti&ecirc;n của dữ liệu đầu v&agrave;o sẽ chứa số lượng trường hợp thử nghiệm, C.</li>\n<li>Mỗi trường hợp thử nghiệm sẽ chứa hai d&ograve;ng.</li>\n<li>D&ograve;ng đầu ti&ecirc;n ghi N v&agrave; K, số bạn b&egrave; m&agrave; anh ta c&oacute; v&agrave; số lượng t&aacute;o t&iacute;nh theo ki-l&ocirc;-gam m&agrave; anh ta n&ecirc;n mua.</li>\n<li>D&ograve;ng thứ hai chứa K số nguy&ecirc;n được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch, trong đ&oacute; số nguy&ecirc;n thứ i chỉ định gi&aacute; của g&oacute;i t&aacute;o 'i'kg.&nbsp;Gi&aacute; trị -1 biểu thị rằng g&oacute;i tương ứng kh&ocirc;ng khả dụng.</li>\n</ul>\n<p><strong>Điều kiện</strong></p>\n<ul>\n<li>Số nguy&ecirc;n N sao cho $0 &lt; N \\leq 100$</li>\n<li>Số nguy&ecirc;n K sao cho $0 &lt; K \\leq 100$</li>\n<li>Gi&aacute; cả M sao cho $0 &lt; M \\leq 1000$</li>\n</ul>\n<p><strong>Đầu ra</strong></p>\n<p>Đầu ra cho mỗi trường hợp thử nghiệm phải l&agrave; một d&ograve;ng duy nhất chứa số tiền tối thiểu m&agrave; anh ta phải chi cho bạn b&egrave; của m&igrave;nh.&nbsp;In -1 nếu anh ta kh&ocirc;ng thể thỏa m&atilde;n bạn b&egrave; của m&igrave;nh.</p>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n3 5\n-1 -1 4 5 -1\n5 5\n1 2 3 4 5</code></pre>\n<p><strong>Đầu ra:</strong></p>\n<pre class=\"language-markup\"><code>-1 5</code></pre>\n<p><strong>Giải th&iacute;ch c&aacute;c trường hợp kiểm thử:</strong></p>\n<ol>\n<li>V&igrave; cửa h&agrave;ng chỉ c&oacute; g&oacute;i 3 v&agrave; 4kg n&ecirc;n anh ta sẽ kh&ocirc;ng thể l&agrave;m h&agrave;i l&ograve;ng bạn b&egrave; v&igrave; anh ta sẽ kh&ocirc;ng thể mua đ&uacute;ng 5kg t&aacute;o.</li>\n<li>Anh ta c&oacute; thể mua năm g&oacute;i 1kg v&igrave; anh ta phải mua 5 kg. V&igrave; vậy, số tiền tối thiểu anh ta n&ecirc;n chi l&agrave; 5.</li>\n</ol>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7e278b83-5562-4a82-938a-b7ecfd4847ad",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ABA12C _input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9387"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 10,
  "slug": "test-life-the-universe-and-everything",
  "tags": [],
  "level": "BEGINNER",
  "title": "Vạn vật",
  "content": "<p>Chương tr&igrave;nh của bạn l&agrave; sử dụng phương ph&aacute;p Brute-force để t&igrave;m ra c&acirc;u trả lời cho sự sống, vũ trụ v&agrave; vạn vật. Ch&iacute;nh x&aacute;c hơn l&agrave; ... viết lại c&aacute;c số nhỏ từ đầu v&agrave;o đến đầu ra. Dừng xử l&yacute; đầu v&agrave;o sau khi đọc số 42. Tất cả c&aacute;c số ở đầu v&agrave;o l&agrave; số nguy&ecirc;n c&oacute; một hoặc hai chữ số.</p>\n<div id=\"problem-body\">\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n2\n88\n42\n99</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>1\n2\n88\n </code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/67b4f09f-d10e-4107-9b66-f449be5fda6c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "TEST_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9388"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 20,
  "slug": "sumscalc-sums-to-calculate",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Tính các tổng",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Cho một số nguy&ecirc;n n, nhiệm vụ của bạn l&agrave; t&iacute;nh c&aacute;c tổng sau:</p>\n<div id=\"problem-body\">\n<ul>\n<li>Tổng S của n số nguy&ecirc;n đầu ti&ecirc;n (bắt đầu từ 1)</li>\n<li>Tổng S<sub>even</sub><sup> </sup>&nbsp;của n số nguy&ecirc;n chẵn (bắt đầu từ 2)</li>\n<li>Tổng S<sub>odd</sub> của n số nguy&ecirc;n lẻ đầu ti&ecirc;n (bắt đầu từ 1)</li>\n<li>Tổng S<sub>squares</sub> của n gi&aacute; trị b&igrave;nh phương của số nguy&ecirc;n đầu ti&ecirc;n (1, 4, 9, ...)</li>\n<li>Tổng S<sub>cubes</sub> của n gi&aacute; trị mũ 3 của số nguy&ecirc;n đầu ti&ecirc;n (1, 8, 27, ...)</li>\n</ul>\n<h3>Định dạng đầu v&agrave;o</h3>\n<p><span lang=\"EN-US\">D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chứa một số nguy&ecirc;n T biểu thị số lượng trường hợp thử nghiệm. Tiếp theo l&agrave; m&ocirc; tả của T c&aacute;c trường hợp thử nghiệm. Mỗi trường hợp thử nghiệm được m&ocirc; tả trong một d&ograve;ng duy nhất chứa số nguy&ecirc;n &laquo;n&raquo; (1 &le; n&nbsp;&le; 10<sup>4</sup>).</span></p>\n<h3>Định dạng đầu ra</h3>\n<p><span lang=\"EN-US\">Đối với mỗi trường hợp thử nghiệm, h&atilde;y in ra một d&ograve;ng duy nhất chứa 5 số nguy&ecirc;n được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch: <strong>S S<sub>even</sub>&nbsp;S<sub>odd</sub>&nbsp;S<sub>squares</sub>&nbsp;S<sub>cubes</sub></strong></span></p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3\n4\n5\n6</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>10 20 16 30 100\n15 30 25 55 225\n21 42 36 91 441</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/19f344d4-7979-4bd9-b6ba-c577bddeb933",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "SUMSCALC_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9389"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "aggrcow-aggressive-cows",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Những chú bò tức giận",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Người n&ocirc;ng d&acirc;n John đ&atilde; x&acirc;y dựng nhiều chuồng mới, với N (2 &lt;= N &lt;= 100.000) chuồng. C&aacute;c chuồng nằm dọc theo một đường thẳng tại c&aacute;c vị tr&iacute; x1, ..., xN (0 &lt;= xi &lt;= 1.000.000.000).</p>\n<div id=\"problem-body\">\n<p>C con b&ograve; (2 &lt;= C &lt;= N) của anh ấy kh&ocirc;ng th&iacute;ch c&aacute;ch bố tr&iacute; chuồng n&agrave;y v&agrave; trở n&ecirc;n hung dữ với nhau sau khi được đưa v&agrave;o chuồng. Để tr&aacute;nh việc c&aacute;c con b&ograve; l&agrave;m tổn thương lẫn nhau, FJ muốn chỉ định c&aacute;c con b&ograve; v&agrave;o chuồng, sao cho khoảng c&aacute;ch tối thiểu giữa hai con c&agrave;ng lớn c&agrave;ng tốt. Vậy khoảng c&aacute;ch tối thiểu lớn nhất l&agrave; bao nhi&ecirc;u?</p>\n<h3>Đầu v&agrave;o</h3>\n<ul>\n<li><em>t</em> &ndash; số lượng c&aacute;c trường hợp thử nghiệm</li>\n<li>D&ograve;ng 1: 2 gi&aacute; trị số nguy&ecirc;n N v&agrave; C c&aacute;ch nhau một khoảng trắng</li>\n<li>D&ograve;ng 2..N+1: D&ograve;ng i+1 chứa vị tr&iacute; số nguy&ecirc;n, xi</li>\n</ul>\n<h3>Đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm xuất ra một số nguy&ecirc;n, l&agrave; khoảng c&aacute;ch tối thiểu lớn nhất.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>1\n5 3\n1\n2\n8\n4\n9</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>3</code></pre>\n<p><strong>Chi tiết về đầu ra</strong></p>\n<p>FJ c&oacute; thể xếp 3 con b&ograve; của m&igrave;nh v&agrave;o chuồng ở c&aacute;c vị tr&iacute; 1, 4 v&agrave; 8, tạo ra khoảng c&aacute;ch tối thiểu l&agrave; 3 con.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ecface50-2e63-4e0b-b883-6e1174d01f92",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "AGGRCOW_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938a"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "afs-trinh-tu-nhan-to-tuyet-voi",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Dãy số tuyệt vời",
  "content": "<div class=\"row\">\n<div id=\"problem-tags\" class=\"col-lg-12 text-center\"></div>\n</div>\n<p>Bhelu l&agrave; bạn c&ugrave;ng lớp của Bablu. Anh cảm thấy ghen tị với người bạn c&ugrave;ng lớp của m&igrave;nh v&agrave; quyết định thực hiện tạo tr&igrave;nh tự của ri&ecirc;ng m&igrave;nh. V&igrave; anh ấy kh&ocirc;ng c&oacute; nhiều tr&iacute; tưởng tượng, anh ấy đ&atilde; đưa ra định nghĩa gần như tương tự, chỉ tạo ra sự kh&aacute;c biệt trong f(n):</p>\n<div id=\"problem-body\">\n<ul>\n<li>a[0]=a[1]=0.</li>\n<li>Với n&gt;1, a[n]=a[n-1]+f(n), trong đ&oacute; f (n) l&agrave; tổng c&aacute;c số nguy&ecirc;n dương trong tập S sau đ&acirc;y.</li>\n<li>S = {x |&nbsp;x &lt;n v&agrave; n% x = 0}.</li>\n</ul>\n<p>B&acirc;y giờ, Bablu y&ecirc;u cầu anh ta tạo một m&atilde; để t&igrave;m f(n) v&igrave; anh ta đ&atilde; c&oacute; m&atilde; của d&atilde;y số của m&igrave;nh. V&igrave; vậy, Bhelu y&ecirc;u cầu sự gi&uacute;p đỡ của bạn v&igrave; anh ấy kh&ocirc;ng biết Lập tr&igrave;nh. Nhiệm vụ của bạn rất đơn giản, chỉ cần t&igrave;m một [n] cho một gi&aacute; trị cho trước của $n&lt;10^{6}.</p>\n<h3>Đầu v&agrave;o</h3>\n<ul>\n<li>Đoạn m&atilde; của bạn sẽ được kiểm tra cho nhiều trường hợp thử nghiệm.</li>\n<li>D&ograve;ng đầu ti&ecirc;n của dữ liệu đầu v&agrave;o chứa T (&lt;= 100), số lượng trường hợp Kiểm tra.</li>\n<li>T d&ograve;ng tiếp theo chứa một số nguy&ecirc;n dương N. (1 &lt;N &lt;10 ^ 6).</li>\n</ul>\n<h3>Đầu ra</h3>\n<p>D&ograve;ng đơn chứa [n] tức l&agrave; số thứ n của d&atilde;y cho mỗi trường hợp thử nghiệm.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o:</strong></p>\n<pre class=\"language-markup\"><code>3 3 4 5</code></pre>\n<p><strong>Đầu ra:</strong></p>\n<pre class=\"language-markup\"><code>2 5 6</code></pre>\n<p><strong>Giải th&iacute;ch</strong></p>\n<pre class=\"language-markup\"><code>f(2) = 1{1}\nf(3) = 1{1}\nf(4) = 3{1, 2}\nf(5) = 1{1}</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/09fc8c39-5df2-4686-bac0-ab6eac7b48bf",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "AFS_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938b"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "ae1b-bang",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Sửa bàn",
  "content": "<p>Byteman l&agrave;m nghề thợ mộc. Anh ấy vừa nhận được một đơn đặt h&agrave;ng b&agrave;n gỗ th&ocirc;ng của s. Mặc d&ugrave; anh ta c&oacute; rất nhiều v&aacute;n gỗ th&ocirc;ng trong xưởng của m&igrave;nh, nhưng anh ta vừa hết ốc v&iacute;t. Do đ&oacute; anh ta cần đi bộ đến nh&agrave; kho v&agrave; mang về một số hộp c&oacute; đinh v&iacute;t. Số hộp tối thiểu m&agrave; người đ&oacute; cần mang l&agrave; bao nhi&ecirc;u để c&oacute; đủ đinh v&iacute;t l&agrave;m c&aacute;c b&agrave;n?</p>\n<div id=\"problem-body\">\n<h2>Đầu v&agrave;o</h2>\n<p>D&ograve;ng đầu ti&ecirc;n của đầu v&agrave;o chuẩn chứa ba số nguy&ecirc;n n, k v&agrave; s (1 &le; n, k, s &le; 1000) được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch đơn. Ch&uacute;ng biểu thị số lượng hộp c&oacute; v&iacute;t trong kho của Byteman, số lượng v&iacute;t cần thiết để tạo ra một c&aacute;i b&agrave;n v&agrave; số lượng c&aacute;i b&agrave;n m&agrave; Byteman phải l&agrave;m, tương ứng. D&ograve;ng thứ hai chứa n (kh&ocirc;ng nhất thiết phải kh&aacute;c) số nguy&ecirc;n a<sub>i</sub> (1 &le; a<sub>i</sub>&nbsp;&le; 1000) được ph&acirc;n t&aacute;ch bằng dấu c&aacute;ch đơn, sao cho a&nbsp;<sub>i</sub> l&agrave; số ốc v&iacute;t trong hộp thứ&nbsp;i&nbsp;trong kho.</p>\n<h2>Đầu ra</h2>\n<p>D&ograve;ng đầu ti&ecirc;n v&agrave; duy nhất của đầu ra ti&ecirc;u chuẩn phải chứa một số nguy&ecirc;n - số hộp tối thiểu c&oacute; v&iacute;t m&agrave; Byteman cần mang từ kho của m&igrave;nh để l&agrave;m bảng.&nbsp;Bạn c&oacute; thể cho rằng Byteman c&oacute; đủ ốc v&iacute;t trong kho để l&agrave;m tất cả c&aacute;c bảng.</p>\n<h2>V&iacute; dụ</h2>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>5 6 3\n3 9 5 7 3</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>3</code></pre>\n<p><strong>Giải th&iacute;ch v&iacute; dụ.&nbsp;</strong>Để l&agrave;m ba chiếc b&agrave;n, mỗi chiếc cần s&aacute;u con ốc v&iacute;t, Byteman phải mang ba chiếc hộp c&oacute; ốc v&iacute;t từ nh&agrave; kho.&nbsp;Đ&acirc;y c&oacute; thể l&agrave; những c&aacute;i c&oacute; chứa 3, 7 v&agrave; 9 v&iacute;t hoặc những c&aacute;i c&oacute; 9, 5 v&agrave; 7 v&iacute;t.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/6f75411d-67b4-4557-94a0-4d3942aced61",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "AE1B_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938c"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "army-army-strength",
  "tags": [],
  "level": "EXPERT",
  "title": "Đội quân kháng chiến",
  "content": "<p id=\"problem-name\" class=\"text-center\">Cuộc x&acirc;m lược tiếp theo của MechaGodzilla đang tr&ecirc;n đường đến Tr&aacute;i đất. V&agrave; một lần nữa, tr&aacute;i đất sẽ l&agrave; chiến trường cho một cuộc chiến. Đội qu&acirc;n của MechaGodzilla bao gồm nhiều qu&aacute;i vật ngo&agrave;i h&agrave;nh tinh, Space Godzilla, King Gidorah v&agrave; MechaGodzilla. Để ngăn chặn ch&uacute;ng v&agrave; bảo vệ Tr&aacute;i đất, Godzilla v&agrave; những người bạn đang chuẩn bị cho trận chiến.&nbsp;&nbsp;</p>\n<div id=\"problem-body\">\n<h3>B&agrave;i to&aacute;n đặt ra</h3>\n<p>Mỗi đội qu&acirc;n bao gồm nhiều qu&aacute;i vật kh&aacute;c nhau. Mỗi con qu&aacute;i vật c&oacute; một sức mạnh c&oacute; thể được m&ocirc; tả bằng một số nguy&ecirc;n dương. (Gi&aacute; trị c&agrave;ng lớn, qu&aacute;i vật c&agrave;ng mạnh) . Một cuộc chiến sẽ bao gồm nhiều trận chiến. Trong mỗi trận chiến, con yếu nhất trong số những con qu&aacute;i vật c&ograve;n sống sẽ bị giết. Nếu c&oacute; một số qu&aacute;i vật yếu nhất, nhưng tất cả ch&uacute;ng trong c&ugrave;ng một đội qu&acirc;n, một trong số ch&uacute;ng sẽ bị giết ngẫu nhi&ecirc;n. Nếu cả hai đội qu&acirc;n c&oacute; &iacute;t nhất một trong những qu&aacute;i vật yếu nhất, một qu&aacute;i vật yếu nhất ngẫu nhi&ecirc;n trong đội qu&acirc;n của MechaGodzilla sẽ bị giết.</p>\n<p>Chiến tranh kết th&uacute;c nếu trong một đội qu&acirc;n tất cả qu&aacute;i vật đều chết. Qu&acirc;n chết hết sẽ thua, qu&acirc;n c&ograve;n lại sẽ thắng. Bạn được cung cấp sức mạnh của tất cả những con qu&aacute;i vật. H&atilde;y t&igrave;m ra người chiến thắng trong cuộc chiến.</p>\n<h3>Đầu v&agrave;o</h3>\n<p>D&ograve;ng đầu ti&ecirc;n của tệp đầu v&agrave;o chứa một số nguy&ecirc;n T x&aacute;c định số lượng trường hợp thử nghiệm. Mỗi trường hợp thử nghiệm được th&ecirc;m ở ph&iacute;a trước một d&ograve;ng trống. Mỗi trường hợp thử nghiệm bắt đầu bằng d&ograve;ng chứa hai số nguy&ecirc;n dương NG v&agrave; NM - số lượng qu&aacute;i vật trong qu&acirc;n đội của Godzilla v&agrave; của MechaGodzilla. Theo sau l&agrave; hai d&ograve;ng kh&aacute;c, d&ograve;ng đầu ti&ecirc;n chứa NG số nguy&ecirc;n dương - sức mạnh của những con qu&aacute;i vật trong đội qu&acirc;n của Godzilla. Tương tự, d&ograve;ng thứ hai chứa NM số nguy&ecirc;n dương - sức mạnh của những con qu&aacute;i vật trong đội qu&acirc;n của MechaGodzilla.</p>\n<h3>Đầu ra</h3>\n<p>Đối với mỗi trường hợp thử nghiệm, xuất một d&ograve;ng duy nhất với một chuỗi k&yacute; tự m&ocirc; tả kết quả của trận chiến. Nếu chắc chắn rằng đội qu&acirc;n của Godzilla thắng, h&atilde;y in ra&nbsp; chuỗi k&yacute; tự \"Godzilla\". Nếu chắc chắn rằng đội qu&acirc;n của MechaGodzilla thắng, h&atilde;y in ra chuỗi k&yacute; tự \"MechaGodzilla\". Nếu kh&ocirc;ng, in ra chuỗi k&yacute; tự \"uncertain\".</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>2\n\n1 1\n1\n1\n\n3 2\n1 3 2\n5 5</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>Godzilla\nMechaGodzilla</code></pre>\n<h3>Gợi &yacute;</h3>\n<p>Trong trường hợp thử nghiệm đầu ti&ecirc;n, chỉ c&oacute; hai con qu&aacute;i vật, v&agrave; ch&uacute;ng đều mạnh như nhau. Trong t&igrave;nh huống n&agrave;y, qu&aacute;i vật của MechaGodzilla bị giết v&agrave; chiến tranh kết th&uacute;c. Trong trường hợp thử nghiệm thứ hai, cuộc chiến sẽ bao gồm ba trận chiến, v&agrave; trong mỗi trận chiến, một trong những qu&aacute;i vật của Godzilla sẽ chết. Đối với tất cả c&aacute;c trường hợp thử nghiệm, int trong C / C ++ / Java hoặc longint trong Pascal l&agrave; đủ.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5ad7f168-dd2d-4a2a-b91a-e96a7a3d563a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ARMY_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938d"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "aps-amazing-prime-sequence",
  "tags": [],
  "level": "EXPERT",
  "title": "Chuỗi số kỳ diệu",
  "content": "<p id=\"problem-name\" class=\"text-center\">Bablu rất th&iacute;ch c&aacute;c chuỗi số v&agrave; c&aacute;c tập hợp... Sau khi nghi&ecirc;n cứu chuỗi Fibonacci ở lớp to&aacute;n học, anh ấy đ&atilde; rất ấn tượng v&agrave; anh ấy đ&atilde; thiết kế chuỗi số của ri&ecirc;ng m&igrave;nh như sau:</p>\n<pre class=\"language-markup\"><code>a[0] = a[1] = 0 </code></pre>\n<p>Với $n&gt;1$, $a[n] = a[n-1] + f(n)$, trong đ&oacute; f(n) l&agrave; hệ số nguy&ecirc;n tố nhỏ nhất của n. Anh ấy cũng rất th&iacute;ch lập tr&igrave;nh v&agrave; do đ&oacute; đ&atilde; thực hiện một chương tr&igrave;nh nhỏ để t&igrave;m a[n], nhưng v&igrave; anh ấy học lớp to&aacute;n n&ecirc;n anh ấy kh&ocirc;ng giỏi lập tr&igrave;nh cho lắm. V&igrave; vậy, anh ấy y&ecirc;u cầu bạn gi&uacute;p đỡ. Nhiệm vụ của bạn l&agrave; t&igrave;m a[n] cho d&atilde;y số tr&ecirc;n.</p>\n<h3>Đầu v&agrave;o</h3>\n<p>Đoạn m&atilde; của bạn sẽ được kiểm tra cho nhiều trường hợp thử nghiệm. D&ograve;ng đầu ti&ecirc;n của dữ liệu đầu v&agrave;o chứa T sao cho $T \\leq 100$, số lượng trường hợp kiểm tra. T d&ograve;ng tiếp theo chứa một số N sao cho $1 &lt;N &lt;10^{7}$.</p>\n<h3>Đầu ra</h3>\n<p>Một d&ograve;ng chứa a[n], tức l&agrave; số thứ n của chuỗi cho mỗi trường hợp thử nghiệm.</p>\n<h3>V&iacute; dụ</h3>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-python\"><code>3 2 3 4</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-python\"><code>2 5 7</code></pre>\n<p id=\"problem-body\"></p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/a46aa58c-9915-4e92-890b-8f47020e449d",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "APS_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938e"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 50,
  "slug": "anarc05b-the-double-helix",
  "tags": [],
  "level": "EXPERT",
  "title": "HeLiX nhân đôi",
  "content": "<p class=\"text-center\">2 d&atilde;y số nguy&ecirc;n tăng dần được đưa ra. Bất kỳ số nguy&ecirc;n chung n&agrave;o giữa hai d&atilde;y đều tạo th&agrave;nh c&aacute;c giao điểm. V&iacute; dụ về hai chuỗi sau m&agrave; c&aacute;c điểm giao nhau được in đậm:</p>\n<div id=\"problem-body\">\n<ul>\n<li>\n<p>Chuỗi đầu ti&ecirc;n = 3 5 <strong>7</strong>&nbsp;9 20&nbsp;<strong>25</strong>&nbsp;30 40&nbsp;<strong>55</strong>&nbsp;56&nbsp;<strong>57</strong>&nbsp;60 62</p>\n</li>\n<li>\n<p>Chuỗi thứ hai = 1 4 <strong>7</strong>&nbsp;11 14&nbsp;<strong>25</strong>&nbsp;44 47&nbsp;<strong>55&nbsp;</strong><strong>57</strong>&nbsp;100</p>\n</li>\n</ul>\n<p>Bạn c&oacute; thể duyệt qua hai chuỗi n&agrave;y theo c&aacute;ch sau:</p>\n<ol>\n<li>\n<p>Bạn c&oacute; thể bắt đầu ở phần đầu của bất kỳ tr&igrave;nh tự n&agrave;o trong hai tr&igrave;nh tự.&nbsp;B&acirc;y giờ h&atilde;y bắt đầu tiến về ph&iacute;a trước.</p>\n</li>\n<li>\n<p>Tại mỗi điểm giao nhau, bạn c&oacute; thể lựa chọn tiếp tục với c&ugrave;ng một tr&igrave;nh tự m&agrave; bạn hiện đang &aacute;p dụng hoặc chuyển sang tr&igrave;nh tự kh&aacute;c.</p>\n</li>\n</ol>\n<p>Mục ti&ecirc;u l&agrave; tạo ra một đường đi tạo ra tổng dữ liệu tối đa. Trong v&iacute; dụ tr&ecirc;n, tổng lớn nhất c&oacute; thể l&agrave; 450, l&agrave; kết quả của ph&eacute;p cộng 3, 5, 7, 9, 20, 25, 44, 47, 55, 56, 57, 60 v&agrave; 62</p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<p>Chương tr&igrave;nh của bạn sẽ được thử nghiệm tr&ecirc;n một số trường hợp thử nghiệm.&nbsp;Mỗi trường hợp thử nghiệm sẽ được chỉ định tr&ecirc;n hai d&ograve;ng ri&ecirc;ng biệt.&nbsp;Mỗi d&ograve;ng biểu thị một tr&igrave;nh tự v&agrave; được chỉ định bằng c&aacute;ch sử dụng định dạng sau:</p>\n<pre class=\"language-markup\"><code>n v1 v2 ... vn</code></pre>\n<p>Trong đ&oacute; n l&agrave; độ d&agrave;i của d&atilde;y v&agrave; $v_{i}$ l&agrave; phần tử thứ i trong d&atilde;y đ&oacute;. Mỗi d&atilde;y sẽ c&oacute; &iacute;t nhất một phần tử nhưng kh&ocirc;ng qu&aacute; 10.000. Tất cả c&aacute;c phần tử nằm trong khoảng -10.000 đến 10.000 (bao gồm).</p>\n<p>D&ograve;ng cuối c&ugrave;ng của đầu v&agrave;o bao gồm một số 0 duy nhất, kh&ocirc;ng phải l&agrave; một phần của c&aacute;c trường hợp thử nghiệm.</p>\n<p><strong>Đầu ra</strong></p>\n<p>Đối với mỗi trường hợp thử nghiệm, h&atilde;y in ra tr&ecirc;n một d&ograve;ng ri&ecirc;ng biệt, tổng lớn nhất c&oacute; thể được tạo ra.</p>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>13 3 5 7 9 20 25 30 40 55 56 57 60 62 11 1 4 7 11 14 25 44 47 55 57 100 4 -5 100 1000 1005 3-12 1000 1001 0</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>450 2100</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b4c76edf-8893-4f4c-b419-79b0996b724b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ANARC05B_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef938f"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "amr10g-choi-giang-sinh",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Giáng sinh",
  "content": "<p>Lớp mẫu gi&aacute;o của con t&ocirc;i đang tổ chức một vở kịch Gi&aacute;ng sinh. C&aacute;c em nhỏ đều rất h&agrave;o hứng, nhưng gi&aacute;o vi&ecirc;n c&oacute; rất nhiều việc. C&ocirc; ấy phải sản xuất trang phục cho một cảnh quay với l&iacute;nh K. C&ocirc; ấy muốn mua tất cả c&aacute;c trang phục c&oacute; c&ugrave;ng k&iacute;ch cỡ, cho ph&eacute;p cha mẹ của bọn trẻ thực hiện một số thay đổi nhỏ về độ d&agrave;i sau n&agrave;y. V&igrave; vậy, c&ocirc; ấy đ&atilde; lấy tất cả c&aacute;c số đo chiều cao của bọn trẻ. Bạn c&oacute; thể gi&uacute;p c&ocirc; ấy chọn K từ lớp N của c&ocirc; ấy để đ&oacute;ng vai người l&iacute;nh, sao cho sự ch&ecirc;nh lệch chiều cao giữa người cao nhất v&agrave; thấp nhất trong nh&oacute;m được giảm tối thiểu v&agrave; việc thay thế sẽ dễ d&agrave;ng nhất? H&atilde;y cho c&ocirc; ấy biết sự kh&aacute;c biệt tối thiểu n&agrave;y l&agrave; bao nhi&ecirc;u.</p>\n<div id=\"problem-body\">\n<p><strong>Đầu v&agrave;o</strong></p>\n<p>D&ograve;ng đầu ti&ecirc;n chứa số lượng trường hợp thử nghiệm T. C&aacute;c trường hợp thử nghiệm tiếp theo mỗi d&ograve;ng chứa 2 d&ograve;ng.<br />&nbsp;<br />D&ograve;ng đầu ti&ecirc;n của mỗi trường hợp thử nghiệm chứa 2 số nguy&ecirc;n N v&agrave; K.</p>\n<p>D&ograve;ng thứ hai chứa N số nguy&ecirc;n, biểu thị chiều cao của N đứa trẻ.</p>\n<p><strong>Đầu ra</strong></p>\n<p>Xuất ra T d&ograve;ng, mỗi d&ograve;ng chứa c&acirc;u trả lời được y&ecirc;u cầu cho test case tương ứng.<br />&nbsp;<br /><strong>Điều kiện</strong></p>\n<ul>\n<li>$T \\leq 30$</li>\n<li>$1 \\leq K \\leq N \\leq 20000$</li>\n<li>Chiều cao của trẻ height sao cho $1 \\leq height \\leq 1000000000$</li>\n</ul>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code>3\n3 1\n2 5 4\n3 2\n5 2 4\n3 3\n2 5 4</code></pre>\n<strong>Đầu Ra</strong>\n<pre class=\"language-markup\"><code>0\n1\n3</code></pre>\n</div>\n<div><strong>GIẢI TH&Iacute;CH</strong></div>\n<ul>\n<li>Trong trường hợp thử nghiệm đầu ti&ecirc;n, gi&aacute;o vi&ecirc;n chỉ cần chọn 1 trẻ v&agrave; do đ&oacute; c&ocirc; c&oacute; thể chọn bất kỳ trẻ n&agrave;o v&igrave; ch&ecirc;nh lệch chiều cao sẽ l&agrave; 0.</li>\n<li>Trong trường hợp thử nghiệm thứ hai, gi&aacute;o vi&ecirc;n c&oacute; thể chọn trẻ c&oacute; chiều cao 4 v&agrave; 5.</li>\n<li>Trong trường hợp thử nghiệm thứ ba, gi&aacute;o vi&ecirc;n buộc phải chọn cả 3 đứa trẻ v&agrave; do đ&oacute; đ&aacute;p &aacute;n = 5-2 = 3</li>\n</ul>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d635e79d-5b37-4d18-9faf-48daf644a310",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "AMR10G_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9390"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "allizwel-all-izz-well",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "ALL IZZ WELL",
  "content": "<div id=\"problem-body\">\n<p><strong>B&agrave;i to&aacute;n</strong></p>\n<p>Mr.ESP thường lẩm nhẩm \"ALL IZZ WELL\" bất cứ khi n&agrave;o anh ấy gặp bất kỳ rắc rối n&agrave;o. V&igrave; vậy, bạn b&egrave; của anh ấy v&agrave; những người xung quanh anh ấy đ&atilde; từng cười nhạo anh ấy. Nhưng Mr.ESP rất tin tưởng v&agrave;o niềm tin của m&igrave;nh. Anh ấy tin rằng cụm từ \"ALL IZZ WELL\" sẽ l&agrave;m cho mọi thứ tốt đẹp. B&acirc;y giờ nhiệm vụ của bạn l&agrave; bỏ qua c&acirc;u chuyện ở tr&ecirc;n v&agrave; t&igrave;m xem liệu c&oacute; một con đường n&agrave;o trong ma trận đ&atilde; cho tạo ra c&acirc;u &ldquo;ALL IZZ WELL&rdquo;.</p>\n<p>C&oacute; một đường dẫn từ bất kỳ &ocirc; n&agrave;o đến tất cả c&aacute;c &ocirc; l&acirc;n cận của n&oacute;. Một &ocirc; gần kề c&oacute; thể c&oacute; chung một cạnh hoặc một g&oacute;c.</p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<ul>\n<li>D&ograve;ng đầu ti&ecirc;n bao gồm một số nguy&ecirc;n t đại diện cho số lượng c&aacute;c trường hợp thử nghiệm.</li>\n<li>D&ograve;ng đầu ti&ecirc;n của mỗi trường hợp thử nghiệm bao gồm hai số nguy&ecirc;n R v&agrave; C đại diện cho số h&agrave;ng v&agrave; số cột trong ma trận.</li>\n</ul>\n<p><strong>Đầu ra</strong></p>\n<p>Đối với mỗi trường hợp kiểm tra, h&atilde;y in ra \"YES\" nếu c&oacute; một đường dẫn tạo th&agrave;nh c&acirc;u &ldquo;ALLIZZWELL&rdquo;. Nếu kh&ocirc;ng, in ra \"NO\". C&oacute; một d&ograve;ng mới sau mỗi trường hợp thử nghiệm trong đầu v&agrave;o.</p>\n<p><strong>Lưu &yacute;: H&atilde;y quan t&acirc;m đến trường hợp thử nghiệm thứ 4.</strong></p>\n<p><strong>Điều kiện</strong></p>\n<ul>\n<li>$t \\leq 1000$</li>\n<li>$R \\leq 100$</li>\n<li>$C \\leq 100$</li>\n</ul>\n<p><strong>V&iacute; dụ</strong></p>\n<p><strong>Đầu v&agrave;o</strong></p>\n<pre class=\"language-markup\"><code> 5\n3 6\nAWE.QX\nLLL.EO\nIZZWLL\n\n1 10\nALLIZZWELL\n\n2 9\nA.L.Z.E..\n.L.I.W.L.\n\n3 3\nAEL\nLWZ\nLIZ\n\n1 10\nLLEWZZILLA</code></pre>\n<strong>Đầu ra</strong></div>\n<div>\n<pre class=\"language-markup\"><code>YES\nYES\nNO\nNO\nYES</code></pre>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/bb6b7af3-2ddc-4db8-bf69-ed6be93a3e57",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ALLIZWEL_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9391"
  },
  "memoryLimit": 1,
  "source": 1,
  "timeLimit": 1,
  "scores": 30,
  "slug": "alien-aliens-at-the-train",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Người ngoài hành tinh đi tàu",
  "content": "<p class=\"text-center\">Người ngo&agrave;i h&agrave;nh tinh đ&atilde; đến tr&aacute;i đất v&agrave; mọi thứ đều h&ograve;a hợp, hai chủng tộc c&oacute; thể chung sống với nhau. Tuy nhi&ecirc;n, một người ngo&agrave;i h&agrave;nh tinh kh&ocirc;ng muốn nh&igrave;n thấy con người tr&ecirc;n đường đến trường đại học, người ngo&agrave;i h&agrave;nh tinh phải sử dụng chuyến t&agrave;u như mọi người vẫn l&agrave;m. Nhưng c&ocirc; ấy c&oacute; thể chọn bất kỳ ga xe lửa n&agrave;o m&agrave; c&ocirc; ấy kh&ocirc;ng nh&igrave;n thấy nhiều hơn B con người, tuy nhi&ecirc;n, người ngo&agrave;i h&agrave;nh tinh muốn đi c&agrave;ng xa c&agrave;ng tốt với chuyến t&agrave;u. H&atilde;y gi&uacute;p người ngo&agrave;i h&agrave;nh tinh n&agrave;y.</p>\n<div id=\"problem-body\">\n<p><strong>Đầu v&agrave;o</strong></p>\n<p>Bạn sẽ nhận được một số nguy&ecirc;n T biểu thị số trường hợp thử nghiệm, sau đ&oacute;, d&ograve;ng tiếp theo sẽ chứa hai số nguy&ecirc;n At v&agrave; Bt, trong đ&oacute; At v&agrave; Bt l&agrave; số ga tr&ecirc;n t&agrave;u (1 &lt;= At &lt;= 100.000) v&agrave; số người m&agrave; người ngo&agrave;i h&agrave;nh tinh muốn nh&igrave;n thấy l&agrave; tối đa (1 &lt;= Bt &lt;= 10.000.000), sau đ&oacute;, một d&ograve;ng chứa c&aacute;c số nguy&ecirc;n At c&aacute;ch nhau một khoảng trắng sẽ biểu thị số người m&agrave; người ngo&agrave;i h&agrave;nh tinh c&oacute; thể t&igrave;m thấy trong trạm thứ At-i. (Mỗi trạm sẽ c&oacute; tối đa 100 người).</p>\n<p><strong>Đầu ra</strong></p>\n<p>Đầu ra của bạn phải bao gồm T cặp số biểu thị số người m&agrave; người ngo&agrave;i h&agrave;nh tinh sẽ nh&igrave;n thấy v&agrave; số trạm m&agrave; người ngo&agrave;i h&agrave;nh tinh sẽ đi qua tương ứng.</p>\n<p>V&iacute; dụ</p>\n<p><strong>Đầu v&agrave;o:</strong></p>\n<pre class=\"language-markup\"><code>1 5 100 20 15 30 80 100</code></pre>\n<p><strong>Đầu ra</strong></p>\n<pre class=\"language-markup\"><code>65 3</code></pre>\n<p><strong>Ch&uacute; &yacute;:</strong></p>\n<p>Người ngo&agrave;i h&agrave;nh tinh đi t&agrave;u ở ga 1 (c&oacute; 20 người) v&agrave; đến ga 2, sau đ&oacute; l&agrave; ga 3, l&uacute;c n&agrave;y, c&ocirc; ấy đ&atilde; nh&igrave;n thấy 65 người, nếu c&ocirc; ấy quyết định đi đến ga 4 c&ocirc; ấy sẽ thấy 145 người&hellip; Sau đ&oacute; c&ocirc; ấy ra khỏi nh&agrave; ga.</p>\n<p>Tuy nhi&ecirc;n, người ngo&agrave;i h&agrave;nh tinh c&oacute; thể bắt đầu ở trạm 2 với 15 người, sau đ&oacute; tiếp tục đến trạm 4, khi đ&oacute;, c&ocirc; ấy sẽ thấy 125 người, nhưng, v&igrave; c&ocirc; ấy muốn nh&igrave;n thấy những người tối thiểu c&oacute; thể c&oacute; v&agrave; số người n&agrave;y vượt qu&aacute; những g&igrave; c&ocirc; ấy muốn xem, c&ocirc; quyết định chọn con đường từ ga 1 đến ga thứ 3.</p>\n<p>Người ngo&agrave;i h&agrave;nh tinh sẽ lu&ocirc;n di chuyển về ph&iacute;a trước (h&atilde;y nhớ, c&ocirc; ấy c&oacute; thể chọn bất kỳ trạm n&agrave;o l&agrave;m điểm bắt đầu), KH&Ocirc;NG BAO GIỜ l&ugrave;i lại ph&iacute;a sau, v&agrave; bạn n&ecirc;n chọn con đường tốt nhất thỏa m&atilde;n th&ocirc;ng số kỹ thuật đầu ra.</p>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3c43f923-44ce-4684-a896-54be5250f94f",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "ALIEN_input.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9392"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-stdin-and-stdout-i-2",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Stdin and Stdout I",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Most HackerRank challenges require you to read input from&nbsp;<a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29\">stdin</a>&nbsp;(standard input) and write output to&nbsp;<a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29\">stdout</a>&nbsp;(standard output).</p>\n<p>One popular way to read input from stdin is by using the&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html\">Scanner class</a>&nbsp;and specifying the&nbsp;<em>Input Stream</em>&nbsp;as&nbsp;<em>System.in</em>. For example:</p>\n<div class=\"highlight\">\n<pre><span class=\"n\">Scanner</span> <span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Scanner</span><span class=\"o\">(</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">);</span>\n<span class=\"n\">String</span> <span class=\"n\">myString</span> <span class=\"o\">=</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n<span class=\"kt\">int</span> <span class=\"n\">myInt</span> <span class=\"o\">=</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"na\">nextInt</span><span class=\"o\">();</span>\n<span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"myString is: \"</span> <span class=\"o\">+</span> <span class=\"n\">myString</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"myInt is: \"</span> <span class=\"o\">+</span> <span class=\"n\">myInt</span><span class=\"o\">);</span>\n</pre>\n</div>\n<p>The code above creates a&nbsp;<em>Scanner</em> object named <strong><em>scanner</em></strong><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;and uses it to read a&nbsp;<em>String</em>&nbsp;and an&nbsp;<em>int</em>. It then&nbsp;<em>closes</em>&nbsp;the&nbsp;<em>Scanner</em>&nbsp;object because there is no more input to read, and prints to stdout using&nbsp;<em>System.out.println(String)</em>. So, if our input is:</p>\n<pre><code>Hi 5\n</code></pre>\n<p>Our code will print:</p>\n<pre><code>myString is: Hi\nmyInt is: 5\n</code></pre>\n<p>Alternatively, you can use the&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html\">BufferedReader class</a>.</p>\n<p><strong>Task</strong><br />In this challenge, you must read 3<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;integers from stdin and then print them to stdout. Each integer must be printed on a new line. To make the problem a little easier, a portion of the code is provided for you in the editor below.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There are 3<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines of input, and each line contains a single integer.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>42\n100\n125\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>42\n100\n125</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/99e4a78d-6d16-4ccc-b6d1-9821173fa6e0",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9393"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-if-else",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java If-Else",
  "content": "<p>In this challenge, we test your knowledge of using&nbsp;<em>if-else</em>&nbsp;conditional statements to automate decision-making processes. An if-else statement has the following logical flow:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/13689/1446563087-4ec019a919-332px-If-Then-Else-diagram.svg.png\" alt=\"Wikipedia if-else flow chart\" /></p>\n<p><sub>Source:&nbsp;<a href=\"https://en.wikipedia.org/wiki/Conditional_%28computer_programming%29\">Wikipedia</a></sub></p>\n<p><strong>Task</strong></p>\n<p>Given an integer, $n$, perform the following conditional actions:<br />- If $n$ is odd, print Weird<br />- If $n$ is even and in the inclusive range of 2 to 5, print Not Weird<br />- If $n$ is even and in the inclusive range of 6 to 20 , print weird<br />- If $n$ is even and greater than 20 , print Not Weird<br />Complete the stub code provided in your editor to print whether or not $n$ is weird.<br /><strong>Input Format</strong><br />A single line containing a positive integer, $n$.<br /><strong>Constraints</strong><br />- $1 \\leq n \\leq 100$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print&nbsp;<code>Weird</code>&nbsp;if the number is weird; otherwise, print&nbsp;<code>Not Weird</code>.</p>\n<p><strong>Sample Input 0</strong></p>\n<pre><code>3\n</code></pre>\n<p><strong>Sample Output 0</strong></p>\n<pre><code>Weird\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>24\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>Not Weird\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Sample Case 0: $n=3$<br />$n$ is odd and odd numbers are weird, so we print Weird.<br />Sample Case 1: $n=24$<br />$n&gt;20$ and $n$ is even, so it isn't weird. Thus, we print Not Weird.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/9e8fc045-2976-455a-951e-b57f88fbe6ba",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9394"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-stdin-and-stdout-ii",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Stdin and Stdout II",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>In this challenge, you must read an&nbsp;<em>integer</em>, a&nbsp;<em>double</em>, and a&nbsp;<em>String</em>&nbsp;from stdin, then print the values according to the instructions in the&nbsp;<em>Output Format</em>&nbsp;section below. To make the problem a little easier, a portion of the code is provided for you in the editor.</p>\n<p><strong>Note:</strong>&nbsp;We recommend completing&nbsp;<a href=\"https://www.hackerrank.com/challenges/java-stdin-and-stdout-1\">Java Stdin and Stdout I</a>&nbsp;before attempting this challenge.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There are three lines of input:</p>\n<ol>\n<li>The first line contains an&nbsp;<em>integer</em>.</li>\n<li>The second line contains a&nbsp;<em>double</em>.</li>\n<li>The third line contains a&nbsp;<em>String</em>.</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>There are three lines of output:</p>\n<ol>\n<li>On the first line, print&nbsp;<code>String:</code>&nbsp;followed by the unaltered&nbsp;<em>String</em>&nbsp;read from stdin.</li>\n<li>On the second line, print&nbsp;<code>Double:</code>&nbsp;followed by the unaltered&nbsp;<em>double</em>&nbsp;read from stdin.</li>\n<li>On the third line, print&nbsp;<code>Int:</code>&nbsp;followed by the unaltered&nbsp;<em>integer</em>&nbsp;read from stdin.</li>\n</ol>\n<p>To make the problem easier, a portion of the code is already provided in the editor.</p>\n<p><strong>Note:</strong>&nbsp;If you use the&nbsp;<em>nextLine()</em>&nbsp;method immediately following the&nbsp;<em>nextInt()</em>&nbsp;method, recall that&nbsp;<em>nextInt()</em>&nbsp;reads integer tokens; because of this, the last newline character for that line of integer input is still queued in the input buffer and the next&nbsp;<em>nextLine()</em>&nbsp;will be reading the remainder of the integer line (which is empty).</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>42\n3.1415\nWelcome to HackerRank's Java tutorials!\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>String: Welcome to HackerRank's Java tutorials!\nDouble: 3.1415\nInt: 42</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f5367576-dbba-4ba8-bd3e-e982bf70a353",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9395"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-output-formatting",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Output Formatting",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Java's&nbsp;<em>System.out.printf</em>&nbsp;function can be used to print formatted output. The purpose of this exercise is to test your understanding of formatting output using&nbsp;<em>printf</em>.</p>\n<p>To get you started, a portion of the solution is provided for you in the editor; you must format and print the input to complete the solution.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>Every line of input will contain a&nbsp;<em>String</em>&nbsp;followed by an&nbsp;<em>integer</em>.<br />Each&nbsp;<em>String</em> will have a maximum of 10<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;alphabetic characters, and each&nbsp;<em>integer</em> will be in the inclusive range from 0<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> to 999.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>In each line of output there should be two columns:<br />The first column contains the&nbsp;<em>String</em> and is left justified using exactly 15<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;characters.<br />The second column contains the&nbsp;<em>integer</em>, expressed in exactly 3<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;digits; if the original input has less than three digits, you must pad your output's leading digits with zeroes.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>java 100\ncpp 65\npython 50\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>================================\njava           100 \ncpp            065 \npython         050 \n================================\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Each&nbsp;<em>String</em> is left-justified with trailing whitespace through the first 15<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;characters. The leading digit of the&nbsp;<em>integer</em> is the $16^{th}$ character, and each <em>integer</em>&nbsp;that was less than&nbsp;<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;digits now has leading zeroes.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c78a5c30-51e5-433a-9f62-97fc75a09c14",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9396"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-loops-i",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Loops I",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Objective</strong><br />In this challenge, we're going to use loops to help us do some simple math.</p>\n<p><strong>Task</strong><br />Given an integer, $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, print its first 10<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> multiples. Each multiple $N*i$ (where $1&lt;=i&lt;=10$) should be printed on a new line in the form:&nbsp;<code>N x i = result</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>A single integer,&nbsp;<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<ul>\n<li>$2&lt;=N&lt;=20$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print $10$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> lines of output; each line $i$&nbsp;(where $1&lt;=i&lt;=10$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>) contains the %result%<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span> of $N*i$<span id=\"MathJax-Element-5-Frame\" class=\"MathJax_SVG\"></span>&nbsp;in the form:<br /><code>N x i = result</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d1914143-8928-4456-8fbd-3bedb68585c5",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9397"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-loops-ii",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Loops II",
  "content": "<p>We use the integers $a, b$, and $n$ to create the following series:<br />$$<br />\\left(a+2^{0} \\cdot b\\right),\\left(a+2^{0} \\cdot b+2^{1} \\cdot b\\right), \\ldots,\\left(a+2^{0} \\cdot b+2^{1} \\cdot b+\\ldots+2^{n-1} \\cdot b\\right)<br />$$</p>\n<p>You are given $q$ queries in the form of $a, b$, and $n$. For each query, print the series corresponding to the given $a, b_{1}$ and $n$ values as a single line of $n$ space-separated integers.<br />Input Format<br />The first line contains an integer, $q$, denoting the number of queries.<br />Each line $i$ of the $q$ subsequent lines contains three space-separated integers describing the respective $a_{i}, b_{i}$, and $n_{i}$ values for that query.<br />Constraints<br />- $0 \\leq q \\leq 500$<br />$0 \\leq a, b \\leq 50$<br />- $1 \\leq n \\leq 15$<br />Output Format<br />For each query, print the corresponding series on a new line. Each series must be printed in order as a single line of $n$ spaceseparated integers.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n0 2 10\n5 3 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2 6 14 30 62 126 254 510 1022 2046\n8 14 26 50 98\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We have two queries:</p>\n<p>1. We use $a=0, b=2$, and $n=10$ to produce some series $s_{0}, s_{1}, \\ldots, s_{n-1}$ :<br />- $s_{0}=0+1 \\cdot 2=2$<br />- $s_{1}=0+1 \\cdot 2+2 \\cdot 2=6$<br />$\\circ s_{2}=0+1 \\cdot 2+2 \\cdot 2+4 \\cdot 2=14$<br />... and so on.<br />Once we hit $n=10$, we print the first ten terms as a single line of space-separated integers.<br />2. We use $a=5, b=3$, and $n=5$ to produce some series $s_{0}, s_{1}, \\ldots, s_{n-1}$ :<br />$\\circ s_{0}=5+1 \\cdot 3=8$<br />- $s_{1}=5+1 \\cdot 3+2 \\cdot 3=14$<br />- $s_{2}=5+1 \\cdot 3+2 \\cdot 3+4 \\cdot 3=26$<br />- $s_{3}=5+1 \\cdot 3+2 \\cdot 3+4 \\cdot 3+8 \\cdot 3=50$<br />$\\circ s_{4}=5+1 \\cdot 3+2 \\cdot 3+4 \\cdot 3+8 \\cdot 3+16 \\cdot 3=98$<br />We then print each element of our series as a single line of space-separated values.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/35c011eb-7b77-4ab3-bd0c-b9f3187eff97",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9398"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-datatypes",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Datatypes",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Java has 8 primitive data types;&nbsp;<em>char, boolean, byte, short, int, long, float, and double</em>. For this exercise, we'll work with the primitives used to hold integer values (<em>byte, short, int,</em>&nbsp;and&nbsp;<em>long</em>):</p>\n<ul>\n<li>A&nbsp;<em>byte</em>&nbsp;is an 8-bit signed integer.</li>\n<li>A&nbsp;<em>short</em>&nbsp;is a 16-bit signed integer.</li>\n<li>An&nbsp;<em>int</em>&nbsp;is a 32-bit signed integer.</li>\n<li>A&nbsp;<em>long</em>&nbsp;is a 64-bit signed integer.</li>\n</ul>\n<p>Given an input integer, you must determine which primitive data types are capable of properly storing that input.</p>\n<p>To get you started, a portion of the solution is provided for you in the editor.</p>\n<p><strong>Reference:</strong>&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $T$, denoting the number of test cases.<br />Each test case, $T$, is comprised of a single line with an integer, $n$, which can be arbitrarily large or small.<br />Output Format<br />For each input variable $n$ and appropriate primitive dataType, you must determine if the given primitives are capable of storing it. If yes, then print:</p>\n<pre><code>n can be fitted in:\n* dataType</code></pre>\n<p>If there is more than one appropriate data type, print each one on its own line and order them by size (i.e.: byte $&lt;$ short $&lt;$ int $&lt;$ long $)$<br />If the number cannot be stored in one of the four aforementioned primitives, print the line:</p>\n<pre><code>n can't be fitted anywhere.</code><br /><br /></pre>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n-150\n150000\n1500000000\n213333333333333333333333333333333333\n-100000000000000\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>-150 can be fitted in:\n* short\n* int\n* long\n150000 can be fitted in:\n* int\n* long\n1500000000 can be fitted in:\n* int\n* long\n213333333333333333333333333333333333 can't be fitted anywhere.\n-100000000000000 can be fitted in:\n* long</code><br /><br /><strong>Explanation</strong></pre>\n<p>$-150$ can be stored in a short, an int, or a long.<br />213333333333333333333333333333333333 is very large and is outside of the allowable range of values for the primitive data types discussed in this problem.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1b1b0ec7-1904-4cd2-bdaa-e7a8d532b99a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef9399"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-end-of-file",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java End-of-file",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<blockquote>\n<p>\"In computing,&nbsp;<em>End Of File</em>&nbsp;(commonly abbreviated&nbsp;<em>EOF</em>) is a condition in a computer operating system where no more data can be read from a data source.\" &mdash; (<a href=\"https://en.wikipedia.org/wiki/End-of-file\">Wikipedia: End-of-file</a>)</p>\n</blockquote>\n<p>The challenge here is to read $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines of input until you reach&nbsp;<em>EOF</em>, then number and print all $n$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines of content.</p>\n<p><strong>Hint:</strong>&nbsp;Java's&nbsp;<em>Scanner.hasNext()</em>&nbsp;method is helpful for this problem.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>Read some unknown $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines of input from&nbsp;<em>stdin(System.in)</em>&nbsp;until you reach&nbsp;<em>EOF</em>; each line of input contains a non-empty&nbsp;<em>String</em>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each line, print the line number, followed by a single space, and then the line content received as input.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>Hello world\nI am a file\nRead me until end-of-file.\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 Hello world\n2 I am a file\n3 Read me until end-of-file.</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e8088189-65f3-437c-84a9-da3b0ece2ce1",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939a"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-static-initializer-block",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Static Initializer Block",
  "content": "<p>Static initialization blocks are executed when the class is loaded, and you can initialize static variables in those blocks.</p>\n<p><span>It's time to test your knowledge of&nbsp;<em>Static initialization blocks</em>. You can read about it&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html\">here.</a></span></p>\n<p><span>You are given a class&nbsp;<em>Solution</em>&nbsp;with a&nbsp;<em>main</em> method. Complete the given code so that it outputs the area of a parallelogram with breadth and height . You should read the variables from the standard input.$B H$</span></p>\n<p><span>If $B \\leq 0$ or $H \\leq 0$, the output should be \"java.lang.Exception: Breadth and height must be positive\" without quotes.<br />Input Format<br />There are two lines of input. The first line contains : the breadth of the parallelogram. The next line contains: the height of the parallelogram. $B H$<br />Constraints<br />- $-100 \\leq B \\leq 100$<br />- $-100 \\leq H \\leq 100$</span></p>\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>If both values are greater than zero, then the&nbsp;<em>main</em>&nbsp;method must output the area of the&nbsp;<em>parallelogram</em>. Otherwise, print&nbsp;<em>\"java.lang.Exception: Breadth and height must be positive\"</em>&nbsp;without quotes.</p>\n<p><strong>Sample input 1</strong></p>\n<pre><code>1\n3\n</code></pre>\n<p><strong>Sample output 1</strong></p>\n<pre><code>3\n</code></pre>\n<p><strong>Sample input 2</strong></p>\n<pre><code>-1\n2\n</code></pre>\n<p><strong>Sample output 2</strong></p>\n<pre><code>java.lang.Exception: Breadth and height must be positive</code></pre>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/4a0b9e40-803a-483b-9963-a17c3caf6474",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939b"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-int-to-string",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Int to String",
  "content": "<p>You are given an integer $n$, you have to convert it into a string.<br />Please complete the partially completed code in the editor. If your code successfully converts $n$ into a string $s$ the code will print \"Good job\". Otherwise it will print \"Wrong answer\".<br />$n$ can range between $-100$ to 100 inclusive.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">100</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Good job</span></pre>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e775c922-1f4a-459f-82f0-cba8f3773a5e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939c"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-date-and-time",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Date and Time",
  "content": "<p>The&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html\">Calendar class</a>&nbsp;is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week.</p>\n<hr />\n<p>You are given a date. You just need to write the method, $getDay$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, which returns the&nbsp;<em>day</em>&nbsp;on that date. To simplify your task, we have provided a portion of the code in the editor.</p>\n<p><strong>Example</strong><br />month $=8$<br />$d a y=14$<br />year $=2017$<br />The method should return $M O N D A Y$ as the day on that date.</p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/2b7bab0d-5fb9-4cf9-b972-d38b3b75a24e\" alt=\"1514458312-c097047ed4-calendar_class\" /></p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>findDay</em>&nbsp;function in the editor below.</p>\n<p><em>findDay</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int:</em>&nbsp;month</li>\n<li><em>int:</em>&nbsp;day</li>\n<li><em>int:</em>&nbsp;year</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>string:</em>&nbsp;the day of the week in capital letters</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">A single line of input containing the space separated month, day and year, respectively, in $M M D D Y Y Y Y$ format.<br />Constraints<br />- $2000&lt;$ year $&lt;3000$</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>08 05 2015\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>WEDNESDAY\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>The day on August $5^{\\text {th }} 2015$ was WEDNESDAY.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/99ae05ff-c3b6-44a4-8b91-9973e1463b81",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939d"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-currency-formatter",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Currency Formatter",
  "content": "<p>Given a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\">double-precision</a> number, $payment$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, denoting an amount of money, use the&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html\">NumberFormat</a>&nbsp;class'&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getCurrencyInstance-java.util.Locale-\">getCurrencyInstance</a> method to convert $payment$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;into the US, Indian, Chinese, and French currency formats. Then print the formatted values as follows:</p>\n<pre><code>US: formattedPayment\nIndia: formattedPayment\nChina: formattedPayment\nFrance: formattedPayment</code><br /><br /></pre>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>where $formattedPayment$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;is $payment$<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>&nbsp;formatted according to the appropriate&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html\">Locale</a>'s currency.</p>\n<p><strong>Note:</strong>&nbsp;India does not have a built-in Locale, so you must&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#Locale-java.lang.String-java.lang.String-\">construct one</a>&nbsp;where the language is&nbsp;<code>en</code>&nbsp;(i.e., English).</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>A single double-precision number denoting $payment$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n<p><strong>Constraints</strong></p>\n<p>- $0 \\leq$ payment $\\leq 10^{9}$</p>\n<p><strong>Output Format</strong><br />On the first line, print US: u where $u$ is payment formatted for US currency.<br />On the second line, print India: $i$ where $i$ is payment formatted for Indian currency.<br />On the third line, print China: c where $c$ is payment formatted for Chinese currency.<br />On the fourth line, print France: $f$, where $f$ is payment formatted for French currency.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>12324.134\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>US: $12,324.13\nIndia: Rs.12,324.13\nChina: ￥12,324.13\nFrance: 12&nbsp;324,13 &euro;\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Each line contains the value of $payment$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;formatted according to the four countries' respective currencies.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/74c442cf-8062-4b41-a921-b561eab60d41",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939e"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "java-strings-introduction",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Strings Introduction",
  "content": "<blockquote>\n<p>\"A string is traditionally a sequence of characters, either as a literal constant or as some kind of variable.\" &mdash;&nbsp;<a href=\"https://en.wikipedia.org/wiki/String_%28computer_science%29\">Wikipedia: String (computer science)</a></p>\n</blockquote>\n<p>This exercise is to test your understanding of Java Strings. A sample&nbsp;<em>String</em>&nbsp;declaration:</p>\n<pre><code>String myString = \"Hello World!\"\n</code></pre>\n<p>The elements of a&nbsp;<em>String</em>&nbsp;are called&nbsp;<em>characters</em>. The number of&nbsp;<em>characters</em>&nbsp;in a&nbsp;<em>String</em>&nbsp;is called the&nbsp;<em>length</em>, and it can be retrieved with the&nbsp;<em>String.length()</em>&nbsp;method.</p>\n<p>Given two strings of lowercase English letters, $A$ and $B$, perform the following operations:<br />1. Sum the lengths of $A$ and $B$.<br />2. Determine if $A$ is lexicographically larger than $B$ (i.e.: does $B$ come before $A$ in the dictionary?).<br />3. Capitalize the first letter in $A$ and $B$ and print them on a single line, separated by a space.</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains a string $A$. The second line contains another string $B$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>. The strings are comprised of only lowercase English letters.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>There are three lines of output:<br />For the first line, sum the lengths of $A$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> and $B$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.<br />For the second line, write&nbsp;<code>Yes</code> if $A$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span> is lexicographically greater than $B$&nbsp;otherwise print&nbsp;<code>No</code>&nbsp;instead.<br />For the third line, capitalize the first letter in both $A$<span id=\"MathJax-Element-5-Frame\" class=\"MathJax_SVG\"></span> and $B$<span id=\"MathJax-Element-6-Frame\" class=\"MathJax_SVG\"></span>&nbsp;and print them on a single line, separated by a space.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">hello</span>\n<span class=\"err\">java</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">9</span>\n<span class=\"err\">No</span>\n<span class=\"err\">Hello Java</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>String $A$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> is \"hello\" and $B$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;is \"java\".</p>\n<p><span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>$A$ has a <em>length</em> of $5$<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>, and $B$<span id=\"MathJax-Element-5-Frame\" class=\"MathJax_SVG\"></span>&nbsp;has a&nbsp;<em>length</em> of $4$<span id=\"MathJax-Element-6-Frame\" class=\"MathJax_SVG\"></span>; the sum of their lengths is $9$<span id=\"MathJax-Element-7-Frame\" class=\"MathJax_SVG\"></span>.<br />When sorted alphabetically/lexicographically, \"hello\" precedes \"java\"; therefore, $A$<span id=\"MathJax-Element-8-Frame\" class=\"MathJax_SVG\"></span> is not greater than $B$<span id=\"MathJax-Element-9-Frame\" class=\"MathJax_SVG\"></span>&nbsp;and the answer is&nbsp;<code>No</code>.</p>\n<p>When you capitalize the first letter of both $A$<span id=\"MathJax-Element-10-Frame\" class=\"MathJax_SVG\"></span> and $B$<span id=\"MathJax-Element-11-Frame\" class=\"MathJax_SVG\"></span>&nbsp;and then print them separated by a space, you get \"Hello Java\".</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1b119194-f5ad-4ece-9e55-65aef3ab25c3",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef939f"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "java-substring",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Substring",
  "content": "<p>Given a string, $s$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, and two indices, $start$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> and $end$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>, print a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Substring\">substring</a> consisting of all characters in the inclusive range from $start$ to $end-1$<span id=\"MathJax-Element-5-Frame\" class=\"MathJax_SVG\"></span>. You'll find the&nbsp;<em>String</em>&nbsp;class'&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-\">substring method</a>&nbsp;helpful in completing this challenge.</p>\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains a single string denoting $s$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.<br />The second line contains two space-separated integers denoting the respective values of $start$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> and $end$.</p>\n<p><strong>Constraints</strong></p>\n<p>- $1 \\leq|s| \\leq 100$<br />- $0 \\leq$ start $&lt;$ end $\\leq n$<br />- String $s$ consists of English alphabetic letters (i.e., $[a-z A-Z]$ ) only.</p>\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the substring in the inclusive range from $start$ to $end-1$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>Helloworld\n3 7\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>lowo\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In the diagram below, the substring is highlighted in&nbsp;<em>green</em>:</p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/b8e3d105-2cb6-4be9-b37c-995388cf3aab\" alt=\"1470896981-637b6a022f-substring\" /></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/49ab2c64-5622-478f-9f6f-c78736a6b61c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-substring-comparisons",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Substring Comparisons",
  "content": "<p>We define the following terms:</p>\n<ul>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\">Lexicographical Order</a>, also known as&nbsp;<em>alphabetic</em>&nbsp;or&nbsp;<em>dictionary</em>&nbsp;order, orders characters as follows:</p>\n<div class=\"MathJax_SVG_Display\"><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span></div>\n<p style=\"text-align: center;\">$\\mathrm{A}&lt;\\mathrm{B}&lt;\\ldots&lt;\\mathrm{Y}&lt;\\mathrm{Z}&lt;\\mathrm{a}&lt;\\mathrm{b}&lt;\\ldots&lt;\\mathrm{y}&lt;\\mathbf{z}$</p>\n</li>\n</ul>\n<p>For example,&nbsp;<code>ball &lt; cat</code>,&nbsp;<code>dog &lt; dorm</code>,&nbsp;<code>Happy &lt; happy</code>,&nbsp;<code>Zoo &lt; ball</code>.</p>\n<ul>\n<li>A&nbsp;<a href=\"https://en.wikipedia.org/wiki/Substring\">substring</a>&nbsp;of a string is a contiguous block of characters in the string. For example, the substrings of&nbsp;<code>abc</code>&nbsp;are&nbsp;<code>a</code>,&nbsp;<code>b</code>,&nbsp;<code>c</code>,&nbsp;<code>ab</code>,&nbsp;<code>bc</code>, and&nbsp;<code>abc</code>.</li>\n</ul>\n<p>Given a string, $s$, and an integer, $k$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>, complete the function so that it finds the lexicographically&nbsp;<em>smallest</em>&nbsp;and&nbsp;<em>largest</em> substrings of length $k$<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>getSmallestAndLargest</em>&nbsp;function in the editor below.</p>\n<p><em>getSmallestAndLargest</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>string s:</em>&nbsp;a string</li>\n<li><em>int k:</em>&nbsp;the length of the substrings to find</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>string:</em>&nbsp;the string ' + \"\\n\" + ' where and are the two substrings</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains a string denoting $s$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.<br />The second line contains an integer denoting $k$.</p>\n<p><strong>Constraints</strong></p>\n<p>- $1 \\leq|s| \\leq 1000$<br />- $s$ consists of English alphabetic letters only (i.e., $[a-z A-Z])$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">welcometojava</span>\n<span class=\"err\">3</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">ava</span>\n<span class=\"err\">wel</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>String $s=$ \"welcometojava\" has the following lexicographically-ordered substrings of length $k=3$<br />[\"ava\", \"com\", \"elc\", \"eto\", \"jav\", \"Ico\", \"met\", \"oja\", \"ome\", \"toj\", \"wel\"]</p>\n<p>We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-separated values (i.e.,&nbsp;<code>ava\\nwel</code>).</p>\n<p>The stub code in the editor then prints&nbsp;<code>ava</code>&nbsp;as our first line of output and&nbsp;<code>wel</code>&nbsp;as our second line of output.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/7fe232cb-5a01-4c17-a110-3955d9b21640",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-string-reverse",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java String Reverse",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.</p>\n<hr />\n<p>Given a string $A$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, print&nbsp;<code>Yes</code>&nbsp;if it is a palindrome, print&nbsp;<code>No</code>&nbsp;otherwise.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<ul>\n<li><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>$A$ will consist at most $50$&nbsp;lower case english letters.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>madam\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Yes</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/aaa882f7-a297-4d9e-b750-b6df33c1ad74",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-anagrams",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Anagrams",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><span>Two strings, and , are called anagrams if they contain all the same characters in the same frequencies. For this challenge, the test is not case-sensitive. For example, the anagrams of are , , , , , and .$ab$</span><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span><span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span><code>CAT</code><code>CAT</code><code>ACT</code><code>tac</code><code>TCA</code><code>aTC</code><code>CtA</code></p>\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>isAnagram</em>&nbsp;function in the editor.</p>\n<p><em>isAnagram</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>string a:</em>&nbsp;the first string</li>\n<li><em>string b:</em>&nbsp;the second string</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><span><em>boolean:</em>&nbsp;If&nbsp;and&nbsp;are case-insensitive anagrams, return true. Otherwise, return false. $ab$</span><span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span><span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p><span>The first line contains a string&nbsp;.<br />The second line contains a string&nbsp;.$ab$</span></p>\n<p><span><strong>Constraints</strong></span></p>\n<p><span>- $1 \\leq \\operatorname{length}(a)$, length $(b) \\leq 50$<br />- Strings and consist of English alphabetic characters. $a b$<br />- The comparison should NOT be case sensitive.</span></p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">anagram</span>\n<span class=\"err\">margana</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Anagrams</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<table class=\"challenge-body-table\">\n<thead>\n<tr>\n<th>Character</th>\n<th><span>Frequency:&nbsp;</span><code>anagram</code></th>\n<th><span>Frequency:&nbsp;</span><code>margana</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>A</code><span>&nbsp;or&nbsp;</span><code>a</code></td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td><code>G</code><span>&nbsp;or&nbsp;</span><code>g</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>N</code><span>&nbsp;or&nbsp;</span><code>n</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>M</code><span>&nbsp;or&nbsp;</span><code>m</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>R</code><span>&nbsp;or&nbsp;</span><code>r</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>The two strings contain all the same letters in the same frequencies, so we print \"Anagrams\".</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">anagramm</span>\n<span class=\"err\">marganaa</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 1</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Not Anagrams</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 1</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<table class=\"challenge-body-table\">\n<thead>\n<tr>\n<th>Character</th>\n<th><span>Frequency:&nbsp;</span><code>anagramm</code></th>\n<th><span>Frequency:&nbsp;</span><code>marganaa</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>A</code><span>&nbsp;or&nbsp;</span><code>a</code></td>\n<td>3</td>\n<td>4</td>\n</tr>\n<tr>\n<td><code>G</code><span>&nbsp;or&nbsp;</span><code>g</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>N</code><span>&nbsp;or&nbsp;</span><code>n</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>M</code><span>&nbsp;or&nbsp;</span><code>m</code></td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>R</code><span>&nbsp;or&nbsp;</span><code>r</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p><span>The two strings don't contain the same number of&nbsp;'s and&nbsp;'s, so we print \"Not Anagrams\".</span><code>a</code><code>m</code></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 2</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Hello</span>\n<span class=\"err\">hello</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 2</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Anagrams</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 2</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<table class=\"challenge-body-table\">\n<thead>\n<tr>\n<th>Character</th>\n<th><span>Frequency:&nbsp;</span><code>Hello</code></th>\n<th><span>Frequency:&nbsp;</span><code>hello</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>E</code><span>&nbsp;or&nbsp;</span><code>e</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>H</code><span>&nbsp;or&nbsp;</span><code>h</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>L</code><span>&nbsp;or&nbsp;</span><code>l</code></td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>O</code><span>&nbsp;or&nbsp;</span><code>o</code></td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>The two strings contain all the same letters in the same frequencies, so we print \"Anagrams\".</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/565bc4a9-f299-4e31-968f-1d6cc976fd96",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-string-tokens",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java String Tokens",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Given a string, $s$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, matching the regular expression&nbsp;<code>[A-Za-z !,?._'@]+</code>, split the string into&nbsp;<em>tokens</em>. We define a token to be one or more consecutive English alphabetic letters. Then, print the number of tokens, followed by each token on a new line.</p>\n<p><strong>Note:</strong>&nbsp;You may find the&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\">String.split</a>&nbsp;method helpful in completing this challenge.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>A single string, $s$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n<p>- $1 \\leq$ length of $s \\leq 4 \\cdot 10^{5}$<br />- $s$ is composed of any of the following: English alphabetic letters, blank spaces, exclamation points ( !), commas ( , ), question marks (?), periods (.), underscores (_), apostrophes ( ' ), and at symbols (a).</p>\n<section class=\"problem-statement split\">\n<div class=\"ui-tabs-wrap\">\n<div id=\"tab-2-content-undefined\" class=\"tab-list-content\" tabindex=\"0\" role=\"tabpanel\" aria-labelledby=\"tab-2-item-undefined\">\n<div class=\"theme-m hr_tour-problem-statement problem-statement have-external-links\">\n<div class=\"content-text challenge-text mlB hackdown-container theme-m\">\n<div class=\"challenge-body-html\">\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>On the first line, print an integer, $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, denoting the number of tokens in string $s$&nbsp;(they&nbsp;<em>do not</em>&nbsp;need to be unique). Next, print each of the $n$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;tokens on a new line in the same order as they appear in input string $s$<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>He is a very very good boy, isn't he?\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>10\nHe\nis\na\nvery\nvery\ngood\nboy\nisn\nt\nhe\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>We consider a token to be a contiguous segment of alphabetic characters. There are a total of $10$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> such tokens in string $s$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>, and each token is printed in the same order in which it appears in string $s$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</section>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/089751e4-d26a-43e0-ad17-a4863585ad13",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "pattern-syntax-checker",
  "tags": [],
  "level": "BEGINNER",
  "title": "Pattern Syntax Checker",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Using&nbsp;<strong>Regex</strong>, we can easily match or search for patterns in a text. Before searching for a pattern, we have to specify one using some well-defined syntax.</p>\n<p>In this problem, you are given a pattern. You have to check whether the syntax of the given pattern is valid.</p>\n<p><strong>Note</strong>: In this problem, a regex is only valid if you can compile it using the&nbsp;<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#compile%28java.lang.String%29\">Pattern.compile</a>&nbsp;method.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line of input contains an integer $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, denoting the number of test cases. The next $N$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines contain a string of any printable characters representing the pattern of a regex.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each test case, print&nbsp;<code>Valid</code>&nbsp;if the syntax of the given pattern is correct. Otherwise, print&nbsp;<code>Invalid</code>. Do not print the quotes.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n([A-Z])(.+)\n[AZ[a-z](a-z)\nbatcatpat(nat\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Valid\nInvalid\nInvalid</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/92506e20-7bef-48f7-800a-a7648db45fa5",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "java-regex",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Regex",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Write a class called&nbsp;<em>MyRegex</em>&nbsp;which will contain a string pattern. You need to write a regular expression and assign it to the pattern such that it can be used to validate an IP address. Use the following definition of an IP address:</p>\n<pre><code>IP address is a string in the form \"A.B.C.D\", where the value of A, B, C, and D may range from 0 to 255. Leading zeros are allowed. The length of A, B, C, or D can't be greater than 3.\n</code></pre>\n<p>Some valid IP address:</p>\n<div class=\"highlight\">\n<pre><span class=\"err\">000.12.12.034</span>\n<span class=\"err\">121.234.12.12</span>\n<span class=\"err\">23.45.12.56</span>\n</pre>\n</div>\n<p>Some invalid IP address:</p>\n<div class=\"highlight\">\n<pre><span class=\"err\">000.12.234.23.23</span>\n<span class=\"err\">666.666.23.23</span>\n<span class=\"err\">.213.123.23.32</span>\n<span class=\"err\">23.45.22.32.</span>\n<span class=\"err\">I.Am.not.an.ip</span>\n</pre>\n</div>\n<p>In this problem you will be provided strings containing any combination of ASCII characters. You have to write a regular expression to find the valid IPs.</p>\n<p>Just write the MyRegex class which contains a String $pattern$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>. The string should contain the correct regular expression.</p>\n<p>(MyRegex class&nbsp;<em>MUST NOT</em>&nbsp;be public)</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>000.12.12.034\n121.234.12.12\n23.45.12.56\n00.12.123.123123.123\n122.23\nHello.IP\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>true\ntrue\ntrue\nfalse\nfalse\nfalse</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/caa6404c-404f-4052-a9d1-bf1a284f616e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "java-regex-2-duplicate-words",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Regex 2 - Duplicate Words",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>In this challenge, we use regular expressions (RegEx) to remove instances of words that are repeated more than once, but retain the&nbsp;<em>first occurrence</em>&nbsp;of any case-insensitive repeated word. For example, the words&nbsp;<code>love</code>&nbsp;and&nbsp;<code>to</code>&nbsp;are repeated in the sentence&nbsp;<code>I love Love to To tO code</code>. Can you complete the code in the editor so it will turn&nbsp;<code>I love Love to To tO code</code>&nbsp;into&nbsp;<code>I love to code</code>?</p>\n<p>To solve this challenge, complete the following three lines:</p>\n<ol>\n<li>Write a RegEx that will match any repeated word.</li>\n<li>Complete the second&nbsp;<em>compile</em>&nbsp;argument so that the compiled RegEx is case-insensitive.</li>\n<li>Write the two necessary arguments for&nbsp;<em>replaceAll</em>&nbsp;such that each repeated word is replaced with the very first instance the word found in the sentence. It must be the&nbsp;<em>exact</em>&nbsp;first occurrence of the word, as the expected output is case-sensitive.</li>\n</ol>\n<p><strong>Note:</strong>&nbsp;This challenge uses a custom checker; you will fail the challenge if you modify anything other than the three locations that the comments direct you to complete. To restore the editor's original stub code, create a new buffer by clicking on the branch icon in the top left of the editor.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The following input is handled for you the given stub code:</p>\n<p>The first line contains an integer, $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, denoting the number of sentences.<br />Each of the $n$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;subsequent lines contains a single sentence consisting of English alphabetic letters and whitespace characters.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<p>- Each sentence consists of at most $10^{4}$ English alphabetic letters and whitespaces.<br />- $1 \\leq n \\leq 100$</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Stub code in the editor prints the sentence modified by the&nbsp;<em>replaceAll</em>&nbsp;line to stdout. The modified string must be a modified version of the initial sentence where all repeat occurrences of each word are removed.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\nGoodbye bye bye world world world\nSam went went to to to his business\nReya is is the the best player in eye eye game\nin inthe\nHello hello Ab aB\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Goodbye bye world\nSam went to his business\nReya is the best player in eye game\nin inthe\nHello Ab\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<ol>\n<li>We remove the second occurrence of&nbsp;<code>bye</code>&nbsp;and the second and third occurrences of&nbsp;<code>world</code>&nbsp;from&nbsp;<code>Goodbye bye bye world world world</code>&nbsp;to get&nbsp;<code>Goodbye bye world</code>.</li>\n<li>We remove the second occurrence of&nbsp;<code>went</code>&nbsp;and the second and third occurrences of&nbsp;<code>to</code>&nbsp;from&nbsp;<code>Sam went went to to to his business</code>&nbsp;to get&nbsp;<code>Sam went to his business</code>.</li>\n<li>We remove the second occurrence of&nbsp;<code>is</code>, the second occurrence of&nbsp;<code>the</code>, and the second occurrence of&nbsp;<code>eye</code>&nbsp;from&nbsp;<code>Reya is is the the best player in eye eye game</code>&nbsp;to get&nbsp;<code>Reya is the best player in eye game</code>.</li>\n<li>The sentence&nbsp;<code>in inthe</code>&nbsp;has no repeated words, so we do not modify it.</li>\n<li>We remove the second occurrence of&nbsp;<code>ab</code>&nbsp;from&nbsp;<code>Hello hello Ab aB</code>&nbsp;to get&nbsp;<code>Hello Ab</code>. It's important to note that our matching is&nbsp;<em>case-insensitive</em>, and we specifically retained the&nbsp;<em>first occurrence</em>&nbsp;of the matched word in our final string.</li>\n</ol>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/ed1eae41-8f76-4d08-b32a-e322e5db2c67",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "valid-username-regular-expression",
  "tags": [],
  "level": "BEGINNER",
  "title": "Valid Username Regular Expression",
  "content": "<p>You are updating the username policy on your company's internal networking platform. According to the policy, a username is considered valid if all the following constraints are satisfied:</p>\n<p>- The username consists of 8 to 30 characters inclusive. If the username consists of less than 8 or greater than 30 characters, then it is an invalid username.<br />- The username can only contain alphanumeric characters and underscores (_). Alphanumeric characters describe the character set consisting of lowercase characters $[a-z]$, uppercase characters $[A-Z]$, and digits $[0-9]$<br />- The first character of the username must be an alphabetic character, i.e., either lowercase character $[a-z]$ or uppercase character $[A-Z]$</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>For example:</p>\n<table class=\"challenge-body-table\">\n<thead>\n<tr>\n<th align=\"center\">Username</th>\n<th align=\"center\">Validity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><span style=\"color: #e03e2d;\">Julia</span><span id=\"MathJax-Element-10-Frame\" class=\"MathJax_SVG\"></span></td>\n<td align=\"center\">INVALID; Username length &lt; 8 characters</td>\n</tr>\n<tr>\n<td align=\"center\"><span style=\"color: #169179;\">Samantha</span><span id=\"MathJax-Element-11-Frame\" class=\"MathJax_SVG\"></span></td>\n<td align=\"center\">VALID</td>\n</tr>\n<tr>\n<td align=\"center\"><span style=\"color: #169179;\">Samantha_21</span><br /><span id=\"MathJax-Element-12-Frame\" class=\"MathJax_SVG\"></span></td>\n<td align=\"center\">VALID</td>\n</tr>\n<tr>\n<td align=\"center\"><span style=\"color: #e03e2d;\">1<span style=\"color: #169179;\">Samantha</span></span><span id=\"MathJax-Element-13-Frame\" class=\"MathJax_SVG\"></span></td>\n<td align=\"center\">INVALID; Username begins with non-alphabetic character</td>\n</tr>\n<tr>\n<td align=\"center\">Samantha<span style=\"color: #e03e2d;\">?<span style=\"color: #ecf0f1;\">10_2A</span></span><span id=\"MathJax-Element-14-Frame\" class=\"MathJax_SVG\"></span></td>\n<td align=\"center\">INVALID; '?' character not allowed</td>\n</tr>\n</tbody>\n</table>\n<p>Update the value of&nbsp;<em>regularExpression</em>&nbsp;field in the&nbsp;<em>UsernameValidator</em>&nbsp;class so that the regular expression only matches with valid usernames.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line of input contains an integer&nbsp;<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, describing the total number of usernames. Each of the next&nbsp;<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines contains a string describing the username. The locked stub code reads the inputs and validates the username.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<p>- $1 \\leq n \\leq 100$<br />- The username consists of any printable characters.</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each of the usernames, the locked stub code prints&nbsp;<code>Valid</code>&nbsp;if the username is valid; otherwise&nbsp;<code>Invalid</code>&nbsp;each on a new line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">8</span>\n<span class=\"err\">Julia</span>\n<span class=\"err\">Samantha</span>\n<span class=\"err\">Samantha_21</span>\n<span class=\"err\">1Samantha</span>\n<span class=\"err\">Samantha?10_2A</span>\n<span class=\"err\">JuliaZ007</span>\n<span class=\"err\">Julia@007</span>\n<span class=\"err\">_Julia007</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Invalid</span>\n<span class=\"err\">Valid</span>\n<span class=\"err\">Valid</span>\n<span class=\"err\">Invalid</span>\n<span class=\"err\">Invalid</span>\n<span class=\"err\">Valid</span>\n<span class=\"err\">Invalid</span>\n<span class=\"err\">Invalid</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Refer diagram in the challenge statement.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e59b6a54-db84-4d5e-bc06-38f04465fe99",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "tag-content-extractor",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Tag Content Extractor",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>In a tag-based language like&nbsp;<em>XML</em>&nbsp;or&nbsp;<em>HTML</em>, contents are enclosed between a&nbsp;<em>start tag</em>&nbsp;and an&nbsp;<em>end tag</em>&nbsp;like&nbsp;<code>&lt;tag&gt;contents&lt;/tag&gt;</code>. Note that the corresponding&nbsp;<em>end tag</em>&nbsp;starts with a&nbsp;<code>/</code>.</p>\n<p>Given a string of text in a tag-based language, parse this text and retrieve the contents enclosed within sequences of well-organized tags meeting the following criterion:</p>\n<ol>\n<li>\n<p>The name of the&nbsp;<em>start</em>&nbsp;and&nbsp;<em>end</em>&nbsp;tags must be same. The HTML code&nbsp;<code>&lt;h1&gt;Hello World&lt;/h2&gt;</code>&nbsp;is&nbsp;<em>not valid</em>, because the text starts with an&nbsp;<code>h1</code>&nbsp;tag and ends with a non-matching&nbsp;<code>h2</code>&nbsp;tag.</p>\n</li>\n<li>\n<p>Tags can be nested, but content between nested tags is considered&nbsp;<em>not valid</em>. For example, in&nbsp;<code>&lt;h1&gt;&lt;a&gt;contents&lt;/a&gt;invalid&lt;/h1&gt;</code>,&nbsp;<code>contents</code>&nbsp;is&nbsp;<em>valid</em>&nbsp;but&nbsp;<code>invalid</code>&nbsp;is&nbsp;<em>not valid</em>.</p>\n</li>\n<li>\n<p>Tags can consist of any printable characters.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line of input contains a single integer, $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;(the number of lines).<br />The $N$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;subsequent lines each contain a line of text.</p>\n<p><strong>Constraints</strong></p>\n<p>- $1 \\leq N \\leq 100$<br />- Each line contains a maximum of $10^{4}$ printable characters.<br />- The total number of characters in all test cases will not exceed $10^{6}$.</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each line, print the content enclosed within valid tags.<br />If a line contains multiple instances of valid content, print out each instance of valid content on a new line; if no valid content is found, print&nbsp;<code>None</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>4\n&lt;h1&gt;Nayeem loves counseling&lt;/h1&gt;\n&lt;h1&gt;&lt;h1&gt;Sanjay has no watch&lt;/h1&gt;&lt;/h1&gt;&lt;par&gt;So wait for a while&lt;/par&gt;\n&lt;Amee&gt;safat codes like a ninja&lt;/amee&gt;\n&lt;SA premium&gt;Imtiaz has a secret crush&lt;/SA premium&gt;\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Nayeem loves counseling\nSanjay has no watch\nSo wait for a while\nNone\nImtiaz has a secret crush</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b034a292-a491-4817-9f81-e4524bb8220a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93a9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-bigdecimal",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java BigDecimal",
  "content": "<p>Java's BigDecimal class can handle arbitrary-precision signed decimal numbers. Let's test your knowledge of them!<br />Given an array, $s$, of $n$ real number strings, sort them in descending order - but wait, there's more! Each number must be printed in the exact same format as it was read from stdin, meaning that $.1$ is printed as $.1$, and $0.1$ is printed as $0.1$. If two numbers represent numerically equivalent values (e.g., $.1 \\equiv 0.1$ ), then they must be listed in the same order as they were received as input).</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Complete the code in the unlocked section of the editor below. You must rearrange array&nbsp;<span id=\"MathJax-Element-8-Frame\" class=\"MathJax_SVG\"></span>'s elements according to the instructions above.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line consists of a single integer, $n$, denoting the number of integer strings. Each line $i$ of the $n$ subsequent lines contains a real number denoting the value of $s_{i}$.</p>\n<p><strong>Constraints</strong></p>\n<p>- $1 \\leq n \\leq 200$<br />- Each $s_{i}$ has at most 300 digits.</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Locked stub code in the editor will print the contents of array $s$&nbsp;to stdout. You are only responsible for reordering the array's elements.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>9\n-100\n50\n0\n56.6\n90\n0.12\n.12\n02.34\n000.000\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>90\n56.6\n50\n02.34\n0.12\n.12\n0\n000.000\n-100</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b26102f6-b455-4a6d-a37b-f05bf74d9818",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93aa"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-primality-test",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Primality Test",
  "content": "<p>A prime number is a natural number greater than 1 whose only positive divisors are 1 and itself. For example, the first six prime numbers are $2,3,5,7,11$, and 13<br />Given a large integer, $n$<span id=\"MathJax-Element-9-Frame\" class=\"MathJax_SVG\"></span>, use the Java&nbsp;<em>BigInteger</em>&nbsp;class'&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#isProbablePrime%28int%29\"><em>isProbablePrime</em></a>&nbsp;method to determine and print whether it's&nbsp;<code>prime</code>&nbsp;or&nbsp;<code>not prime</code>.</p>\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>A single line containing an integer, $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;(the number to be checked).</p>\n<p><strong>Constraints</strong></p>\n<ul>\n<li><span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\">n</span>&nbsp;contains at most 100<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;digits.</li>\n</ul>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>If $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;is a prime number, print&nbsp;<code>prime</code>; otherwise, print&nbsp;<code>not prime</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>13\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>prime\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The only positive divisors of 13<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> are 1<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> and 13<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>, so we print&nbsp;<code>prime</code>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/fcbedda4-1b5b-43c5-9c2a-b2e8ef2f15ca",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ab"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-biginteger",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java BigInteger",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>In this problem, you have to add and multiply huge numbers! These numbers are so big that you can't contain them in any ordinary data types like a long integer.</p>\n<p>Use the power of Java's BigInteger class and solve this problem.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There will be two lines containing two numbers, $a$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> and $b$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">\n<p><span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>$a$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> and $b$ are non-negative integers and can have maximum 200<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>&nbsp;digits.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Output two lines. The first line should contain $a+b$, and the second line should contain $a \\times b$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>. Don't print any leading zeros.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1234\n20\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1254\n24680\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>$1234+20=1254$<br />$1234 \\times 20=24680$</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f0daeda0-4ab6-4ef4-8ade-df773c4ab7fe",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ac"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "java-1d-array",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java 1D Array",
  "content": "<p>An array is a simple data structure used to store a collection of data in a contiguous block of memory. Each element in the collection is accessed using an index, and the elements are easy to find because they're stored sequentially in memory.</p>\n<p>Because the collection of elements in an array is stored as a big block of data, we typically use arrays when we know exactly how many pieces of data we're going to have. For example, you might use an array to store a list of student ID numbers, or the names of state capitals. To create an array of integers named myArray that can hold four integer values, you would write the following code:</p>\n<pre><code>int[] myArray = new int[4];</code></pre>\n<p>This sets aside a block of memory that's capable of storing 4 integers. Each integer storage cell is assigned a unique index ranging from 0 to one less than the size of the array, and each cell initially contains a 0 . In the case of myArray, we can store integers at indices $0,1,2$, and 3 . Let's say we wanted the last cell to store the number $12 ;$ to do this, we write:</p>\n<pre><code>myArray[3] = 12;\n</code></pre>\n<p>Similarly, we can print the contents of the last cell with the following code:</p>\n<pre><code>System.out.println(myArray[3]);</code></pre>\n<p>The code above prints the value stored at index 3 of myArray, which is 12 (the value we previously stored there). It's important to note that while Java initializes each cell of an array of integers with a 0, not all languages do this.</p>\n<p><strong>Task</strong></p>\n<p>The code in your editor does the following:<br />1. Reads an integer from stdin and saves it to a variable, $n$, denoting some number of integers.<br />2. Reads $n$ integers corresponding to $a_{0}, a_{1}, \\ldots, a_{n-1}$ from stdin and saves each integer $a_{i}$ to a variable, val.<br />3. Attempts to print each element of an array of integers named $a$.<br />Write the following code in the unlocked portion of your editor:<br />1. Create an array, $a$, capable of holding $n$ integers.<br />2. Modify the code in the loop so that it saves each sequential value to its corresponding location in the array. For example, the first value must be stored in $a_{0}$, the second value must be stored in $a_{1}$, and so on.<br />Good luck!</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains a single integer, $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, denoting the size of the array.<br />Each line $i$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> of the $n$<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span> subsequent lines contains a single integer denoting the value of element $a_{i}$<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for printing any output to stdout. Locked code in the editor loops through array $a$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;and prints each sequential element on a new line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n10\n20\n30\n40\n50\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>10\n20\n30\n40\n50\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">When we save each integer to its corresponding index in $a$, we get $a=[10,20,30,40,50]$. The locked code prints each array element on a new line from left to right.</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/763f1523-afcc-4835-81d7-5102c4cb91f5",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ad"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-2d-array",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java 2D Array",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a $6 /times 6$&nbsp;2D array. An hourglass in an array is a portion shaped like this:</p>\n<pre><code>a b c\n  d\ne f g\n</code></pre>\n<p>For example, if we create an hourglass using the number 1 within an array full of zeros, it may look like this:</p>\n<pre><code>1 1 1 0 0 0\n0 1 0 0 0 0\n1 1 1 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n</code></pre>\n<p>Actually, there are many hourglasses in the array above. The three leftmost hourglasses are the following:</p>\n<pre><code>1 1 1     1 1 0     1 0 0\n  1         0         0\n1 1 1     1 1 0     1 0 0\n</code></pre>\n<p>The sum of an hourglass is the sum of all the numbers within it. The sum for the hourglasses above are 7, 4, and 2, respectively.</p>\n<p>In this problem you have to&nbsp;<em>print the largest sum among all the hourglasses</em>&nbsp;in the array.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There will be exactly 6<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> lines, each containing 6<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> integers seperated by spaces. Each integer will be between -9<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span> and 9<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>&nbsp;inclusive.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the answer to this problem on a single line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1 1 1 0 0 0\n0 1 0 0 0 0\n1 1 1 0 0 0\n0 0 2 4 4 0\n0 0 0 2 0 0\n0 0 1 2 4 0\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>19\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The hourglass which has the largest sum is:</p>\n<pre><code>2 4 4\n  2\n1 2 4</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/2edecea1-484f-4809-a0f6-13191d706c98",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ae"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-subarray",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Subarray",
  "content": "<p>We define the following:</p>\n<ul>\n<li>A subarray of an $n$-element array is an array composed from a contiguous block of the original array's elements. For example, if array $=[1,2,3]$, then the subarrays are $[1],[2],[3],[1,2],[2,3]$, and $[1,2,3]$. Something like $[1,3]$ would not be a subarray as it's not a contiguous subsection of the original array.</li>\n<li>The sum of an array is the total sum of its elements.<br />\n<ul>\n<li>An array's sum is negative if the total sum of its elements is negative.</li>\n<li>An array's sum is positive if the total sum of its elements is positive.</li>\n</ul>\n</li>\n</ul>\n<p>Given an array of $n$ integers, find and print its number of negative subarrays on a new line.</p>\n<p><strong>Input Format</strong><br />The first line contains a single integer, $n$, denoting the length of array $A=\\left[a_{0}, a_{1}, \\ldots, a_{n-1}\\right]$ The second line contains $n$ space-separated integers describing each respective element, $a_{i}$, in array $A$.<br /><strong>Constraints</strong><br />- $1 \\leq n \\leq 100$<br />- $-10^{4} \\leq a_{i} \\leq 10^{4}$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the number of subarrays of $A$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;having negative sums.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n1 -2 4 -5 1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>9\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>There are nine negative subarrays of $A=[1,-2,4,-5,1]$ :<br />1. $[1: 1] \\Rightarrow-2$<br />2. $[3: 3] \\Rightarrow-5$<br />3. $[0: 1] \\Rightarrow 1+-2=-1$<br />4. $[2: 3] \\Rightarrow 4+-5=-1$<br />5. $[3: 4] \\Rightarrow-5+1=-4$<br />6. $[1: 3] \\Rightarrow-2+4+-5=-3$<br />7. $[0: 3] \\Rightarrow 1+-2+4+-5=-2$<br />8. $[1: 4] \\Rightarrow-2+4+-5+1=-2$<br />9. $[0: 4] \\Rightarrow 1+-2+4+-5+1=-1$<br />Thus, we print 9 on a new line.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/df147cd3-faec-4707-a5b2-cd7c2d9a0152",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93af"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-arraylist",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Arraylist",
  "content": "<p>Sometimes it's better to use dynamic size arrays. Java's&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html\">Arraylist</a>&nbsp;can provide you this feature. Try to solve this problem using Arraylist.</p>\n<p>You are given $n$ lines. In each line there are zero or more integers. You need to answer a few queries where you need to tell the number located in $y^{\\text {th }}$ position of $x^{t h}$ line.<br />Take your input from System.in.<br /><strong>Input Format</strong><br />The first line has an integer $n$. In each of the next $n$ lines there will be an integer $d$ denoting number of integers on that line and then there will be $d$ space-separated integers. In the next line there will be an integer $q$ denoting number of queries. Each query will consist of two integers $x$ and $y$.<br /><strong>Constraints</strong><br />- $1&lt;=n&lt;=20000$<br />- $0&lt;=d&lt;=50000$<br />- $1&lt;=q&lt;=1000$<br />- $1&lt;=x&lt;=n$<br />Each number will fit in signed integer.<br />Total number of integers in $n$ lines will not cross $10^{5}$.</p>\n<p><strong>Output Format</strong><br />In each line, output the number located in $y^{\\text {th }}$ position of $x^{t h}$ line. If there is no such position, just print \"ERROR!\"</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n5 41 77 74 22 44\n1 12\n4 37 34 36 52\n0\n3 20 22 33\n5\n1 3\n3 4\n3 1\n4 3\n5 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>74\n52\n37\nERROR!\nERROR!\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>The diagram below explains the queries:</p>\n<p><img style=\"width: 100%;\" src=\"../../public_files/2f11155e-6f6f-42f0-983a-af2ba0204d93\" alt=\"1489168616-b25dd38013-arraylist\" /></p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c4495a6b-4e8b-47e2-8442-e69d974c32fa",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "java-1d-array-part-2",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java 1D Array (Part 2)",
  "content": "<p>Let's play a game on an array! You're standing at index 0 of an $n$-element array named game. From some index $i$ (where $0 \\leq i&lt;n$ ), you can perform one of the following moves:<br />- Move Backward: If cell $i-1$ exists and contains a 0 , you can walk back to cell $i-1$<br />- Move Forward:<br />- If cell $i+1$ contains a zero, you can walk to cell $i+1$.<br />- If cell $i+$ leap contains a zero, you can jump to cell $i+$ leap.<br />- If you're standing in cell $n-1$ or the value of $i+$ leap $\\geq n$, you can walk or jump off the end of the array and win the game.<br />In other words, you can move from index $i$ to index $i+1, i-1$, or $i+$ leap as long as the destination index is a cell containing a 0 . If the destination index is greater than $n-1$, you win the game.</p>\n<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><strong>Function Description</strong></p>\n<p>Complete the&nbsp;<em>canWin</em>&nbsp;function in the editor below.</p>\n<p><em>canWin</em>&nbsp;has the following parameters:</p>\n<ul>\n<li><em>int leap:</em>&nbsp;the size of the leap</li>\n<li><em>int game[n]:</em>&nbsp;the array to traverse</li>\n</ul>\n<p><strong>Returns</strong></p>\n<ul>\n<li><em>boolean:</em>&nbsp;true if the game can be won, otherwise false</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>The first line contains an integer, $q$, denoting the number of queries (i.e., function calls).<br />The $2 \\cdot q$ subsequent lines describe each query over two lines:<br />1. The first line contains two space-separated integers describing the respective values of $n$ and leap.<br />2. The second line contains $n$ space-separated binary integers (i.e., zeroes and ones) describing the respective values of game $_{0}, g a m e_{1}, \\ldots$, game $_{n-1}$</p>\n<p><strong>Constraints</strong><br />- $1 \\leq q \\leq 5000$<br />- $2 \\leq n \\leq 100$<br />- $0 \\leq$ leap $\\leq 100$<br />- It is guaranteed that the value of $\\operatorname{game}[0]$ is always 0 .</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre>STDIN           Function\n-----           --------\n4               q = 4 (number of queries)\n5 3             game[] size n = 5, leap = 3 (first query)\n0 0 0 0 0       game = [0, 0, 0, 0, 0]\n6 5             game[] size n = 6, leap = 5 (second query)\n0 0 0 1 1 1     . . .\n6 3\n0 0 1 1 1 0\n3 1\n0 1 0\n</pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>YES\nYES\nNO\nNO\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>We perform the following $q=4$ queries:<br />1. For game $=[0,0,0,0,0]$ and leap $=3$, we can walk and/or jump to the end of the array because every cell contains a $0 .$ Because we can win, we return true.<br />2. For game $=[0,0,0,1,1,1]$ and leap $=5$, we can walk to index 1 and then jump $i+$ leap $=1+5=6$ units to the end of the array. Because we can win, we return true.<br />3. For game $=[0,0,1,1,1,0]$ and leap $=3$, there is no way for us to get past the three consecutive ones. Because we cannot win, we return false.<br />4. For game $=[0,1,0]$ and leap $=1$, there is no way for us to get past the one at index 1 . Because we cannot win, we return false.</p>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/61c5ef42-e558-4baf-9ec4-970b0f749688",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-list",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java List",
  "content": "<p>For this problem, we have 2<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;types of queries you can perform on a&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/List.html\">List</a>:</p>\n<ol>\n<li>\n<p>Insert y<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span> at index x<span id=\"MathJax-Element-3-Frame\" class=\"MathJax_SVG\"></span>:</p>\n<pre>Insert\nx y</pre>\n</li>\n<li>\n<p>Delete the element at index x<span id=\"MathJax-Element-4-Frame\" class=\"MathJax_SVG\"></span>:</p>\n<pre>Delete\nx</pre>\n</li>\n</ol>\n<p>Given a list, $L$, of $N$ integers, perform $Q$ queries on the list. Once all queries are completed, print the modified list as a single line of space-separated integers.</p>\n<p><strong>Input Format</strong><br />The first line contains an integer, $N$ (the initial number of elements in $L$ ).<br />The second line contains $N$ space-separated integers describing $L$.<br />The third line contains an integer, $Q$ (the number of queries).<br />The $2 Q$ subsequent lines describe the queries, and each query is described over two lines:<br />- If the first line of a query contains the String Insert, then the second line contains two space separated integers $x y$, and the value $y$ must be inserted into $L$ at index $x$.<br />- If the first line of a query contains the String Delete, then the second line contains index $x$, whose element must be deleted from $L$.</p>\n<p><strong>Constraints</strong><br />- $1 \\leq N \\leq 4000$<br />- $1 \\leq Q \\leq 4000$<br />- Each element in is a 32-bit integer.<br /><strong>Output Format</strong><br />Print the updated list $L$ as a single line of space-separated integers.<br /><strong>Sample Input</strong></p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n12 0 1 78 12\n2\nInsert\n5 23\nDelete\n0\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>0 1 78 12 23\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n</div>\n<p>$$<br />L=[12,0,1,78,12]<br />$$<br />$Q_{0}:$ Insert 23 at index 5 .<br />$L_{0}=[12,0,1,78,12,23]$<br />$Q_{1}$ : Delete the element at index 0 .<br />$$<br />L_{1}=[0,1,78,12,23]<br />$$<br />Having performed all $Q$ queries, we print $L_{1}$ as a single line of space-separated integers.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/26797353-e3f4-4269-95d8-3ada1026954e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-map",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Map",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a phone book that consists of people's names and their phone number. After that you will be given some person's name as query. For each query, print the phone number of that person.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line will have an integer $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;denoting the number of entries in the phone book. Each entry consists of two lines: a name and the corresponding phone number.</p>\n<p>After these, there will be some queries. Each query will contain a person's name. Read the queries until end-of-file.</p>\n<p><em>Constraints:</em><br />A person's name consists of only lower-case English letters and it may be in the format 'first-name last-name' or in the format 'first-name'. Each phone number has exactly 8 digits without any leading zeros.</p>\n<p>$1 \\leq n \\leq 100000$<br />$1 \\leq$ Query $\\leq 100000$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each case, print \"Not found\" if the person has no entry in the phone book. Otherwise, print the person's name and phone number. See sample output for the exact format.</p>\n<p>To make the problem easier, we provided a portion of the code in the editor. You can either complete that code or write completely on your own.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\nuncle sam\n99912222\ntom\n11122222\nharry\n12299933\nuncle sam\nuncle tom\nharry\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>uncle sam=99912222\nNot found\nharry=12299933</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/bc0491cb-2d7e-4d8a-b3f4-c025787c374e",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-stack",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Stack",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<pre><code>In computer science, a stack or LIFO (last in, first out) is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the last element that was added.(Wikipedia)\n</code></pre>\n<p>A string containing only parentheses is balanced if the following is true: 1. if it is an empty string 2. if A and B are correct, AB is correct, 3. if A is correct, (A) and {A} and [A] are also correct.</p>\n<p>Examples of some correctly balanced strings are: \"{}()\", \"[{()}]\", \"({()})\"</p>\n<p>Examples of some unbalanced strings are: \"{}(\", \"({)}\", \"[[\", \"}{\" etc.</p>\n<p>Given a string, determine if it is balanced or not.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There will be multiple lines in the input file, each having a single non-empty string. You should read input till end-of-file.</p>\n<p>The part of the code that handles input operation is already provided in the editor.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>For each case, print 'true' if the string is balanced, 'false' otherwise.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>{}()\n({()})\n{}(\n[]\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>true\ntrue\nfalse\ntrue</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/4a8c3a69-48e8-44ea-874c-d1c460787c3a",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-hashset",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Hashset",
  "content": "<p>In computer science, a set is an abstract data type that can store certain values, without any particular order, and no repeated values(Wikipedia). $\\{1,2,3\\}$ is an example of a set, but $\\{1,2,2\\}$ is not a set. Today you will learn how to use sets in java by solving this problem.</p>\n<p>You are given $n$ pairs of strings. Two pairs $(a, b)$ and $(c, d)$ are identical if $a=c$ and $b=d$. That also implies $(a, b)$ is not same as $(b, a)$. After taking each pair as input, you need to print number of unique pairs you currently have.<br />Complete the code in the editor to solve this problem.</p>\n<p><strong>Input Format</strong><br />In the first line, there will be an integer $T$ denoting number of pairs. Each of the next $T$ lines will contain two strings seperated by a single space.<br /><strong>Constraints:</strong><br />- $1 \\leq T \\leq 100000$<br />- Length of each string is atmost 5 and will consist lower case letters only.<br /><strong>Output Format</strong><br />Print $T$ lines. In the $i_{t h}$ line, print number of unique pairs you have after taking $i^{t h}$ pair as input.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\njohn tom\njohn mary\njohn tom\nmary anna\nmary anna\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n2\n2\n3\n3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<ul>\n<li>After taking the first input, you have only one pair: (john,tom)</li>\n<li>After taking the second input, you have two pairs: (john, tom) and (john, mary)</li>\n<li>After taking the third input, you still have two unique pairs.</li>\n<li>After taking the fourth input, you have three unique pairs: (john,tom), (john, mary) and (mary, anna)</li>\n<li>After taking the fifth input, you still have three unique pairs.</li>\n</ul>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/2cae51dc-6464-416f-b2cf-3d6de25b15ce",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-generics",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Generics",
  "content": "<p>Generic methods are a very efficient way to handle multiple datatypes using a single method. This problem will test your knowledge on Java Generic methods.</p>\n<p>Let's say you have an integer array and a string array. You have to write a&nbsp;<strong>single</strong>&nbsp;method&nbsp;<em>printArray</em>&nbsp;that can print all the elements of both arrays. The method should be able to accept both integer arrays or string arrays.</p>\n<p>You are given code in the editor. Complete the code so that it prints the following lines:</p>\n<pre><code>1\n2\n3\nHello\nWorld\n</code></pre>\n<p>Do not use method overloading because your answer will not be accepted.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/0f02ae33-4345-4fa2-b2dc-8aea78f37e51",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-comparator",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Comparator",
  "content": "<p>Comparators are used to compare two objects. In this challenge, you'll create a comparator and use it to sort an array.<br />The Player class is provided for you in your editor. It has 2 fields: a name String and a score integer.<br />Given an array of $n$ Player objects, write a comparator that sorts them in order of decreasing score; if 2 or more players have the same score, sort those players alphabetically by name. To do this, you must create a Checker class that implements the Comparator interface, then write an int compare(Player a, Player b) <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">method implementing the </span><a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html#compare%28T,%20T%29\">Comparator.compare(T o1, T o2)</a><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;method.</span></p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\"><strong>Input Format</strong><br />Input from stdin is handled by the locked stub code in the Solution class.<br />The first line contains an integer, $n$, denoting the number of players.<br />Each of the $n$ subsequent lines contains a player's name and score, respectively.<br /><strong>Constraints</strong><br />- $0 \\leq$ score $\\leq 1000$<br />- 2 players can have the same name.<br />- Player names consist of lowercase English letters.</div>\n<div class=\"msB challenge_input_format_title\">\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for printing any output to stdout. The locked stub code in&nbsp;<em>Solution</em>&nbsp;will create a&nbsp;<em>Checker</em>&nbsp;object, use it to sort the&nbsp;<em>Player</em>&nbsp;array, and print each sorted element.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\namy 100\ndavid 100\nheraldo 50\naakansha 75\naleksa 150\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>aleksa 150\namy 100\ndavid 100\naakansha 75\nheraldo 50</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d7faed61-6291-4d42-b7cc-23d46093c1f1",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-sort",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Sort",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a list of student information: ID, FirstName, and CGPA. Your task is to rearrange them according to their CGPA in decreasing order. If two student have the same CGPA, then arrange them according to their first name in alphabetical order. If those two students also have the same first name, then order them according to their ID. No two students have the same ID.</p>\n<p><strong>Hint</strong>: You can use comparators to sort a list of objects. See the&nbsp;<a href=\"http://docs.oracle.com/javase/tutorial/collections/interfaces/order.html\">oracle docs</a>&nbsp;to learn about comparators.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line of input contains an integer $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, representing the total number of students. The next $N$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;lines contains a list of student information in the following structure:</p>\n<pre><code>ID Name CGPA</code></pre>\n<p><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;2 \\leq N \\leq 1000 \\\\<br />&amp;0 \\leq I D \\leq 100000 \\\\<br />&amp;5 \\leq \\mid \\text { Name } \\mid \\leq 30 \\\\<br />&amp;0 \\leq C G P A \\leq 4.00<br />\\end{aligned}<br />$$<br />The name contains only lowercase English letters. The $I D$ contains only integer numbers without leading zeros. The CGPA will contain, at most, 2 digits after the decimal point.</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>After rearranging the students according to the above rules, print the first name of each student on a separate line.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n33 Rumpa 3.68\n85 Ashis 3.85\n56 Samiha 3.75\n19 Samara 3.75\n22 Fahim 3.76\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Ashis\nFahim\nSamara\nSamiha\nRumpa</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/790fb35f-4dbb-4a12-af96-dcc050226fea",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-dequeue",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Dequeue",
  "content": "<p>In computer science, a double-ended queue (dequeue, often abbreviated to deque, pronounced deck) is an abstract data type that generalizes a queue, for which elements can be added to or removed from either the front (head) or back (tail).</p>\n<p>Deque interfaces can be implemented using various types of collections such as&nbsp;<code>LinkedList</code>&nbsp;or&nbsp;<code>ArrayDeque</code>&nbsp;classes. For example, deque can be declared as:</p>\n<pre><code>Deque deque = new LinkedList&lt;&gt;();\nor\nDeque deque = new ArrayDeque&lt;&gt;();\n</code></pre>\n<p>You can find more details about Deque&nbsp;<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Deque.html\">here</a>.</p>\n<p>In this problem, you are given $N$ integers. You need to find the maximum number of unique integers among all the possible contiguous subarrays of size $M$<br />Note: Time limit is 3 second for this problem.<br /><strong>Input Format</strong><br />The first line of input contains two integers $N$ and $M$ : representing the total number of integers and the size of the subarray, respectively. The next line contains $N$ space separated integers.<br /><strong>Constraints</strong><br />$$<br />\\begin{aligned}<br />&amp;1 \\leq N \\leq 100000 \\\\<br />&amp;1 \\leq M \\leq 100000 \\\\<br />&amp;M \\leq N<br />\\end{aligned}<br />$$<br />The numbers in the array will range between $[0,10000000]$.</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Print the&nbsp;<em>maximum</em> number of unique integers among all possible contiguous subarrays of size $M$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>6 3\n5 3 5 2 3 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In the sample testcase, there are 4 subarrays of contiguous numbers.</p>\n<p>$s 1=\\langle 5,3,5\\rangle$ - Has 2 unique numbers.<br />$s 2=\\langle 3,5,2\\rangle-$ Has 3 unique numbers.<br />$s 3=\\langle 5,2,3\\rangle$ - Has 3 unique numbers.<br />$s 4=\\langle 2,3,2\\rangle$ - Has 2 unique numbers.<br />In these subarrays, there are $2,3,3,2$ unique numbers, respectively. The maximum amount of unique numbers among all possible contiguous subarrays is 3 .</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/d167a289-29a8-409d-a206-5b41efb47878",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93b9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-bitset",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java BitSet",
  "content": "<p>Java's&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html\">BitSet</a>&nbsp;class implements a vector of bit values (i.e.: false (0) or true (1)) that grows as needed, allowing us to easily manipulate bits while optimizing space (when compared to other collections). Any element having a bit value of 1 is called a set bit.</p>\n<p>Given 2 BitSets, $B_{1}$ and $B_{2}$, of size $N$ where all bits in both BitSets are initialized to 0 , perform a series of $M$ operations. After each operation, print the number of set bits in the respective BitSets as two space-separated integers on a new line.</p>\n<p><strong>Input Format</strong><br />The first line contains 2 space-separated integers, $N$ (the length of both BitSets $B_{1}$ and $B_{2}$ ) and $M$ (the number of operations to perform), respectively.<br />The $M$ subsequent lines each contain an operation in one of the following forms:<br />- $A N D&lt;$ set $&gt;&lt;$ set $\\rangle$<br />- OR $&lt;$ set $&gt;&lt;$ set $&gt;$<br />- $\\mathrm{XOR}&lt;\\mathrm{set}&gt;&lt;\\mathrm{set}&gt;$<br />- FLIP $&lt;$ set $&gt;&lt;$ index $&gt;$<br />- SET $&lt;$ set $&gt;&lt;$ index $&gt;$<br />In the list above, $&lt;$ set $&gt;$ is the integer 1 or 2, where 1 denotes $B_{1}$ and 2 denotes $B_{2}$.<br />$&lt;$ inde $x&gt;$ is an integer denoting a bit's index in the BitSet corresponding to $&lt;$ set $&gt;$.<br />For the binary operations $A N D, O R$, and $X O R$, operands are read from left to right and the BitSet resulting from the operation replaces the contents of the first operand. For example:</p>\n<pre><code>AND 2 1</code></pre>\n<p>$B_{2}$ is the left operand, and $B_{1}$ is the right operand. This operation should assign the result of $B_{2} \\wedge B_{1}$ to $B_{2}$.<br />Constraints<br />- $1 \\leq N \\leq 1000$<br />- $1 \\leq M \\leq 10000$<br />Output Format<br />After each operation, print the respective number of set bits in BitSet $B_{1}$ and BitSet $B_{2}$ as 2 space-separated integers on a new line.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5 4\nAND 1 2\nSET 1 4\nFLIP 2 2\nOR 2 1\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>0 0\n1 0\n1 1\n1 2\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n<p>Initially: $N=5, M=4, B_{1}=\\{0,0,0,0,0\\}$, and $B_{2}=\\{0,0,0,0,0\\}$. At each step, we print the respective number of set bits in $B_{1}$ and $B_{2}$ as a pair of space-separated integers on a new line.<br />$$<br />\\begin{aligned}<br />&amp;M_{0}=A N D 12 \\\\<br />&amp;B_{1}=B_{1} \\wedge B_{2}=\\{0,0,0,0,0\\} \\wedge\\{0,0,0,0,0\\}=\\{0,0,0,0,0\\} \\\\<br />&amp;B_{1}=\\{0,0,0,0,0\\}, B_{2}=\\{0,0,0,0,0\\}<br />\\end{aligned}<br />$$<br />The number of set bits in $B_{1}$ and $B_{2}$ is 0 .<br />$$<br />M_{1}=S E T 14<br />$$<br />Set $B_{1}[4]$ to true (1).<br />$$<br />B_{1}=\\{0,0,0,0,1\\}, B_{2}=\\{0,0,0,0,0\\}<br />$$<br />The number of set bits in $B_{1}$ is 1 and $B_{2}$ is 0 .<br />$$<br />M_{2}=F L I P 22<br />$$<br />Flip $B_{2}[2]$ from false $(0)$ to true (1).<br />$$<br />B_{1}=\\{0,0,0,0,1\\}, B_{2}=\\{0,0,1,0,0\\}<br />$$<br />The number of set bits in $B_{1}$ is 1 and $B_{2}$ is 1 .</p>\n<p>$$<br />\\begin{aligned}<br />&amp;M_{3}=O R 21 \\\\<br />&amp;B_{2}=B_{2} \\vee B_{1}=\\{0,0,1,0,0\\} \\vee\\{0,0,0,0,1\\}=\\{0,0,1,0,1\\} \\\\<br />&amp;B_{1}=\\{0,0,0,0,1\\}, B_{2}=\\{0,0,1,0,1\\}<br />\\end{aligned}<br />$$<br />The number of set bits in $B_{1}$ is 1 and $B_{2}$ is 2 .</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c25d3359-bfa4-43d5-80f2-abd986484f00",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ba"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "java-priority-queue",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Priority Queue",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>In computer science, a priority queue is an abstract data type which is like a regular queue, but where additionally each element has a \"priority\" associated with it. In a priority queue, an element with high priority is served before an element with low priority. -&nbsp;<a href=\"https://en.wikipedia.org/wiki/Priority_queue\">Wikipedia</a></p>\n<hr />\n<p>In this problem we will test your knowledge on&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html\">Java Priority Queue</a>.</p>\n<p>There are a number of students in a school who wait to be served. Two types of events,&nbsp;<em>ENTER</em>&nbsp;and&nbsp;<em>SERVED</em>, can take place which are described below.</p>\n<ul>\n<li><em>ENTER</em>: A student with some priority enters the queue to be served.</li>\n<li><em>SERVED</em>: The student with the highest priority is served (removed) from the queue.</li>\n</ul>\n<p>A unique id is assigned to each student entering the queue. The queue serves the students based on the following criteria (priority criteria):</p>\n<ol>\n<li>The student having the highest&nbsp;<em>Cumulative Grade Point Average</em>&nbsp;(CGPA) is served first.</li>\n<li>Any students having the&nbsp;<em>same CGPA</em>&nbsp;will be served by name in ascending case-sensitive alphabetical order.</li>\n<li>Any students having the&nbsp;<em>same CGPA and name</em>&nbsp;will be served in ascending order of the id.</li>\n</ol>\n<p>Create the following two classes:</p>\n<ul>\n<li>The&nbsp;<em>Student</em>&nbsp;class should implement:\n<ul>\n<li>The constructor&nbsp;<code>Student(int id, String name, double cgpa)</code>.</li>\n<li>The method&nbsp;<code>int getID()</code>&nbsp;to return the id of the student.</li>\n<li>The method&nbsp;<code>String getName()</code>&nbsp;to return the name of the student.</li>\n<li>The method&nbsp;<code>double getCGPA()</code>&nbsp;to return the CGPA of the student.</li>\n</ul>\n</li>\n<li>The&nbsp;<em>Priorities</em>&nbsp;class should implement the method&nbsp;<code>List&lt;Student&gt; getStudents(List&lt;String&gt; events)</code>&nbsp;to process all the given events and return all the students yet to be served in the priority order.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n<p>&nbsp;</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line contains an integer, $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>, describing the total number of events. Each of the $n$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;subsequent lines will be of the following two forms:</p>\n<ul>\n<li><code>ENTER name CGPA id</code>: The student to be inserted into the priority queue.</li>\n<li><code>SERVED</code>: The highest priority student in the queue was served.</li>\n</ul>\n<p>The locked stub code in the editor reads the input and tests the correctness of the&nbsp;<em>Student</em>&nbsp;and&nbsp;<em>Priorities</em>&nbsp;classes implementation.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n<p>- $2 \\leq n \\leq 1000$<br />- $0 \\leq C G P A \\leq 4.00$<br />- $1 \\leq i d \\leq 10^{5}$<br />- $2 \\leq \\mid$ name $\\mid \\leq 30$</p>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>The locked stub code prints the names of the students yet to be served in the priority order. If there are no such student, then the code prints&nbsp;<code>EMPTY</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">12</span>\n<span class=\"err\">ENTER John 3.75 50</span>\n<span class=\"err\">ENTER Mark 3.8 24</span>\n<span class=\"err\">ENTER Shafaet 3.7 35</span>\n<span class=\"err\">SERVED</span>\n<span class=\"err\">SERVED</span>\n<span class=\"err\">ENTER Samiha 3.85 36</span>\n<span class=\"err\">SERVED</span>\n<span class=\"err\">ENTER Ashley 3.9 42</span>\n<span class=\"err\">ENTER Maria 3.6 46</span>\n<span class=\"err\">ENTER Anik 3.95 49</span>\n<span class=\"err\">ENTER Dan 3.95 50</span>\n<span class=\"err\">SERVED</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Dan</span>\n<span class=\"err\">Ashley</span>\n<span class=\"err\">Shafaet</span>\n<span class=\"err\">Maria</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>In this case, the number of events is 12. Let the name of the queue be&nbsp;<em>Q</em>.</p>\n<ul>\n<li>John is added to&nbsp;<em>Q</em>. So, it contains&nbsp;<em>(John, 3.75, 50)</em>.</li>\n<li>Mark is added to&nbsp;<em>Q</em>. So, it contains&nbsp;<em>(John, 3.75, 50)</em>&nbsp;and&nbsp;<em>(Mark, 3.8, 24)</em>.</li>\n<li>Shafaet is added to&nbsp;<em>Q</em>. So, it contains&nbsp;<em>(John, 3.75, 50), (Mark, 3.8, 24)</em>, and&nbsp;<em>(Shafaet, 3.7, 35)</em>.</li>\n<li>Mark is served as he has the highest CGPA. So,&nbsp;<em>Q</em>&nbsp;contains&nbsp;<em>(John, 3.75, 50)</em>&nbsp;and&nbsp;<em>(Shafaet, 3.7, 35)</em>.</li>\n<li>John is served next as he has the highest CGPA. So,&nbsp;<em>Q</em>&nbsp;contains&nbsp;<em>(Shafaet, 3.7, 35)</em>.</li>\n<li>Samiha is added to&nbsp;<em>Q</em>. So, it contains&nbsp;<em>(Shafaet, 3.7, 35)</em>&nbsp;and&nbsp;<em>(Samiha, 3.85, 36)</em>.</li>\n<li>Samiha is served as she has the highest CGPA. So,&nbsp;<em>Q</em>&nbsp;contains&nbsp;<em>(Shafaet, 3.7, 35)</em>.</li>\n<li>Now, four more students are added to&nbsp;<em>Q</em>. So, it contains&nbsp;<em>(Shafaet, 3.7, 35), (Ashley, 3.9, 42), (Maria, 3.6, 46), (Anik, 3.95, 49)</em>, and&nbsp;<em>(Dan, 3.95, 50)</em>.</li>\n<li>Anik is served because though both Anil and Dan have the highest CGPA but Anik comes first when sorted in alphabetic order. So,&nbsp;<em>Q</em>&nbsp;contains&nbsp;<em>(Dan, 3.95, 50), (Ashley, 3.9, 42), (Shafaet, 3.7, 35)</em>, and&nbsp;<em>(Maria, 3.6, 46)</em>.</li>\n</ul>\n<p>As all events are completed, the name of each of the remaining students is printed on a new line.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f605991b-08ad-4f6b-afe9-a2c60ae13184",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93bb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 5,
  "slug": "java-inheritance-i",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Inheritance I",
  "content": "<p>Using&nbsp;<em>inheritance</em>, one class can acquire the properties of others. Consider the following&nbsp;<em>Animal</em>&nbsp;class:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">class</span> <span class=\"nc\">Animal</span><span class=\"o\">{</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">walk</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I am walking\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>This class has only one method,&nbsp;<em>walk</em>. Next, we want to create a&nbsp;<em>Bird</em>&nbsp;class that also has a&nbsp;<em>fly</em>&nbsp;method. We do this using&nbsp;<em>extends</em>&nbsp;keyword:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">class</span> <span class=\"nc\">Bird</span> <span class=\"kd\">extends</span> <span class=\"n\">Animal</span> <span class=\"o\">{</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">fly</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I am flying\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>Finally, we can create a Bird object that can both&nbsp;<em>fly</em>&nbsp;and&nbsp;<em>walk</em>.</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main </span><span class=\"o\">{</span>\n   <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\n      <span class=\"n\">Bird</span> <span class=\"n\">bird</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bird</span><span class=\"o\">();</span>\n      <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"na\">walk</span><span class=\"o\">();</span>\n      <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"na\">fly</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>The above code will print:</p>\n<pre><code>I am walking\nI am flying\n</code></pre>\n<p>This means that a Bird object has all the properties that an Animal object has, as well as some additional unique properties.</p>\n<p>The code above is provided for you in your editor. You must add a&nbsp;<em>sing</em>&nbsp;method to the&nbsp;<em>Bird</em>&nbsp;class, then modify the&nbsp;<em>main</em>&nbsp;method accordingly so that the code prints the following lines:</p>\n<pre><code>I am walking\nI am flying\nI am singing</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c302f7d3-e631-4e47-b300-4705f5665cd0",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93bc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-inheritance-ii",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Inheritance II",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Write the following code in your editor below:</p>\n<ol>\n<li>A class named&nbsp;<em>Arithmetic</em>&nbsp;with a method named&nbsp;<em>add</em> that takes $2$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;integers as parameters and returns an integer denoting their sum.</li>\n<li>A class named&nbsp;<em>Adder</em>&nbsp;that inherits from a superclass named&nbsp;<em>Arithmetic</em>.</li>\n</ol>\n<p>Your classes should not be be $public$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for reading any input from stdin; a locked code stub will test your submission by calling the&nbsp;<em>add</em>&nbsp;method on an&nbsp;<em>Adder</em> object and passing it $2$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;integer parameters.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>You are not responsible for printing anything to stdout. Your&nbsp;<em>add</em>&nbsp;method must return the sum of its parameters.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<p>The&nbsp;<em>main</em>&nbsp;method in the&nbsp;<em>Solution</em>&nbsp;class above should print the following:</p>\n<pre><code>My superclass is: Arithmetic\n42 13 20</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/5a872422-5416-486e-86e3-82efb0359e2c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93bd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-abstract-class",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Abstract Class",
  "content": "<p>A Java abstract class is a class that can't be instantiated. That means you cannot create new instances of an abstract class. It works as a base for subclasses. You should learn about Java Inheritance before attempting this challenge.</p>\n<p>Following is an example of abstract class:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">Book</span><span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">title</span><span class=\"o\">;</span>\n    <span class=\"kd\">abstract</span> <span class=\"kt\">void</span> <span class=\"nf\">setTitle</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">);</span>\n    <span class=\"n\">String</span> <span class=\"nf\">getTitle</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">title</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>If you try to create an instance of this class like the following line you will get an error:</p>\n<div class=\"highlight\">\n<pre><span class=\"n\">Book</span> <span class=\"n\">new_novel</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Book</span><span class=\"o\">();</span> \n</pre>\n</div>\n<p>You have to create another class that extends the abstract class. Then you can create an instance of the new class.</p>\n<p>Notice that&nbsp;<em>setTitle</em>&nbsp;method is abstract too and has no body. That means you must implement the body of that method in the child class.</p>\n<p>In the editor, we have provided the abstract&nbsp;<em>Book</em>&nbsp;class and a&nbsp;<em>Main</em>&nbsp;class. In the Main class, we created an instance of a class called&nbsp;<em>MyBook</em>. Your task is to write just the&nbsp;<em>MyBook</em>&nbsp;class.</p>\n<p>Your class mustn't be public.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>A tale of two cities\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>The title is: A tale of two cities</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/1b1ca274-fd87-4323-93f7-ed264970a155",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93be"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-interface",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Interface",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>A Java interface can only contain method signatures and fields. The interface can be used to achieve polymorphism. In this problem, you will practice your knowledge on interfaces.</p>\n<p>You are given an interface&nbsp;<em>AdvancedArithmetic</em>&nbsp;which contains a method signature&nbsp;<em>int divisor_sum(int n)</em>. You need to write a class called MyCalculator which implements the interface.</p>\n<p><em>divisorSum</em>&nbsp;function just takes an integer as input and return the sum of all its divisors. For example divisors of 6 are 1, 2, 3 and 6, so&nbsp;<em>divisor_sum</em>&nbsp;should return 12. The value of n will be at most 1000.</p>\n<p>Read the partially completed code in the editor and complete it. You just need to write the MyCalculator class only.&nbsp;<em>Your class shouldn't be public.</em></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>6\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>I implemented: AdvancedArithmetic\n12\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>Divisors of 6 are 1,2,3 and 6. 1+2+3+6=12.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/8310b3d4-537f-4e4f-9ebf-77042e623ec9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93bf"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-method-overriding",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Method Overriding",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>When a subclass inherits from a superclass, it also inherits its methods; however, it can also&nbsp;<em>override</em>&nbsp;the superclass methods (as well as declare and implement new ones). Consider the following&nbsp;<em>Sports</em>&nbsp;class:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">class</span> <span class=\"nc\">Sports</span><span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Generic Sports\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">getNumberOfTeamMembers</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span> <span class=\"s\">\"Each team has n players in \"</span> <span class=\"o\">+</span> <span class=\"n\">getName</span><span class=\"o\">()</span> <span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>Next, we create a&nbsp;<em>Soccer</em>&nbsp;class that inherits from the&nbsp;<em>Sports</em>&nbsp;class. We can override the&nbsp;<em>getName</em>&nbsp;method and return a different, subclass-specific string:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">class</span> <span class=\"nc\">Soccer</span> <span class=\"kd\">extends</span> <span class=\"n\">Sports</span><span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Soccer Class\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p><strong>Note:</strong>&nbsp;When overriding a method, you should precede it with the&nbsp;<code>@Override</code>&nbsp;annotation. The parameter(s) and return type of an overridden method must be exactly the same as those of the method inherited from the supertype.</p>\n<hr />\n<p><strong>Task</strong><br />Complete the code in your editor by writing an overridden&nbsp;<em>getNumberOfTeamMembers</em>&nbsp;method that prints the same statement as the superclass'&nbsp;<em>getNumberOfTeamMembers</em> method, except that it replaces $n$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> with 11<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>&nbsp;(the number of players on a Soccer team).</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>When executed, your completed code should print the following:</p>\n<pre><code>Generic Sports\nEach team has n players in Generic Sports\nSoccer Class\nEach team has 11 players in Soccer Class</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/07e3b82b-b6b8-4931-ba2d-e66df77f351b",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Java Method Overriding.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c0"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-method-overriding-2-super-keyword",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Method Overriding 2 (Super Keyword)",
  "content": "<p>When a method in a subclass overrides a method in superclass, it is still possible to call the overridden method using&nbsp;<strong>super</strong>&nbsp;keyword. If you write&nbsp;<em>super.func()</em>&nbsp;to call the function&nbsp;<em>func()</em>, it will call the method that was defined in the superclass.</p>\n<p>You are given a partially completed code in the editor. Modify the code so that the code prints the following text:</p>\n<pre><code>Hello I am a motorcycle, I am a cycle with an engine.\nMy ancestor is a cycle who is a vehicle with pedals.</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/566ed415-25d7-4801-9ecb-bb989e970268",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c1"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-iterator",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Iterator",
  "content": "<p>Java Iterator class can help you to iterate through every element in a collection. Here is a simple example:</p>\n<div class=\"highlight\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">java.util.*</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Example</span><span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"o\">[]</span><span class=\"n\">args</span><span class=\"o\">){</span>\n        <span class=\"n\">ArrayList</span> <span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">();</span>\n        <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"Hello\"</span><span class=\"o\">);</span>\n        <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"Java\"</span><span class=\"o\">);</span>\n        <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"4\"</span><span class=\"o\">);</span>\n        <span class=\"n\">Iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"na\">iterator</span><span class=\"o\">();</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">()){</span>\n            <span class=\"n\">Object</span> <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">((</span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"n\">element</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>In this problem you need to complete a method&nbsp;<em>func</em>. The method takes an&nbsp;<em>ArrayList</em>&nbsp;as input. In that&nbsp;<em>ArrayList</em>&nbsp;there is one or more integer numbers, then there is a special string \"###\", after that there are one or more other strings. A sample&nbsp;<em>ArrayList</em>&nbsp;may look like this:</p>\n<pre><code>element[0]=&gt;42\nelement[1]=&gt;10\nelement[2]=&gt;\"###\"\nelement[3]=&gt;\"Hello\"\nelement[4]=&gt;\"Java\"\n</code></pre>\n<p>You have to modify the&nbsp;<em>func</em>&nbsp;method by editing&nbsp;<code>at most 2 lines</code>&nbsp;so that the code only prints the elements after the special string \"###\". For the sample above the output will be:</p>\n<pre><code>Hello\nJava\n</code></pre>\n<p><em>Note:</em>&nbsp;The stdin doesn't contain the string&nbsp;<em>\"###\"</em>, it is added in the&nbsp;<em>main</em>&nbsp;method.</p>\n<p>To restore the original code in the editor, click the top left icon on the editor and create a new buffer.</p>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/b748405d-e013-46d6-9346-48abd72b0792",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c2"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 10,
  "slug": "java-exception-handling-try-catch",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Exception Handling (Try-catch)",
  "content": "<p>Exception handling is the process of responding to the occurrence, during computation, of exceptions &ndash; anomalous or exceptional conditions requiring special processing &ndash; often changing the normal flow of program execution. (Wikipedia)</p>\n<hr />\n<p>Java has built-in mechanism to handle exceptions. Using the&nbsp;<em>try</em>&nbsp;statement we can test a block of code for errors. The&nbsp;<em>catch</em>&nbsp;block contains the code that says what to do if exception occurs.</p>\n<p>This problem will test your knowledge on try-catch block.</p>\n<p>You will be given two integers $x$ and $y$ as input, you have to compute $x / y$. If $x$ and $y$ are not 32 bit signed integers or if $y$ is zero, exception will occur and you have to report it. Read sample Input/Output to know what to report in case of exceptions.</p>\n<p><strong>Sample Input 0:</strong></p>\n<pre><code>10\n3\n</code></pre>\n<p><strong>Sample Output 0:</strong></p>\n<pre><code>3\n</code></pre>\n<p><strong>Sample Input 1:</strong></p>\n<pre><code>10\nHello\n</code></pre>\n<p><strong>Sample Output 1:</strong></p>\n<pre><code>java.util.InputMismatchException\n</code></pre>\n<p><strong>Sample Input 2:</strong></p>\n<pre><code>10\n0\n</code></pre>\n<p><strong>Sample Output 2:</strong></p>\n<pre><code>java.lang.ArithmeticException: / by zero\n</code></pre>\n<p><strong>Sample Input 3:</strong></p>\n<pre><code>23.323\n0\n</code></pre>\n<p><strong>Sample Output 3:</strong></p>\n<pre><code>java.util.InputMismatchException</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/6275f749-c15b-4cb5-b53a-193a00ab1c42",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c3"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-exception-handling",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Exception Handling",
  "content": "<p>You are required to compute the power of a number by implementing a calculator. Create a class MyCalculator which consists of a single method long power (int, int). This method takes two integers, $n$ and $p$, as parameters and finds $n^{p}$. If either $n$ or $p$ is negative, then the method must throw an exception which says \"<strong>n or $p$ should not be negative</strong>\". Also, if both $n$ and $p$ are zero, then the method must throw an exception which says \"<strong>$n$ and $p$ should not be zero.</strong>\"<br />For example, $-4$ and $-5$ would result in <strong>java.lang.Exception: $n$ or $p$ should not be negative</strong>.<br />Complete the function power in class MyCalculator and return the appropriate result after the power operation or an appropriate exception as detailed above.<br /><strong>Input Format</strong><br />Each line of the input contains two integers, $n$ and $p$. The locked stub code in the editor reads the input and sends the values to the method as parameters.<br /><strong>Constraints</strong><br />- $-10 \\leq n \\leq 10$<br />- $-10 \\leq p \\leq 10$</p>\n<p><strong>Output Format</strong><br />Each line of the output contains the result $n^{p}$, if both $n$ and $p$ are positive. If either $n$ or $p$ is negative, the output contains \" $n$ and $p$ should be non-negative\". If both $n$ and $p$ are zero, the output contains \"n and p should not be zero.\". This is printed by the locked stub code in the editor.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">3 5</span>\n<span class=\"err\">2 4</span>\n<span class=\"err\">0 0</span>\n<span class=\"err\">-1 -2</span>\n<span class=\"err\">-1 3</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">243</span>\n<span class=\"err\">16</span>\n<span class=\"err\">java.lang.Exception: n and p should not be zero.</span>\n<span class=\"err\">java.lang.Exception: n or p should not be negative.</span>\n<span class=\"err\">java.lang.Exception: n or p should not be negative.</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n<p>- In the first two cases, both $n$ and $p$ are postive. So, the power function returns the answer correctly.<br />- In the third case, both $n$ and $\\boldsymbol{p}$ are zero. So, the exception, \"n and p should not be zero.\", is printed.<br />- In the last two cases, at least one out of $n$ and $p$ is negative. So, the exception, \"n or p should not be negative.\", is printed for these two cases.</p>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/c438ccfd-a284-4a91-8cde-9233f8239f13",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c4"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-varargs-simple-addition-1",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Varargs - Simple Addition",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a class&nbsp;<em>Solution</em>&nbsp;and its&nbsp;<em>main</em>&nbsp;method in the editor.<br />Your task is to create the class&nbsp;<em>Add</em>&nbsp;and the required methods so that the code prints the&nbsp;<em>sum of the numbers</em>&nbsp;passed to the function&nbsp;<em>add</em>.</p>\n<p><strong>Note:</strong>&nbsp;Your&nbsp;<em>add</em>&nbsp;method in the&nbsp;<em>Add</em>&nbsp;class must print the&nbsp;<em>sum</em>&nbsp;as given in the&nbsp;<em>Sample Output</em></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There are six lines of input, each containing an integer.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>There will be only four lines of output. Each line contains the sum of the&nbsp;<em>integers</em>&nbsp;passed as the parameters to&nbsp;<em>add</em>&nbsp;in the&nbsp;<em>main</em>&nbsp;method.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>1\n2\n3\n4\n5\n6\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>1+2=3\n1+2+3=6\n1+2+3+4+5=15\n1+2+3+4+5+6=21</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/66561c64-507e-476e-a977-b62df0e06d80",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c5"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "can-you-access",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Can You Access?",
  "content": "<p>You are given a class Solution and an inner class Inner.Private. The main method of class Solution takes an integer num as input. The powerof2 in class Inner.Private checks whether a number is a power of 2 . You have to call the method powerof2 of the class Inner.Private from the main method of the class Solution.<br /><strong>Constraints</strong><br />$$<br />1 \\leq n u m \\leq 2^{30}<br />$$</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>8\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>8 is power of 2\nAn instance of class: Solution.Inner.Private has been created</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/f62b6c78-5f04-4d4b-a5d6-16ba8e0ded7d",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c6"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "prime-checker",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Prime Checker",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>You are given a class&nbsp;<em>Solution</em>&nbsp;and its&nbsp;<em>main</em>&nbsp;method in the editor. Your task is to create a class&nbsp;<em>Prime</em>. The class&nbsp;<em>Prime</em>&nbsp;should contain a single method&nbsp;<em>checkPrime</em>.</p>\n<p>The locked code in the editor will call the&nbsp;<em>checkPrime</em>&nbsp;method with one or more integer arguments. You should write the&nbsp;<em>checkPrime</em>&nbsp;method in such a way that the code prints only the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Prime_number\">prime numbers</a>.</p>\n<p>Please read the code given in the editor carefully. Also please do not use method overloading!</p>\n<p><strong>Note:</strong>&nbsp;You may get a compile time error in this problem due to the statement below:</p>\n<pre><code>  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n</code></pre>\n<p>This was added intentionally, and you have to figure out a way to get rid of the error.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>There are only five lines of input, each containing one integer.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>There will be only four lines of output. Each line contains only prime numbers depending upon the parameters passed to&nbsp;<em>checkPrime</em>&nbsp;in the&nbsp;<em>main</em>&nbsp;method of the class&nbsp;<em>Solution</em>. In case there is no prime number, then a blank line should be printed.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>2\n1\n3\n4\n5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>2 \n2 \n2 3 \n2 3 5 </code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/e35ddd48-c85c-4f4e-abee-4fb38498cdef",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c7"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 15,
  "slug": "java-factory-pattern",
  "tags": [],
  "level": "BEGINNER",
  "title": "Java Factory Pattern",
  "content": "<p>According to Wikipedia, a factory is simply an object that returns another object from some other method call, which is assumed to be \"new\".</p>\n<p>In this problem, you are given an interface&nbsp;<em>Food</em>. There are two classes&nbsp;<em>Pizza</em>&nbsp;and&nbsp;<em>Cake</em>&nbsp;which implement the&nbsp;<em>Food</em>&nbsp;interface, and they both contain a method&nbsp;<em>getType</em>().</p>\n<p>The main function in the&nbsp;<em>Main</em>&nbsp;class creates an instance of the&nbsp;<em>FoodFactory</em>&nbsp;class. The&nbsp;<em>FoodFactory</em>&nbsp;class contains a method&nbsp;<em>getFood(String)</em>&nbsp;that returns a new instance of&nbsp;<em>Pizza</em>&nbsp;or&nbsp;<em>Cake</em>&nbsp;according to its parameter.</p>\n<p>You are given the partially completed code in the editor. Please complete the&nbsp;<em>FoodFactory</em>&nbsp;class.</p>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>cake\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>The factory returned class Cake\nSomeone ordered a Dessert!\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>pizza\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>The factory returned class Pizza\nSomeone ordered Fast Food!</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3933a879-5b06-4c94-8adc-c03e588343c6",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c8"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 40,
  "slug": "java-visitor-pattern-2",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Visitor Pattern",
  "content": "<p><strong>Note:</strong>&nbsp;In this problem you&nbsp;<strong>must NOT</strong>&nbsp;generate any output on your own. Any such solution will be considered as being against the rules and its author will be disqualified. The output of your solution must be generated by the uneditable code provided for you in the solution template.</p>\n<p>An important concept in Object-Oriented Programming is the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\">open/closed principle</a>, which means writing code that is open to&nbsp;<em>extension</em>&nbsp;but closed to&nbsp;<em>modification</em>. In other words, new functionality should be added by writing an extension for the existing code rather than modifying it and potentially breaking other code that uses it. This challenge simulates a real-life problem where the open/closed principle can and should be applied.</p>\n<p>A&nbsp;<em>Tree</em>&nbsp;class implementing a rooted tree is provided in the editor. It has the following publicly available methods:</p>\n<ul>\n<li><code>getValue()</code>: Returns the&nbsp;<em>value</em>&nbsp;stored in the node.</li>\n<li><code>getColor()</code>: Returns the&nbsp;<em>color</em>&nbsp;of the node.</li>\n<li><code>getDepth()</code>: Returns the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Tree_%28data_structure%29#Terminologies_used_in_Trees\">depth</a> of the node. Recall that the depth of a node is the number of edges between the node and the tree's root, so the tree's root has depth $0$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span> and each descendant node's depth is equal to the depth of its parent node $+1$<span id=\"MathJax-Element-2-Frame\" class=\"MathJax_SVG\"></span>.</li>\n</ul>\n<p>In this challenge, we treat the internal implementation of the tree as being closed to modification, so we cannot directly modify it; however, as with real-world situations, the implementation is written in such a way that it allows external classes to extend and build upon its functionality. More specifically, it allows objects of the&nbsp;<em>TreeVis</em>&nbsp;class (a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor Design Pattern</a>) to visit the tree and traverse the tree structure via the&nbsp;<code>accept</code>&nbsp;method.</p>\n<p>There are two parts to this challenge.</p>\n<h3>Part I: Implement Three Different Visitors</h3>\n<p>Each class has three methods you must write implementations for:</p>\n<p>1. getResult ( ): Return an integer denoting the result, which is different for each class:<br />- The SumInLeavesVisitor implementation must return the sum of the values in the tree's leaves only.<br />- The ProductRedNodesVisitor implementation must return the product of values stored in all red nodes, including leaves, computed modulo $10^{9}+7$. Note that the product of zero values is equal to 1 .<br />- The FancyVisitor implementation must return the absolute difference between the sum of values stored in the tree's nonleaf nodes at even depth and the sum of values stored in the tree's green leaf nodes. Recall that zero is an even number.<br />2. visitNode (TreeNode node): Implement the logic responsible for visiting the tree's non-leaf nodes such that the getResult method returns the correct result for the implementing class' visitor.<br />3. visitLeaf(TreeLeaf leaf): Implement the logic responsible for visiting the tree's leaf nodes such that the getResult method returns the correct result for the implementing class' visitor.</p>\n<p><strong>Part II: Read and Build the Tree</strong><br />Read the $n$-node tree, where each node is numbered from 1 to $n$. The tree is given as a list of node values $\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)$, a list of node colors $\\left(c_{1}, c_{2}, \\ldots, c_{n}\\right)$, and a list of edges. Construct this tree as an instance of the Tree class. The tree is always rooted at node number 1 .<br />Your implementations of the three visitor classes will be tested on the tree you built from the given input.<br /><strong>Input Format</strong><br />The first line contains a single integer, $n$, denoting the number of nodes in the tree. The second line contains $n$ spaceseparated integers describing the respective values of $x_{1}, x_{2}, \\ldots, x_{n}$<br />The third line contains $n$ space-separated binary integers describing the respective values of $c_{1}, c_{2}, \\ldots, c_{n}$. Each $c_{i}$ denotes the color of the $i^{t h}$ node, where 0 denotes red and 1 denotes green.</p>\n<p>Each of the $n-1$ subsequent lines contains two space-separated integers, $u_{i}$ and $v_{i}$, describing an edge between nodes $u_{i}$ and $v_{i}$</p>\n<p><strong>Constraints</strong><br />- $2 \\leq n \\leq 10^{5}$<br />- $1 \\leq x_{i} \\leq 10^{3}$<br />- $c_{i} \\in\\{0,1\\}$<br />- $1 \\leq v_{i}, u_{i} \\leq n$<br />- It is guaranteed that the tree is rooted at node 1 .<br /><strong>Output Format</strong><br />Do not print anything to stdout, as this is handled by locked stub code in the editor. The three getResult ( ) methods provided for you must return an integer denoting the result for that class' visitor (defined above). Note that the value returned by ProductRedNodesVisitor's getResult method must be computed modulo $10^{9}+7$.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n4 7 2 5 12\n0 1 0 0 1\n1 2\n1 3\n3 4\n3 5\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>24\n40\n15\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-challenge-images/0/1478020575-c0b77f00ab-flexible-tree-visitor-pattern.png\" alt=\"image\" /></p>\n<p>Locked stub code in the editor tests your three class implementations as follows:</p>\n<p>1. Creates a SumInLeavesVisitor object whose getResult method returns the sum of the leaves in the tree, which is $7+5+12=24$. The locked stub code prints the returned value on a new line.<br />2. Creates a ProductOfRedNodesVisitor object whose getResult method returns the product of the red nodes, which is $4 \\cdot 2 \\cdot 5=40$. The locked stub code prints the returned value on a new line.<br />3. Creates a FancyVisitor object whose getResult method returns the absolute difference between the sum of the values of non-leaf nodes at even depth and the sum of the values of green leaf nodes, which is $|4-(7+12)|=15$. The locked stub code prints the returned value on a new line.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/45306bae-e908-4054-a75b-978535b402eb",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93c9"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 25,
  "slug": "java-annotations",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Annotations",
  "content": "<p>Java annotation can be used to define the metadata of a Java class or class element. We can use Java annotation at the compile time to instruct the compiler about the build process. Annotation is also used at runtime to get insight into the properties of class elements.</p>\n<p>Java annotation can be added to an element in the following way:</p>\n<div class=\"highlight\">\n<pre><span class=\"nd\">@Entity</span>\n<span class=\"n\">Class</span> <span class=\"n\">DemoClass</span><span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>We can also set a value to the annotation member. For example:</p>\n<div class=\"highlight\">\n<pre><span class=\"nd\">@Entity</span><span class=\"o\">(</span><span class=\"n\">EntityName</span><span class=\"o\">=</span><span class=\"s\">\"DemoClass\"</span><span class=\"o\">)</span>\n<span class=\"n\">Class</span> <span class=\"n\">DemoClass</span><span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n</pre>\n</div>\n<p>In Java, there are several built-in annotations. You can also define your own annotations in the following way:</p>\n<div class=\"highlight\">\n<pre><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@interface</span> <span class=\"n\">FamilyBudget</span> <span class=\"o\">{</span>\n   <span class=\"n\">String</span> <span class=\"nf\">userRole</span><span class=\"o\">()</span> <span class=\"k\">default</span> <span class=\"s\">\"GUEST\"</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></pre>\n</div>\n<p>Here, we define an annotation FamilyBudget, where userRole is the only member in that custom annotation. The userRole takes only String type values, and the default is \"GUEST\". If we do not define the value for this annotation member, then it takes the default. By using @Target, we can specify where our annotation can be used. For example, the FamilyBudget annotation can only be used with the method in a class. @Retention defines whether the annotation is available at runtime. To learn more about Java annotation, you can read the&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/\">tutorial</a>&nbsp;and&nbsp;<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html\">oracle docs</a>.</p>\n<p>Take a look at the following code segment:</p>\n<div class=\"highlight\">\n<pre><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@interface</span> <span class=\"n\">FamilyBudget</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">userRole</span><span class=\"o\">()</span> <span class=\"k\">default</span> <span class=\"s\">\"GUEST\"</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">FamilyMember</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">seniorMember</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">budget</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">moneySpend</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Senior Member\"</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Spend: \"</span> <span class=\"o\">+</span> <span class=\"n\">moneySpend</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Budget Left: \"</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">budget</span> <span class=\"o\">-</span> <span class=\"n\">moneySpend</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">juniorUser</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">budget</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">moneySpend</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Junior Member\"</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Spend: \"</span> <span class=\"o\">+</span> <span class=\"n\">moneySpend</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Budget Left: \"</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">budget</span> <span class=\"o\">-</span> <span class=\"n\">moneySpend</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Scanner</span> <span class=\"n\">in</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Scanner</span><span class=\"o\">(</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">testCases</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">nextLine</span><span class=\"o\">());</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">testCases</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span> <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">spend</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">nextInt</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n                <span class=\"n\">Class</span> <span class=\"n\">annotatedClass</span> <span class=\"o\">=</span> <span class=\"n\">FamilyMember</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">;</span>\n                <span class=\"n\">Method</span><span class=\"o\">[]</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"n\">annotatedClass</span><span class=\"o\">.</span><span class=\"na\">getMethods</span><span class=\"o\">();</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Method</span> <span class=\"n\">method</span> <span class=\"o\">:</span> <span class=\"n\">methods</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">isAnnotationPresent</span><span class=\"o\">(</span><span class=\"n\">FamilyBudget</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                        <span class=\"n\">FamilyBudget</span> <span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">method</span>\n                                <span class=\"o\">.</span><span class=\"na\">getAnnotation</span><span class=\"o\">(</span><span class=\"n\">FamilyBudget</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n                        <span class=\"n\">String</span> <span class=\"n\">userRole</span> <span class=\"o\">=</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"na\">userRole</span><span class=\"o\">();</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">budgetLimit</span> <span class=\"o\">=</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"na\">budgetLimit</span><span class=\"o\">();</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">userRole</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">role</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">spend</span><span class=\"o\">&lt;=</span><span class=\"n\">budgetLimit</span><span class=\"o\">){</span>\n                                <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">invoke</span><span class=\"o\">(</span><span class=\"n\">FamilyMember</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">newInstance</span><span class=\"o\">(),</span>\n                                        <span class=\"n\">budgetLimit</span><span class=\"o\">,</span> <span class=\"n\">spend</span><span class=\"o\">);</span>\n                            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n                                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Budget Limit Over\"</span><span class=\"o\">);</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">testCases</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></pre>\n</div>\n<p>Here, we partially define an annotation, FamilyBudget and a class, FamilyMember. In this problem, we give the user role and the amount of money that a user spends as inputs. Based on the user role, you have to call the appropriate method in the FamilyMember class. If the amount of money spent is over the budget limit for that user role, it prints Budget Limit Over. Your task is to complete the FamilyBudget annotation and the FamilyMember class so that the Solution class works perfectly with the defined constraints.<br /><strong>Note</strong>: You must complete the 5 incomplete lines in the editor. You are not allowed to change, delete or modify any other lines. To restore the original code, click on the top-left button on the editor and create a new buffer.</p>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The first line of input contains an integer $N$<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>&nbsp;representing the total number of test cases. Each test case contains a string and an integer separated by a space on a single line in the following format:</p>\n<pre><code>UserRole MoneySpend\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><strong>Constraints</strong></p>\n</div>\n<div class=\"msB challenge_constraints_body\">\n<div class=\"hackdown-content\">$$<br />\\begin{aligned}<br />&amp;2 \\leq N \\leq 10 \\\\<br />&amp;0 \\leq \\text { Money } S p e n d \\leq 200 \\\\<br />&amp;\\mid \\text { UserRole } \\mid=6<br />\\end{aligned}<br />$$<br />Name contains only lowercase English letters.</div>\n<div class=\"hackdown-content\">\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Based on the user role and budget outputs, output the contents of the certain method. If the amount of money spent is over the budget limit, then output&nbsp;<code>Budget Limit Over</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>3\nSENIOR 75\nJUNIOR 45\nSENIOR 40\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>Senior Member\nSpend: 75\nBudget Left: 25\nJunior Member\nSpend: 45\nBudget Left: 5\nSenior Member\nSpend: 40\nBudget Left: 60</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/00e4f5d7-e593-4517-b97a-facf3e33058c",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93ca"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 20,
  "slug": "covariant-return-types",
  "tags": [],
  "level": "BEGINNER",
  "title": "Covariant Return Types",
  "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p>Java allows for&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/returnvalue.html\">Covariant Return Types</a>, which means you can vary your return type as long you are returning a subclass of your specified return type.</p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/override.html\">Method Overriding</a>&nbsp;allows a subclass to&nbsp;<em>override</em>&nbsp;the behavior of an existing superclass method and specify a return type that is some subclass of the original return type. It is best practice to use the&nbsp;<code>@Override</code>&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/basics.html\">annotation</a>&nbsp;when overriding a superclass method.</p>\n<p>Implement the classes and methods detailed in the diagram below:</p>\n<p><img title=\"\" src=\"https://s3.amazonaws.com/hr-assets/0/1523891844-c66f1555af-class.png\" alt=\"image\" /></p>\n<p>You will be given a partially completed code in the editor where the&nbsp;<em>main</em>&nbsp;method takes the name of a state (i.e.,&nbsp;<code>WestBengal</code>, or&nbsp;<code>AndhraPradesh</code>) and prints the national flower of that state using the classes and methods written by you.</p>\n<p><strong>Note:</strong>&nbsp;<em>Do not</em>&nbsp;use access modifiers in your class declarations.</p>\n<p><strong>Resources</strong><br /><a href=\"http://c2.com/cgi/wiki?CovariantReturnTypes\">Covariant Return Type</a><br /><a href=\"https://blogs.oracle.com/sundararajan/entry/covariant_return_types_in_java\">Java Covariant Type</a></p>\n</div>\n</div>\n</div>\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<p><strong>Input Format</strong></p>\n</div>\n<div class=\"msB challenge_input_format_body\">\n<div class=\"hackdown-content\">\n<p>The locked code reads a single string denoting the name of a subclass of&nbsp;<em>State</em>&nbsp;(i.e.,&nbsp;<code>WestBengal</code>,&nbsp;<code>Karnataka</code>, or&nbsp;<code>AndhraPradesh</code>), then tests the methods associated with that subclass. You are not responsible for reading any input from stdin.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_output_format\">\n<div class=\"msB challenge_output_format_title\">\n<p><strong>Output Format</strong></p>\n</div>\n<div class=\"msB challenge_output_format_body\">\n<div class=\"hackdown-content\">\n<p>Output is handled for you by the locked code, which creates the object corresponding to the input string's class name and then prints the name returned by that class' national flower's&nbsp;<em>whatsYourName</em>&nbsp;method. You are not responsible for printing anything to stdout.</p>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_title\">\n<p><strong>Sample Input 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">AndhraPradesh</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output 0</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<div class=\"highlight\">\n<pre><span class=\"err\">Lily</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"challenge_explanation\">\n<div class=\"msB challenge_explanation_title\">\n<p><strong>Explanation 0</strong></p>\n</div>\n<div class=\"msB challenge_explanation_body\">\n<div class=\"hackdown-content\">\n<p>An&nbsp;<em>AndhraPradesh</em>&nbsp;object's&nbsp;<em>yourNationalFlower</em>&nbsp;method returns an instance of the&nbsp;<em>Lily</em>&nbsp;class, and the&nbsp;<em>Lily</em>&nbsp;class'&nbsp;<em>whatsYourName</em>&nbsp;method returns&nbsp;<code>Lily</code>, which is printed by the hidden code checker.</p>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/2a8682db-2ed8-4e5a-bb15-565b4b9962d9",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93cb"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "java-lambda-expressions",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java Lambda Expressions",
  "content": "<p>This Java 8 challenge tests your knowledge of&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Lambda expressions</a>!</p>\n<p>Write the following methods that&nbsp;<em>return a lambda expression</em>&nbsp;performing a specified action:</p>\n<p>1. PerformOperation isOdd(): The lambda expression must return true if a number is odd or false if it is even.<br />2. PerformOperation isPrime(): The lambda expression must return true if a number is prime or false if it is composite.<br />3. PerformOperation isPalindrome(): The lambda expression must return true if a number is a palindrome or false if it is not.<br /><strong>Input Format</strong><br />Input is handled for you by the locked stub code in your editor.<br /><strong>Output Format</strong><br />The locked stub code in your editor will print $T$ lines of output.<br /><strong>Sample Input</strong><br />The first line contains an integer, $T$ (the number of test cases).<br />The $T$ subsequent lines each describe a test case in the form of 2 space-separated integers:<br />The first integer specifies the condition to check for ( 1 for Odd/Even, 2 for Prime, or 3 for Palindrome). The second integer denotes the number to be checked.</p>\n<div class=\"challenge_sample_input\">\n<div class=\"msB challenge_sample_input_body\">\n<div class=\"hackdown-content\">\n<pre><code>5\n1 4\n2 5\n3 898\n1 3\n2 12\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"challenge_sample_output\">\n<div class=\"msB challenge_sample_output_title\">\n<p><strong>Sample Output</strong></p>\n</div>\n<div class=\"msB challenge_sample_output_body\">\n<div class=\"hackdown-content\">\n<pre><code>EVEN\nPRIME\nPALINDROME\nODD\nCOMPOSITE</code></pre>\n</div>\n</div>\n</div>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/92c76573-9c5f-471e-b14b-3f40dbd75bbf",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93cc"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "java-md5",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java MD5",
  "content": "<p><em>MD5</em>&nbsp;(<em>Message-Digest algorithm 5</em>) is a widely-used cryptographic hash function with a 128<span id=\"MathJax-Element-1-Frame\" class=\"MathJax_SVG\"></span>-bit hash value. Here are some common uses for&nbsp;<em>MD5</em>:</p>\n<ul>\n<li>To store a one-way hash of a password.</li>\n<li>To provide some assurance that a transferred file has arrived intact.</li>\n</ul>\n<p>MD5 is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT (Rivest, 1994); however, the security of MD5 has been severely compromised, most infamously by the Flame malware in 2012 . The CMU Software Engineering Institute essentially considers MD5 to be \"cryptographically broken and unsuitable for further use\".<br />Given an alphanumeric string, $s$, denoting a password, compute and print its MD5 encryption value.<br /><strong>Input Format</strong><br />A single alphanumeric string denoting $s$.<br /><strong>Constraints</strong><br />- $6 \\leq|s| \\leq 20$<br />- String $s$ consists of English alphabetic letters (i.e., $[a-z A-Z]$ and/or decimal digits (i.e., 0 through 9 ) only.<br /><strong>Output Format</strong><br />Print the MD5 encryption value of $s$ on a new line.</p>\n<p><strong>Sample Input 0</strong></p>\n<pre><code>HelloWorld\n</code></pre>\n<p><strong>Sample Output 0</strong></p>\n<pre><code>68e109f0f40ca72a15e05cc22786f8e6\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>Javarmi123\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>2da2d1e0ce7b4951a858ed2d547ef485</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/6f81ef42-0c19-4faa-ab12-95c3945c53f0",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
},{
  "_id": {
    "$oid": "634dba84e9b9821851ef93cd"
  },
  "memoryLimit": 0,
  "source": 0,
  "timeLimit": 0,
  "scores": 30,
  "slug": "java-sha-256",
  "tags": [],
  "level": "INTERMEDIATE",
  "title": "Java SHA-256",
  "content": "<p>Cryptographic hash functions are mathematical operations run on digital data; by comparing the computed&nbsp;<em>hash</em>&nbsp;(i.e., the output produced by executing a hashing algorithm) to a known and expected hash value, a person can determine the data's integrity. For example, computing the hash of a downloaded file and comparing the result to a previously published hash result can show whether the download has been modified or tampered with. In addition, cryptographic hash functions are extremely collision-resistant; in other words, it should be extremely difficult to produce the same hash output from two different input values using a cryptographic hash function.</p>\n<p>Secure Hash Algorithm 2 (SHA-2) is a set of cryptographic hash functions designed by the National Security Agency (NSA). It consists of six identical hashing algorithms (i.e., SHA-256, SHA-512, SHA-224, SHA-384, SHA-512/224, SHA-512/256) with a variable digest size. SHA-256 is a 256 -bit (32 byte) hashing algorithm which can calculate a hash code for an input of up to $264-1$ bits. It undergoes 64 rounds of hashing and calculates a hash code that is a 64 -digit hexadecimal number.<br />Given a string, $s$, print its SHA-256 hash value.<br /><strong>Input Format</strong><br />A single alphanumeric string denoting $s$.</p>\n<p><strong>Constraints</strong><br />- $6 \\leq|s| \\leq 20$<br />- String $s$ consists of English alphabetic letters (i.e., $[a-z A-Z]$ and/or decimal digits (i.e., 0 through 9 ) only.<br /><strong>Output Format</strong><br />Print the SHA-256 encryption value of $s$ on a new line.</p>\n<p><strong>Sample Input 0</strong></p>\n<pre><code>HelloWorld\n</code></pre>\n<p><strong>Sample Output 0</strong></p>\n<pre><code>872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>Javarmi123\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>f1d5f8d75bb55c777207c251d07d9091dc10fe7d6682db869106aacb4b7df678</code></pre>",
  "status": "PUBLISH",
  "fileTestCase": [
    {
      "downloadUrl": "https://dev.tek4vn.2soft.top/public_files/3681ede4-9b0e-4437-ac78-d226934c0a39",
      "thumbnailUrl": "https://dev.tek4vn.2soft.top/public_files/archive-png",
      "name": "Archive.zip"
    }
  ]
}]